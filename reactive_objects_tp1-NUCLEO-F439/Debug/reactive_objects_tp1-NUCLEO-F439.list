
reactive_objects_tp1-NUCLEO-F439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c4c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08007dfc  08007dfc  00008dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f6c  08007f6c  00009074  2**0
                  CONTENTS
  4 .ARM          00000008  08007f6c  08007f6c  00008f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f74  08007f74  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f74  08007f74  00008f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f78  08007f78  00008f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007f7c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009074  2**0
                  CONTENTS
 10 .bss          00004a1c  20000074  20000074  00009074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004a90  20004a90  00009074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b913  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f14  00000000  00000000  000249b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f8  00000000  00000000  000288d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000128f  00000000  00000000  0002a0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028f63  00000000  00000000  0002b357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d2dc  00000000  00000000  000542ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef2b6  00000000  00000000  00071596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016084c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000712c  00000000  00000000  00160890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  001679bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007de4 	.word	0x08007de4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08007de4 	.word	0x08007de4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	4a07      	ldr	r2, [pc, #28]	@ (80005bc <vApplicationGetIdleTaskMemory+0x2c>)
 80005a0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	4a06      	ldr	r2, [pc, #24]	@ (80005c0 <vApplicationGetIdleTaskMemory+0x30>)
 80005a6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	@ 0x80
 80005ac:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000090 	.word	0x20000090
 80005c0:	200000f4 	.word	0x200000f4

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 80005c8:	f006 fa60 	bl	8006a8c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fd30 	bl	8001030 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f816 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f972 	bl	80008bc <MX_GPIO_Init>
  MX_ETH_Init();
 80005d8:	f000 f87c 	bl	80006d4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005dc:	f000 f916 	bl	800080c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e0:	f000 f93e 	bl	8000860 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 80005e4:	f000 f8c4 	bl	8000770 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* Start timer */
	HAL_TIM_Base_Start_IT(&htim2);
 80005e8:	4804      	ldr	r0, [pc, #16]	@ (80005fc <main+0x38>)
 80005ea:	f002 f997 	bl	800291c <HAL_TIM_Base_Start_IT>
	
    /* add application, ... */
	app_init();
 80005ee:	f005 fc41 	bl	8005e74 <app_init>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005f2:	f003 fb7c 	bl	8003cee <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f6:	bf00      	nop
 80005f8:	e7fd      	b.n	80005f6 <main+0x32>
 80005fa:	bf00      	nop
 80005fc:	2000051c 	.word	0x2000051c

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	@ 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	@ 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f006 fcc5 	bl	8006f9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b28      	ldr	r3, [pc, #160]	@ (80006cc <SystemClock_Config+0xcc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800062c:	4a27      	ldr	r2, [pc, #156]	@ (80006cc <SystemClock_Config+0xcc>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	@ 0x40
 8000634:	4b25      	ldr	r3, [pc, #148]	@ (80006cc <SystemClock_Config+0xcc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b22      	ldr	r3, [pc, #136]	@ (80006d0 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a21      	ldr	r2, [pc, #132]	@ (80006d0 <SystemClock_Config+0xd0>)
 800064a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1f      	ldr	r3, [pc, #124]	@ (80006d0 <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000660:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000664:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800066e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000670:	2304      	movs	r3, #4
 8000672:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000674:	23a8      	movs	r3, #168	@ 0xa8
 8000676:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800067c:	2307      	movs	r3, #7
 800067e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fc2f 	bl	8001ee8 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000690:	f000 f9f8 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	2105      	movs	r1, #5
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 fe90 	bl	80023d8 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006be:	f000 f9e1 	bl	8000a84 <Error_Handler>
  }
}
 80006c2:	bf00      	nop
 80006c4:	3750      	adds	r7, #80	@ 0x50
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40007000 	.word	0x40007000

080006d4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000758 <MX_ETH_Init+0x84>)
 80006da:	4a20      	ldr	r2, [pc, #128]	@ (800075c <MX_ETH_Init+0x88>)
 80006dc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006de:	4b20      	ldr	r3, [pc, #128]	@ (8000760 <MX_ETH_Init+0x8c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000760 <MX_ETH_Init+0x8c>)
 80006e6:	2280      	movs	r2, #128	@ 0x80
 80006e8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000760 <MX_ETH_Init+0x8c>)
 80006ec:	22e1      	movs	r2, #225	@ 0xe1
 80006ee:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <MX_ETH_Init+0x8c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <MX_ETH_Init+0x8c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006fc:	4b18      	ldr	r3, [pc, #96]	@ (8000760 <MX_ETH_Init+0x8c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000702:	4b15      	ldr	r3, [pc, #84]	@ (8000758 <MX_ETH_Init+0x84>)
 8000704:	4a16      	ldr	r2, [pc, #88]	@ (8000760 <MX_ETH_Init+0x8c>)
 8000706:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000708:	4b13      	ldr	r3, [pc, #76]	@ (8000758 <MX_ETH_Init+0x84>)
 800070a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800070e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000710:	4b11      	ldr	r3, [pc, #68]	@ (8000758 <MX_ETH_Init+0x84>)
 8000712:	4a14      	ldr	r2, [pc, #80]	@ (8000764 <MX_ETH_Init+0x90>)
 8000714:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000716:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <MX_ETH_Init+0x84>)
 8000718:	4a13      	ldr	r2, [pc, #76]	@ (8000768 <MX_ETH_Init+0x94>)
 800071a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800071c:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <MX_ETH_Init+0x84>)
 800071e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000722:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000724:	480c      	ldr	r0, [pc, #48]	@ (8000758 <MX_ETH_Init+0x84>)
 8000726:	f000 fdcb 	bl	80012c0 <HAL_ETH_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000730:	f000 f9a8 	bl	8000a84 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000734:	2238      	movs	r2, #56	@ 0x38
 8000736:	2100      	movs	r1, #0
 8000738:	480c      	ldr	r0, [pc, #48]	@ (800076c <MX_ETH_Init+0x98>)
 800073a:	f006 fc30 	bl	8006f9e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <MX_ETH_Init+0x98>)
 8000740:	2221      	movs	r2, #33	@ 0x21
 8000742:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_ETH_Init+0x98>)
 8000746:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800074a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800074c:	4b07      	ldr	r3, [pc, #28]	@ (800076c <MX_ETH_Init+0x98>)
 800074e:	2200      	movs	r2, #0
 8000750:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000046c 	.word	0x2000046c
 800075c:	40028000 	.word	0x40028000
 8000760:	20000a94 	.word	0x20000a94
 8000764:	200003cc 	.word	0x200003cc
 8000768:	2000032c 	.word	0x2000032c
 800076c:	200002f4 	.word	0x200002f4

08000770 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000784:	463b      	mov	r3, r7
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800078c:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <MX_TIM2_Init+0x94>)
 800078e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000792:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8000794:	4b1b      	ldr	r3, [pc, #108]	@ (8000804 <MX_TIM2_Init+0x94>)
 8000796:	2201      	movs	r2, #1
 8000798:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079a:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <MX_TIM2_Init+0x94>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 84000-1;
 80007a0:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <MX_TIM2_Init+0x94>)
 80007a2:	4a19      	ldr	r2, [pc, #100]	@ (8000808 <MX_TIM2_Init+0x98>)
 80007a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a6:	4b17      	ldr	r3, [pc, #92]	@ (8000804 <MX_TIM2_Init+0x94>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ac:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <MX_TIM2_Init+0x94>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007b2:	4814      	ldr	r0, [pc, #80]	@ (8000804 <MX_TIM2_Init+0x94>)
 80007b4:	f002 f862 	bl	800287c <HAL_TIM_Base_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80007be:	f000 f961 	bl	8000a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	4619      	mov	r1, r3
 80007ce:	480d      	ldr	r0, [pc, #52]	@ (8000804 <MX_TIM2_Init+0x94>)
 80007d0:	f002 fa04 	bl	8002bdc <HAL_TIM_ConfigClockSource>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80007da:	f000 f953 	bl	8000a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007e6:	463b      	mov	r3, r7
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	@ (8000804 <MX_TIM2_Init+0x94>)
 80007ec:	f002 fc2c 	bl	8003048 <HAL_TIMEx_MasterConfigSynchronization>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80007f6:	f000 f945 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000051c 	.word	0x2000051c
 8000808:	0001481f 	.word	0x0001481f

0800080c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_USART3_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	@ (800085c <MX_USART3_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <MX_USART3_UART_Init+0x4c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_USART3_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_USART3_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_USART3_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_USART3_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <MX_USART3_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_USART3_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_USART3_UART_Init+0x4c>)
 8000844:	f002 fc90 	bl	8003168 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f919 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000564 	.word	0x20000564
 800085c:	40004800 	.word	0x40004800

08000860 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000864:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000866:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800086a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800086c:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	2204      	movs	r2, #4
 8000870:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000874:	2202      	movs	r2, #2
 8000876:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000878:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800087e:	4b0e      	ldr	r3, [pc, #56]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000880:	2202      	movs	r2, #2
 8000882:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000884:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000886:	2201      	movs	r2, #1
 8000888:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000890:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000898:	2201      	movs	r2, #1
 800089a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800089c:	4b06      	ldr	r3, [pc, #24]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a4:	f001 fa11 	bl	8001cca <HAL_PCD_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008ae:	f000 f8e9 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200005ac 	.word	0x200005ac

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	@ 0x30
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	4b4c      	ldr	r3, [pc, #304]	@ (8000a08 <MX_GPIO_Init+0x14c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a4b      	ldr	r2, [pc, #300]	@ (8000a08 <MX_GPIO_Init+0x14c>)
 80008dc:	f043 0304 	orr.w	r3, r3, #4
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b49      	ldr	r3, [pc, #292]	@ (8000a08 <MX_GPIO_Init+0x14c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0304 	and.w	r3, r3, #4
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	4b45      	ldr	r3, [pc, #276]	@ (8000a08 <MX_GPIO_Init+0x14c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f6:	4a44      	ldr	r2, [pc, #272]	@ (8000a08 <MX_GPIO_Init+0x14c>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fe:	4b42      	ldr	r3, [pc, #264]	@ (8000a08 <MX_GPIO_Init+0x14c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a08 <MX_GPIO_Init+0x14c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a3d      	ldr	r2, [pc, #244]	@ (8000a08 <MX_GPIO_Init+0x14c>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a08 <MX_GPIO_Init+0x14c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b37      	ldr	r3, [pc, #220]	@ (8000a08 <MX_GPIO_Init+0x14c>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	4a36      	ldr	r2, [pc, #216]	@ (8000a08 <MX_GPIO_Init+0x14c>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	@ 0x30
 8000936:	4b34      	ldr	r3, [pc, #208]	@ (8000a08 <MX_GPIO_Init+0x14c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b30      	ldr	r3, [pc, #192]	@ (8000a08 <MX_GPIO_Init+0x14c>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	4a2f      	ldr	r2, [pc, #188]	@ (8000a08 <MX_GPIO_Init+0x14c>)
 800094c:	f043 0308 	orr.w	r3, r3, #8
 8000950:	6313      	str	r3, [r2, #48]	@ 0x30
 8000952:	4b2d      	ldr	r3, [pc, #180]	@ (8000a08 <MX_GPIO_Init+0x14c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	f003 0308 	and.w	r3, r3, #8
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b29      	ldr	r3, [pc, #164]	@ (8000a08 <MX_GPIO_Init+0x14c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	4a28      	ldr	r2, [pc, #160]	@ (8000a08 <MX_GPIO_Init+0x14c>)
 8000968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800096c:	6313      	str	r3, [r2, #48]	@ 0x30
 800096e:	4b26      	ldr	r3, [pc, #152]	@ (8000a08 <MX_GPIO_Init+0x14c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000980:	4822      	ldr	r0, [pc, #136]	@ (8000a0c <MX_GPIO_Init+0x150>)
 8000982:	f001 f989 	bl	8001c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2140      	movs	r1, #64	@ 0x40
 800098a:	4821      	ldr	r0, [pc, #132]	@ (8000a10 <MX_GPIO_Init+0x154>)
 800098c:	f001 f984 	bl	8001c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000990:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000996:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	481b      	ldr	r0, [pc, #108]	@ (8000a14 <MX_GPIO_Init+0x158>)
 80009a8:	f000 ffb2 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009ac:	f244 0381 	movw	r3, #16513	@ 0x4081
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4811      	ldr	r0, [pc, #68]	@ (8000a0c <MX_GPIO_Init+0x150>)
 80009c6:	f000 ffa3 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009ca:	2340      	movs	r3, #64	@ 0x40
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	480b      	ldr	r0, [pc, #44]	@ (8000a10 <MX_GPIO_Init+0x154>)
 80009e2:	f000 ff95 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009e6:	2380      	movs	r3, #128	@ 0x80
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <MX_GPIO_Init+0x154>)
 80009fa:	f000 ff89 	bl	8001910 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009fe:	bf00      	nop
 8000a00:	3730      	adds	r7, #48	@ 0x30
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020400 	.word	0x40020400
 8000a10:	40021800 	.word	0x40021800
 8000a14:	40020800 	.word	0x40020800

08000a18 <configureTimerForRunTimeStats>:

/* USER CODE BEGIN 4 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
void configureTimerForRunTimeStats(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 8000a1c:	4b03      	ldr	r3, [pc, #12]	@ (8000a2c <configureTimerForRunTimeStats+0x14>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	20000a90 	.word	0x20000a90

08000a30 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000a34:	4b03      	ldr	r3, [pc, #12]	@ (8000a44 <getRunTimeCounterValue+0x14>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000a90 	.word	0x20000a90

08000a48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a09      	ldr	r2, [pc, #36]	@ (8000a7c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d101      	bne.n	8000a5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a5a:	f000 fb0b 	bl	8001074 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim->Instance == TIM2)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a66:	d104      	bne.n	8000a72 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{
		ulHighFrequencyTimerTicks++;
 8000a68:	4b05      	ldr	r3, [pc, #20]	@ (8000a80 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	4a04      	ldr	r2, [pc, #16]	@ (8000a80 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000a70:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 1 */
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40010000 	.word	0x40010000
 8000a80:	20000a90 	.word	0x20000a90

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <Error_Handler+0x8>

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
 8000a9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ae4 <HAL_MspInit+0x54>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9e:	4a11      	ldr	r2, [pc, #68]	@ (8000ae4 <HAL_MspInit+0x54>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae4 <HAL_MspInit+0x54>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae4 <HAL_MspInit+0x54>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <HAL_MspInit+0x54>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac2:	4b08      	ldr	r3, [pc, #32]	@ (8000ae4 <HAL_MspInit+0x54>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	210f      	movs	r1, #15
 8000ad2:	f06f 0001 	mvn.w	r0, #1
 8000ad6:	f000 fbc9 	bl	800126c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	@ 0x38
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a55      	ldr	r2, [pc, #340]	@ (8000c5c <HAL_ETH_MspInit+0x174>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	f040 80a4 	bne.w	8000c54 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
 8000b10:	4b53      	ldr	r3, [pc, #332]	@ (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b14:	4a52      	ldr	r2, [pc, #328]	@ (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1c:	4b50      	ldr	r3, [pc, #320]	@ (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b24:	623b      	str	r3, [r7, #32]
 8000b26:	6a3b      	ldr	r3, [r7, #32]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
 8000b2c:	4b4c      	ldr	r3, [pc, #304]	@ (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b30:	4a4b      	ldr	r2, [pc, #300]	@ (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b32:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b38:	4b49      	ldr	r3, [pc, #292]	@ (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b40:	61fb      	str	r3, [r7, #28]
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	2300      	movs	r3, #0
 8000b46:	61bb      	str	r3, [r7, #24]
 8000b48:	4b45      	ldr	r3, [pc, #276]	@ (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4c:	4a44      	ldr	r2, [pc, #272]	@ (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b4e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000b52:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b54:	4b42      	ldr	r3, [pc, #264]	@ (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b5c:	61bb      	str	r3, [r7, #24]
 8000b5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	4b3e      	ldr	r3, [pc, #248]	@ (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b68:	4a3d      	ldr	r2, [pc, #244]	@ (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b70:	4b3b      	ldr	r3, [pc, #236]	@ (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	4b37      	ldr	r3, [pc, #220]	@ (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b84:	4a36      	ldr	r2, [pc, #216]	@ (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8c:	4b34      	ldr	r3, [pc, #208]	@ (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	4b30      	ldr	r3, [pc, #192]	@ (8000c60 <HAL_ETH_MspInit+0x178>)
 8000b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba0:	4a2f      	ldr	r2, [pc, #188]	@ (8000c60 <HAL_ETH_MspInit+0x178>)
 8000ba2:	f043 0302 	orr.w	r3, r3, #2
 8000ba6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c60 <HAL_ETH_MspInit+0x178>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bac:	f003 0302 	and.w	r3, r3, #2
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	4b29      	ldr	r3, [pc, #164]	@ (8000c60 <HAL_ETH_MspInit+0x178>)
 8000bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bbc:	4a28      	ldr	r2, [pc, #160]	@ (8000c60 <HAL_ETH_MspInit+0x178>)
 8000bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc4:	4b26      	ldr	r3, [pc, #152]	@ (8000c60 <HAL_ETH_MspInit+0x178>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bd0:	2332      	movs	r3, #50	@ 0x32
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be0:	230b      	movs	r3, #11
 8000be2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	481e      	ldr	r0, [pc, #120]	@ (8000c64 <HAL_ETH_MspInit+0x17c>)
 8000bec:	f000 fe90 	bl	8001910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bf0:	2386      	movs	r3, #134	@ 0x86
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c00:	230b      	movs	r3, #11
 8000c02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4817      	ldr	r0, [pc, #92]	@ (8000c68 <HAL_ETH_MspInit+0x180>)
 8000c0c:	f000 fe80 	bl	8001910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c22:	230b      	movs	r3, #11
 8000c24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480f      	ldr	r0, [pc, #60]	@ (8000c6c <HAL_ETH_MspInit+0x184>)
 8000c2e:	f000 fe6f 	bl	8001910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c32:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c40:	2303      	movs	r3, #3
 8000c42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c44:	230b      	movs	r3, #11
 8000c46:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4808      	ldr	r0, [pc, #32]	@ (8000c70 <HAL_ETH_MspInit+0x188>)
 8000c50:	f000 fe5e 	bl	8001910 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c54:	bf00      	nop
 8000c56:	3738      	adds	r7, #56	@ 0x38
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40028000 	.word	0x40028000
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020800 	.word	0x40020800
 8000c68:	40020000 	.word	0x40020000
 8000c6c:	40020400 	.word	0x40020400
 8000c70:	40021800 	.word	0x40021800

08000c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c84:	d115      	bne.n	8000cb2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <HAL_TIM_Base_MspInit+0x48>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000cbc <HAL_TIM_Base_MspInit+0x48>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c96:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <HAL_TIM_Base_MspInit+0x48>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2105      	movs	r1, #5
 8000ca6:	201c      	movs	r0, #28
 8000ca8:	f000 fae0 	bl	800126c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cac:	201c      	movs	r0, #28
 8000cae:	f000 faf9 	bl	80012a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cb2:	bf00      	nop
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40023800 	.word	0x40023800

08000cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	@ 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a19      	ldr	r2, [pc, #100]	@ (8000d44 <HAL_UART_MspInit+0x84>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d12c      	bne.n	8000d3c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cea:	4a17      	ldr	r2, [pc, #92]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000cec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf2:	4b15      	ldr	r3, [pc, #84]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a10      	ldr	r2, [pc, #64]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000d08:	f043 0308 	orr.w	r3, r3, #8
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <HAL_UART_MspInit+0x88>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d1a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d2c:	2307      	movs	r3, #7
 8000d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <HAL_UART_MspInit+0x8c>)
 8000d38:	f000 fdea 	bl	8001910 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d3c:	bf00      	nop
 8000d3e:	3728      	adds	r7, #40	@ 0x28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40004800 	.word	0x40004800
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020c00 	.word	0x40020c00

08000d50 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	@ 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d70:	d13f      	bne.n	8000df2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a20      	ldr	r2, [pc, #128]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b1e      	ldr	r3, [pc, #120]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d8e:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000da0:	230a      	movs	r3, #10
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4815      	ldr	r0, [pc, #84]	@ (8000e00 <HAL_PCD_MspInit+0xb0>)
 8000dac:	f000 fdb0 	bl	8001910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000db0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480e      	ldr	r0, [pc, #56]	@ (8000e00 <HAL_PCD_MspInit+0xb0>)
 8000dc6:	f000 fda3 	bl	8001910 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dca:	4b0c      	ldr	r3, [pc, #48]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000dcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000dce:	4a0b      	ldr	r2, [pc, #44]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dd4:	6353      	str	r3, [r2, #52]	@ 0x34
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b08      	ldr	r3, [pc, #32]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	4a07      	ldr	r2, [pc, #28]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000de0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000de6:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <HAL_PCD_MspInit+0xac>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	@ 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40023800 	.word	0x40023800
 8000e00:	40020000 	.word	0x40020000

08000e04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08c      	sub	sp, #48	@ 0x30
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed8 <HAL_InitTick+0xd4>)
 8000e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1c:	4a2e      	ldr	r2, [pc, #184]	@ (8000ed8 <HAL_InitTick+0xd4>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e24:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed8 <HAL_InitTick+0xd4>)
 8000e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e30:	f107 020c 	add.w	r2, r7, #12
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	4611      	mov	r1, r2
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 fcec 	bl	8002818 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000e40:	f001 fcd6 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 8000e44:	4603      	mov	r3, r0
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e4c:	4a23      	ldr	r2, [pc, #140]	@ (8000edc <HAL_InitTick+0xd8>)
 8000e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e52:	0c9b      	lsrs	r3, r3, #18
 8000e54:	3b01      	subs	r3, #1
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e58:	4b21      	ldr	r3, [pc, #132]	@ (8000ee0 <HAL_InitTick+0xdc>)
 8000e5a:	4a22      	ldr	r2, [pc, #136]	@ (8000ee4 <HAL_InitTick+0xe0>)
 8000e5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ee0 <HAL_InitTick+0xdc>)
 8000e60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e64:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e66:	4a1e      	ldr	r2, [pc, #120]	@ (8000ee0 <HAL_InitTick+0xdc>)
 8000e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e6a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e6c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee0 <HAL_InitTick+0xdc>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e72:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee0 <HAL_InitTick+0xdc>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e78:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <HAL_InitTick+0xdc>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000e7e:	4818      	ldr	r0, [pc, #96]	@ (8000ee0 <HAL_InitTick+0xdc>)
 8000e80:	f001 fcfc 	bl	800287c <HAL_TIM_Base_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000e8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d11b      	bne.n	8000eca <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000e92:	4813      	ldr	r0, [pc, #76]	@ (8000ee0 <HAL_InitTick+0xdc>)
 8000e94:	f001 fd42 	bl	800291c <HAL_TIM_Base_Start_IT>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000e9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d111      	bne.n	8000eca <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ea6:	2019      	movs	r0, #25
 8000ea8:	f000 f9fc 	bl	80012a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b0f      	cmp	r3, #15
 8000eb0:	d808      	bhi.n	8000ec4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	6879      	ldr	r1, [r7, #4]
 8000eb6:	2019      	movs	r0, #25
 8000eb8:	f000 f9d8 	bl	800126c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <HAL_InitTick+0xe4>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e002      	b.n	8000eca <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000eca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3730      	adds	r7, #48	@ 0x30
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	431bde83 	.word	0x431bde83
 8000ee0:	20000a9c 	.word	0x20000a9c
 8000ee4:	40010000 	.word	0x40010000
 8000ee8:	20000004 	.word	0x20000004

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <MemManage_Handler+0x4>

08000f04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f28:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f2a:	f001 fd67 	bl	80029fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000a9c 	.word	0x20000a9c

08000f38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f3c:	4802      	ldr	r0, [pc, #8]	@ (8000f48 <TIM2_IRQHandler+0x10>)
 8000f3e:	f001 fd5d 	bl	80029fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000051c 	.word	0x2000051c

08000f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f54:	4a14      	ldr	r2, [pc, #80]	@ (8000fa8 <_sbrk+0x5c>)
 8000f56:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <_sbrk+0x60>)
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f60:	4b13      	ldr	r3, [pc, #76]	@ (8000fb0 <_sbrk+0x64>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d102      	bne.n	8000f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f68:	4b11      	ldr	r3, [pc, #68]	@ (8000fb0 <_sbrk+0x64>)
 8000f6a:	4a12      	ldr	r2, [pc, #72]	@ (8000fb4 <_sbrk+0x68>)
 8000f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f6e:	4b10      	ldr	r3, [pc, #64]	@ (8000fb0 <_sbrk+0x64>)
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d207      	bcs.n	8000f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f7c:	f006 f85e 	bl	800703c <__errno>
 8000f80:	4603      	mov	r3, r0
 8000f82:	220c      	movs	r2, #12
 8000f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8a:	e009      	b.n	8000fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f8c:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <_sbrk+0x64>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f92:	4b07      	ldr	r3, [pc, #28]	@ (8000fb0 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	4a05      	ldr	r2, [pc, #20]	@ (8000fb0 <_sbrk+0x64>)
 8000f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20030000 	.word	0x20030000
 8000fac:	00000400 	.word	0x00000400
 8000fb0:	20000ae4 	.word	0x20000ae4
 8000fb4:	20004a90 	.word	0x20004a90

08000fb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <SystemInit+0x20>)
 8000fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fc2:	4a05      	ldr	r2, [pc, #20]	@ (8000fd8 <SystemInit+0x20>)
 8000fc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001014 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fe0:	f7ff ffea 	bl	8000fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe4:	480c      	ldr	r0, [pc, #48]	@ (8001018 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fe6:	490d      	ldr	r1, [pc, #52]	@ (800101c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	@ (8001020 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fec:	e002      	b.n	8000ff4 <LoopCopyDataInit>

08000fee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff2:	3304      	adds	r3, #4

08000ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff8:	d3f9      	bcc.n	8000fee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ffc:	4c0a      	ldr	r4, [pc, #40]	@ (8001028 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ffe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001000:	e001      	b.n	8001006 <LoopFillZerobss>

08001002 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001002:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001004:	3204      	adds	r2, #4

08001006 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001006:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001008:	d3fb      	bcc.n	8001002 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800100a:	f006 f81d 	bl	8007048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800100e:	f7ff fad9 	bl	80005c4 <main>
  bx  lr    
 8001012:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001014:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800101c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001020:	08007f7c 	.word	0x08007f7c
  ldr r2, =_sbss
 8001024:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001028:	20004a90 	.word	0x20004a90

0800102c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800102c:	e7fe      	b.n	800102c <ADC_IRQHandler>
	...

08001030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001034:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0d      	ldr	r2, [pc, #52]	@ (8001070 <HAL_Init+0x40>)
 800103a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800103e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001040:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0a      	ldr	r2, [pc, #40]	@ (8001070 <HAL_Init+0x40>)
 8001046:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800104a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800104c:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <HAL_Init+0x40>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a07      	ldr	r2, [pc, #28]	@ (8001070 <HAL_Init+0x40>)
 8001052:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001056:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001058:	2003      	movs	r0, #3
 800105a:	f000 f8fc 	bl	8001256 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105e:	200f      	movs	r0, #15
 8001060:	f7ff fed0 	bl	8000e04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001064:	f7ff fd14 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023c00 	.word	0x40023c00

08001074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <HAL_IncTick+0x20>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_IncTick+0x24>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a04      	ldr	r2, [pc, #16]	@ (8001098 <HAL_IncTick+0x24>)
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	20000008 	.word	0x20000008
 8001098:	20000ae8 	.word	0x20000ae8

0800109c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;
 80010a0:	4b03      	ldr	r3, [pc, #12]	@ (80010b0 <HAL_GetTick+0x14>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000ae8 	.word	0x20000ae8

080010b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010bc:	f7ff ffee 	bl	800109c <HAL_GetTick>
 80010c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010cc:	d005      	beq.n	80010da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ce:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <HAL_Delay+0x44>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	461a      	mov	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4413      	add	r3, r2
 80010d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010da:	bf00      	nop
 80010dc:	f7ff ffde 	bl	800109c <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	68fa      	ldr	r2, [r7, #12]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d8f7      	bhi.n	80010dc <HAL_Delay+0x28>
  {
  }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000008 	.word	0x20000008

080010fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800110c:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001118:	4013      	ands	r3, r2
 800111a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001124:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800112c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112e:	4a04      	ldr	r2, [pc, #16]	@ (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	60d3      	str	r3, [r2, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <__NVIC_GetPriorityGrouping+0x18>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	0a1b      	lsrs	r3, r3, #8
 800114e:	f003 0307 	and.w	r3, r3, #7
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	2b00      	cmp	r3, #0
 8001170:	db0b      	blt.n	800118a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	f003 021f 	and.w	r2, r3, #31
 8001178:	4907      	ldr	r1, [pc, #28]	@ (8001198 <__NVIC_EnableIRQ+0x38>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	095b      	lsrs	r3, r3, #5
 8001180:	2001      	movs	r0, #1
 8001182:	fa00 f202 	lsl.w	r2, r0, r2
 8001186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000e100 	.word	0xe000e100

0800119c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	db0a      	blt.n	80011c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	b2da      	uxtb	r2, r3
 80011b4:	490c      	ldr	r1, [pc, #48]	@ (80011e8 <__NVIC_SetPriority+0x4c>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	0112      	lsls	r2, r2, #4
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	440b      	add	r3, r1
 80011c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c4:	e00a      	b.n	80011dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4908      	ldr	r1, [pc, #32]	@ (80011ec <__NVIC_SetPriority+0x50>)
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	3b04      	subs	r3, #4
 80011d4:	0112      	lsls	r2, r2, #4
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	440b      	add	r3, r1
 80011da:	761a      	strb	r2, [r3, #24]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000e100 	.word	0xe000e100
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b089      	sub	sp, #36	@ 0x24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f1c3 0307 	rsb	r3, r3, #7
 800120a:	2b04      	cmp	r3, #4
 800120c:	bf28      	it	cs
 800120e:	2304      	movcs	r3, #4
 8001210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	3304      	adds	r3, #4
 8001216:	2b06      	cmp	r3, #6
 8001218:	d902      	bls.n	8001220 <NVIC_EncodePriority+0x30>
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3b03      	subs	r3, #3
 800121e:	e000      	b.n	8001222 <NVIC_EncodePriority+0x32>
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	f04f 32ff 	mov.w	r2, #4294967295
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	43da      	mvns	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	401a      	ands	r2, r3
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001238:	f04f 31ff 	mov.w	r1, #4294967295
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa01 f303 	lsl.w	r3, r1, r3
 8001242:	43d9      	mvns	r1, r3
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001248:	4313      	orrs	r3, r2
         );
}
 800124a:	4618      	mov	r0, r3
 800124c:	3724      	adds	r7, #36	@ 0x24
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ff4c 	bl	80010fc <__NVIC_SetPriorityGrouping>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800127e:	f7ff ff61 	bl	8001144 <__NVIC_GetPriorityGrouping>
 8001282:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	68b9      	ldr	r1, [r7, #8]
 8001288:	6978      	ldr	r0, [r7, #20]
 800128a:	f7ff ffb1 	bl	80011f0 <NVIC_EncodePriority>
 800128e:	4602      	mov	r2, r0
 8001290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001294:	4611      	mov	r1, r2
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ff80 	bl	800119c <__NVIC_SetPriority>
}
 800129c:	bf00      	nop
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff54 	bl	8001160 <__NVIC_EnableIRQ>
}
 80012b8:	bf00      	nop
 80012ba:	3708      	adds	r7, #8
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e06c      	b.n	80013ac <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d106      	bne.n	80012ea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2223      	movs	r2, #35	@ 0x23
 80012e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff fbff 	bl	8000ae8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	4b31      	ldr	r3, [pc, #196]	@ (80013b4 <HAL_ETH_Init+0xf4>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	4a30      	ldr	r2, [pc, #192]	@ (80013b4 <HAL_ETH_Init+0xf4>)
 80012f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fa:	4b2e      	ldr	r3, [pc, #184]	@ (80013b4 <HAL_ETH_Init+0xf4>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001306:	4b2c      	ldr	r3, [pc, #176]	@ (80013b8 <HAL_ETH_Init+0xf8>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4a2b      	ldr	r2, [pc, #172]	@ (80013b8 <HAL_ETH_Init+0xf8>)
 800130c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001310:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001312:	4b29      	ldr	r3, [pc, #164]	@ (80013b8 <HAL_ETH_Init+0xf8>)
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	4927      	ldr	r1, [pc, #156]	@ (80013b8 <HAL_ETH_Init+0xf8>)
 800131c:	4313      	orrs	r3, r2
 800131e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001320:	4b25      	ldr	r3, [pc, #148]	@ (80013b8 <HAL_ETH_Init+0xf8>)
 8001322:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800133a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800133c:	f7ff feae 	bl	800109c <HAL_GetTick>
 8001340:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001342:	e011      	b.n	8001368 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001344:	f7ff feaa 	bl	800109c <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001352:	d909      	bls.n	8001368 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2204      	movs	r2, #4
 8001358:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	22e0      	movs	r2, #224	@ 0xe0
 8001360:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e021      	b.n	80013ac <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1e4      	bne.n	8001344 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 f958 	bl	8001630 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f9ff 	bl	8001784 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f000 fa55 	bl	8001836 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	461a      	mov	r2, r3
 8001392:	2100      	movs	r1, #0
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f000 f9bd 	bl	8001714 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2210      	movs	r2, #16
 80013a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40013800 	.word	0x40013800

080013bc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	4b51      	ldr	r3, [pc, #324]	@ (8001518 <ETH_SetMACConfig+0x15c>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	7c1b      	ldrb	r3, [r3, #16]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d102      	bne.n	80013e4 <ETH_SetMACConfig+0x28>
 80013de:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013e2:	e000      	b.n	80013e6 <ETH_SetMACConfig+0x2a>
 80013e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	7c5b      	ldrb	r3, [r3, #17]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d102      	bne.n	80013f4 <ETH_SetMACConfig+0x38>
 80013ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013f2:	e000      	b.n	80013f6 <ETH_SetMACConfig+0x3a>
 80013f4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013f6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	7fdb      	ldrb	r3, [r3, #31]
 8001402:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001404:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800140a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	7f92      	ldrb	r2, [r2, #30]
 8001410:	2a00      	cmp	r2, #0
 8001412:	d102      	bne.n	800141a <ETH_SetMACConfig+0x5e>
 8001414:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001418:	e000      	b.n	800141c <ETH_SetMACConfig+0x60>
 800141a:	2200      	movs	r2, #0
                        macconf->Speed |
 800141c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	7f1b      	ldrb	r3, [r3, #28]
 8001422:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001424:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800142a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	791b      	ldrb	r3, [r3, #4]
 8001430:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001432:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	f892 2020 	ldrb.w	r2, [r2, #32]
 800143a:	2a00      	cmp	r2, #0
 800143c:	d102      	bne.n	8001444 <ETH_SetMACConfig+0x88>
 800143e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001442:	e000      	b.n	8001446 <ETH_SetMACConfig+0x8a>
 8001444:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001446:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	7bdb      	ldrb	r3, [r3, #15]
 800144c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800144e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001454:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800145c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800145e:	4313      	orrs	r3, r2
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	4313      	orrs	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001476:	2001      	movs	r0, #1
 8001478:	f7ff fe1c 	bl	80010b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800148c:	68fa      	ldr	r2, [r7, #12]
 800148e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001492:	4013      	ands	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800149a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80014a2:	2a00      	cmp	r2, #0
 80014a4:	d101      	bne.n	80014aa <ETH_SetMACConfig+0xee>
 80014a6:	2280      	movs	r2, #128	@ 0x80
 80014a8:	e000      	b.n	80014ac <ETH_SetMACConfig+0xf0>
 80014aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014ac:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80014b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80014ba:	2a01      	cmp	r2, #1
 80014bc:	d101      	bne.n	80014c2 <ETH_SetMACConfig+0x106>
 80014be:	2208      	movs	r2, #8
 80014c0:	e000      	b.n	80014c4 <ETH_SetMACConfig+0x108>
 80014c2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80014c4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80014cc:	2a01      	cmp	r2, #1
 80014ce:	d101      	bne.n	80014d4 <ETH_SetMACConfig+0x118>
 80014d0:	2204      	movs	r2, #4
 80014d2:	e000      	b.n	80014d6 <ETH_SetMACConfig+0x11a>
 80014d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80014de:	2a01      	cmp	r2, #1
 80014e0:	d101      	bne.n	80014e6 <ETH_SetMACConfig+0x12a>
 80014e2:	2202      	movs	r2, #2
 80014e4:	e000      	b.n	80014e8 <ETH_SetMACConfig+0x12c>
 80014e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014e8:	4313      	orrs	r3, r2
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001500:	2001      	movs	r0, #1
 8001502:	f7ff fdd7 	bl	80010b4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	619a      	str	r2, [r3, #24]
}
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	ff20810f 	.word	0xff20810f

0800151c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	4b3d      	ldr	r3, [pc, #244]	@ (800162c <ETH_SetDMAConfig+0x110>)
 8001536:	4013      	ands	r3, r2
 8001538:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	7b1b      	ldrb	r3, [r3, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <ETH_SetDMAConfig+0x2c>
 8001542:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001546:	e000      	b.n	800154a <ETH_SetDMAConfig+0x2e>
 8001548:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	7b5b      	ldrb	r3, [r3, #13]
 800154e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001550:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	7f52      	ldrb	r2, [r2, #29]
 8001556:	2a00      	cmp	r2, #0
 8001558:	d102      	bne.n	8001560 <ETH_SetDMAConfig+0x44>
 800155a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800155e:	e000      	b.n	8001562 <ETH_SetDMAConfig+0x46>
 8001560:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001562:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	7b9b      	ldrb	r3, [r3, #14]
 8001568:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800156a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001570:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	7f1b      	ldrb	r3, [r3, #28]
 8001576:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001578:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	7f9b      	ldrb	r3, [r3, #30]
 800157e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001580:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001586:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800158e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001590:	4313      	orrs	r3, r2
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	4313      	orrs	r3, r2
 8001596:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015a0:	461a      	mov	r2, r3
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015b2:	2001      	movs	r0, #1
 80015b4:	f7ff fd7e 	bl	80010b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015c0:	461a      	mov	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	791b      	ldrb	r3, [r3, #4]
 80015ca:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015d0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80015d6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015dc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015e4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80015e6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ec:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015ee:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015f4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80015fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001602:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001610:	2001      	movs	r0, #1
 8001612:	f7ff fd4f 	bl	80010b4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800161e:	461a      	mov	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6013      	str	r3, [r2, #0]
}
 8001624:	bf00      	nop
 8001626:	3710      	adds	r7, #16
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	f8de3f23 	.word	0xf8de3f23

08001630 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b0a6      	sub	sp, #152	@ 0x98
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001638:	2301      	movs	r3, #1
 800163a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800163e:	2301      	movs	r3, #1
 8001640:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001644:	2300      	movs	r3, #0
 8001646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800164e:	2301      	movs	r3, #1
 8001650:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800165a:	2301      	movs	r3, #1
 800165c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800166c:	2300      	movs	r3, #0
 800166e:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001670:	2300      	movs	r3, #0
 8001672:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001676:	2300      	movs	r3, #0
 8001678:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001686:	2300      	movs	r3, #0
 8001688:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001692:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001696:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001698:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800169c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80016a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016a8:	4619      	mov	r1, r3
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fe86 	bl	80013bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80016b0:	2301      	movs	r3, #1
 80016b2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80016b4:	2301      	movs	r3, #1
 80016b6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80016b8:	2301      	movs	r3, #1
 80016ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80016be:	2301      	movs	r3, #1
 80016c0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80016d2:	2300      	movs	r3, #0
 80016d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016d6:	2301      	movs	r3, #1
 80016d8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016dc:	2301      	movs	r3, #1
 80016de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016e4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80016e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80016ea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80016ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016f0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80016f2:	2301      	movs	r3, #1
 80016f4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001700:	f107 0308 	add.w	r3, r7, #8
 8001704:	4619      	mov	r1, r3
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff ff08 	bl	800151c <ETH_SetDMAConfig>
}
 800170c:	bf00      	nop
 800170e:	3798      	adds	r7, #152	@ 0x98
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3305      	adds	r3, #5
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	021b      	lsls	r3, r3, #8
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	3204      	adds	r2, #4
 800172c:	7812      	ldrb	r2, [r2, #0]
 800172e:	4313      	orrs	r3, r2
 8001730:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	4b11      	ldr	r3, [pc, #68]	@ (800177c <ETH_MACAddressConfig+0x68>)
 8001736:	4413      	add	r3, r2
 8001738:	461a      	mov	r2, r3
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3303      	adds	r3, #3
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	061a      	lsls	r2, r3, #24
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	3302      	adds	r3, #2
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	041b      	lsls	r3, r3, #16
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3301      	adds	r3, #1
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	4313      	orrs	r3, r2
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	7812      	ldrb	r2, [r2, #0]
 800175e:	4313      	orrs	r3, r2
 8001760:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001762:	68ba      	ldr	r2, [r7, #8]
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <ETH_MACAddressConfig+0x6c>)
 8001766:	4413      	add	r3, r2
 8001768:	461a      	mov	r2, r3
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	6013      	str	r3, [r2, #0]
}
 800176e:	bf00      	nop
 8001770:	371c      	adds	r7, #28
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40028040 	.word	0x40028040
 8001780:	40028044 	.word	0x40028044

08001784 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	e03e      	b.n	8001810 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68d9      	ldr	r1, [r3, #12]
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	440b      	add	r3, r1
 80017a2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2200      	movs	r2, #0
 80017ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	2200      	movs	r2, #0
 80017ba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80017bc:	68b9      	ldr	r1, [r7, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	3206      	adds	r2, #6
 80017c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d80c      	bhi.n	80017f4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68d9      	ldr	r1, [r3, #12]
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	440b      	add	r3, r1
 80017ec:	461a      	mov	r2, r3
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	e004      	b.n	80017fe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	461a      	mov	r2, r3
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	3301      	adds	r3, #1
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b03      	cmp	r3, #3
 8001814:	d9bd      	bls.n	8001792 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001828:	611a      	str	r2, [r3, #16]
}
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001836:	b480      	push	{r7}
 8001838:	b085      	sub	sp, #20
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	e046      	b.n	80018d2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6919      	ldr	r1, [r3, #16]
 8001848:	68fa      	ldr	r2, [r7, #12]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	440b      	add	r3, r1
 8001854:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2200      	movs	r2, #0
 8001860:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	2200      	movs	r2, #0
 8001872:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	2200      	movs	r2, #0
 8001878:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001880:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8001888:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001896:	68b9      	ldr	r1, [r7, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	3212      	adds	r2, #18
 800189e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d80c      	bhi.n	80018c2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6919      	ldr	r1, [r3, #16]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	4613      	mov	r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	440b      	add	r3, r1
 80018ba:	461a      	mov	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	e004      	b.n	80018cc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	461a      	mov	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	3301      	adds	r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d9b5      	bls.n	8001844 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2200      	movs	r2, #0
 80018ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001902:	60da      	str	r2, [r3, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	@ 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
 800192a:	e177      	b.n	8001c1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800192c:	2201      	movs	r2, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	429a      	cmp	r2, r3
 8001946:	f040 8166 	bne.w	8001c16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2b01      	cmp	r3, #1
 8001954:	d005      	beq.n	8001962 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800195e:	2b02      	cmp	r3, #2
 8001960:	d130      	bne.n	80019c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	2203      	movs	r2, #3
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001998:	2201      	movs	r2, #1
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 0201 	and.w	r2, r3, #1
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d017      	beq.n	8001a00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d123      	bne.n	8001a54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	08da      	lsrs	r2, r3, #3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3208      	adds	r2, #8
 8001a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	220f      	movs	r2, #15
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	08da      	lsrs	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3208      	adds	r2, #8
 8001a4e:	69b9      	ldr	r1, [r7, #24]
 8001a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0203 	and.w	r2, r3, #3
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80c0 	beq.w	8001c16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	4b66      	ldr	r3, [pc, #408]	@ (8001c34 <HAL_GPIO_Init+0x324>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9e:	4a65      	ldr	r2, [pc, #404]	@ (8001c34 <HAL_GPIO_Init+0x324>)
 8001aa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aa6:	4b63      	ldr	r3, [pc, #396]	@ (8001c34 <HAL_GPIO_Init+0x324>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ab2:	4a61      	ldr	r2, [pc, #388]	@ (8001c38 <HAL_GPIO_Init+0x328>)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	220f      	movs	r2, #15
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a58      	ldr	r2, [pc, #352]	@ (8001c3c <HAL_GPIO_Init+0x32c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d037      	beq.n	8001b4e <HAL_GPIO_Init+0x23e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a57      	ldr	r2, [pc, #348]	@ (8001c40 <HAL_GPIO_Init+0x330>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d031      	beq.n	8001b4a <HAL_GPIO_Init+0x23a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a56      	ldr	r2, [pc, #344]	@ (8001c44 <HAL_GPIO_Init+0x334>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d02b      	beq.n	8001b46 <HAL_GPIO_Init+0x236>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a55      	ldr	r2, [pc, #340]	@ (8001c48 <HAL_GPIO_Init+0x338>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d025      	beq.n	8001b42 <HAL_GPIO_Init+0x232>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a54      	ldr	r2, [pc, #336]	@ (8001c4c <HAL_GPIO_Init+0x33c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01f      	beq.n	8001b3e <HAL_GPIO_Init+0x22e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a53      	ldr	r2, [pc, #332]	@ (8001c50 <HAL_GPIO_Init+0x340>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d019      	beq.n	8001b3a <HAL_GPIO_Init+0x22a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a52      	ldr	r2, [pc, #328]	@ (8001c54 <HAL_GPIO_Init+0x344>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_GPIO_Init+0x226>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a51      	ldr	r2, [pc, #324]	@ (8001c58 <HAL_GPIO_Init+0x348>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00d      	beq.n	8001b32 <HAL_GPIO_Init+0x222>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a50      	ldr	r2, [pc, #320]	@ (8001c5c <HAL_GPIO_Init+0x34c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d007      	beq.n	8001b2e <HAL_GPIO_Init+0x21e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4f      	ldr	r2, [pc, #316]	@ (8001c60 <HAL_GPIO_Init+0x350>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d101      	bne.n	8001b2a <HAL_GPIO_Init+0x21a>
 8001b26:	2309      	movs	r3, #9
 8001b28:	e012      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b2a:	230a      	movs	r3, #10
 8001b2c:	e010      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b2e:	2308      	movs	r3, #8
 8001b30:	e00e      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b32:	2307      	movs	r3, #7
 8001b34:	e00c      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b36:	2306      	movs	r3, #6
 8001b38:	e00a      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	e008      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b3e:	2304      	movs	r3, #4
 8001b40:	e006      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b42:	2303      	movs	r3, #3
 8001b44:	e004      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e002      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	f002 0203 	and.w	r2, r2, #3
 8001b56:	0092      	lsls	r2, r2, #2
 8001b58:	4093      	lsls	r3, r2
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b60:	4935      	ldr	r1, [pc, #212]	@ (8001c38 <HAL_GPIO_Init+0x328>)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	089b      	lsrs	r3, r3, #2
 8001b66:	3302      	adds	r3, #2
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c64 <HAL_GPIO_Init+0x354>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b92:	4a34      	ldr	r2, [pc, #208]	@ (8001c64 <HAL_GPIO_Init+0x354>)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b98:	4b32      	ldr	r3, [pc, #200]	@ (8001c64 <HAL_GPIO_Init+0x354>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bbc:	4a29      	ldr	r2, [pc, #164]	@ (8001c64 <HAL_GPIO_Init+0x354>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bc2:	4b28      	ldr	r3, [pc, #160]	@ (8001c64 <HAL_GPIO_Init+0x354>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001be6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c64 <HAL_GPIO_Init+0x354>)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bec:	4b1d      	ldr	r3, [pc, #116]	@ (8001c64 <HAL_GPIO_Init+0x354>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c10:	4a14      	ldr	r2, [pc, #80]	@ (8001c64 <HAL_GPIO_Init+0x354>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	61fb      	str	r3, [r7, #28]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	2b0f      	cmp	r3, #15
 8001c20:	f67f ae84 	bls.w	800192c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	3724      	adds	r7, #36	@ 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40013800 	.word	0x40013800
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	40020400 	.word	0x40020400
 8001c44:	40020800 	.word	0x40020800
 8001c48:	40020c00 	.word	0x40020c00
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40021400 	.word	0x40021400
 8001c54:	40021800 	.word	0x40021800
 8001c58:	40021c00 	.word	0x40021c00
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	40022400 	.word	0x40022400
 8001c64:	40013c00 	.word	0x40013c00

08001c68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	887b      	ldrh	r3, [r7, #2]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c80:	2301      	movs	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
 8001c84:	e001      	b.n	8001c8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ca8:	787b      	ldrb	r3, [r7, #1]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cae:	887a      	ldrh	r2, [r7, #2]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cb4:	e003      	b.n	8001cbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cb6:	887b      	ldrh	r3, [r7, #2]
 8001cb8:	041a      	lsls	r2, r3, #16
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	619a      	str	r2, [r3, #24]
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b086      	sub	sp, #24
 8001cce:	af02      	add	r7, sp, #8
 8001cd0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e101      	b.n	8001ee0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d106      	bne.n	8001cfc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff f82a 	bl	8000d50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2203      	movs	r2, #3
 8001d00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d0a:	d102      	bne.n	8001d12 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f001 fd4e 	bl	80037b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6818      	ldr	r0, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	7c1a      	ldrb	r2, [r3, #16]
 8001d24:	f88d 2000 	strb.w	r2, [sp]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d2c:	f001 fce0 	bl	80036f0 <USB_CoreInit>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d005      	beq.n	8001d42 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e0ce      	b.n	8001ee0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f001 fd46 	bl	80037da <USB_SetCurrentMode>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0bf      	b.n	8001ee0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d60:	2300      	movs	r3, #0
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	e04a      	b.n	8001dfc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d66:	7bfa      	ldrb	r2, [r7, #15]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	3315      	adds	r3, #21
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	6879      	ldr	r1, [r7, #4]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4413      	add	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	440b      	add	r3, r1
 8001d88:	3314      	adds	r3, #20
 8001d8a:	7bfa      	ldrb	r2, [r7, #15]
 8001d8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	b298      	uxth	r0, r3
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	440b      	add	r3, r1
 8001da0:	332e      	adds	r3, #46	@ 0x2e
 8001da2:	4602      	mov	r2, r0
 8001da4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001da6:	7bfa      	ldrb	r2, [r7, #15]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	3318      	adds	r3, #24
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dba:	7bfa      	ldrb	r2, [r7, #15]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	331c      	adds	r3, #28
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	6879      	ldr	r1, [r7, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	3320      	adds	r3, #32
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	6879      	ldr	r1, [r7, #4]
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	3324      	adds	r3, #36	@ 0x24
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	791b      	ldrb	r3, [r3, #4]
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d3af      	bcc.n	8001d66 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e06:	2300      	movs	r3, #0
 8001e08:	73fb      	strb	r3, [r7, #15]
 8001e0a:	e044      	b.n	8001e96 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	4613      	mov	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4413      	add	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	440b      	add	r3, r1
 8001e1a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e22:	7bfa      	ldrb	r2, [r7, #15]
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	440b      	add	r3, r1
 8001e30:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e38:	7bfa      	ldrb	r2, [r7, #15]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e4e:	7bfa      	ldrb	r2, [r7, #15]
 8001e50:	6879      	ldr	r1, [r7, #4]
 8001e52:	4613      	mov	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e64:	7bfa      	ldrb	r2, [r7, #15]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	6879      	ldr	r1, [r7, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	440b      	add	r3, r1
 8001e88:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	3301      	adds	r3, #1
 8001e94:	73fb      	strb	r3, [r7, #15]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	791b      	ldrb	r3, [r3, #4]
 8001e9a:	7bfa      	ldrb	r2, [r7, #15]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d3b5      	bcc.n	8001e0c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7c1a      	ldrb	r2, [r3, #16]
 8001ea8:	f88d 2000 	strb.w	r2, [sp]
 8001eac:	3304      	adds	r3, #4
 8001eae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eb0:	f001 fce0 	bl	8003874 <USB_DevInit>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d005      	beq.n	8001ec6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e00c      	b.n	8001ee0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f001 fea8 	bl	8003c2e <USB_DevDisconnect>

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e267      	b.n	80023ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d075      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f06:	4b88      	ldr	r3, [pc, #544]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 030c 	and.w	r3, r3, #12
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d00c      	beq.n	8001f2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f12:	4b85      	ldr	r3, [pc, #532]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d112      	bne.n	8001f44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f1e:	4b82      	ldr	r3, [pc, #520]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f2a:	d10b      	bne.n	8001f44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	4b7e      	ldr	r3, [pc, #504]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d05b      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x108>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d157      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e242      	b.n	80023ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f4c:	d106      	bne.n	8001f5c <HAL_RCC_OscConfig+0x74>
 8001f4e:	4b76      	ldr	r3, [pc, #472]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a75      	ldr	r2, [pc, #468]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e01d      	b.n	8001f98 <HAL_RCC_OscConfig+0xb0>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f64:	d10c      	bne.n	8001f80 <HAL_RCC_OscConfig+0x98>
 8001f66:	4b70      	ldr	r3, [pc, #448]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a6f      	ldr	r2, [pc, #444]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	4b6d      	ldr	r3, [pc, #436]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a6c      	ldr	r2, [pc, #432]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e00b      	b.n	8001f98 <HAL_RCC_OscConfig+0xb0>
 8001f80:	4b69      	ldr	r3, [pc, #420]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a68      	ldr	r2, [pc, #416]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 8001f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b66      	ldr	r3, [pc, #408]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a65      	ldr	r2, [pc, #404]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 8001f92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d013      	beq.n	8001fc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7ff f87c 	bl	800109c <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7ff f878 	bl	800109c <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	@ 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e207      	b.n	80023ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	4b5b      	ldr	r3, [pc, #364]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0xc0>
 8001fc6:	e014      	b.n	8001ff2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7ff f868 	bl	800109c <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fd0:	f7ff f864 	bl	800109c <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	@ 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e1f3      	b.n	80023ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe2:	4b51      	ldr	r3, [pc, #324]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0xe8>
 8001fee:	e000      	b.n	8001ff2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d063      	beq.n	80020c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ffe:	4b4a      	ldr	r3, [pc, #296]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00b      	beq.n	8002022 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800200a:	4b47      	ldr	r3, [pc, #284]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002012:	2b08      	cmp	r3, #8
 8002014:	d11c      	bne.n	8002050 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002016:	4b44      	ldr	r3, [pc, #272]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d116      	bne.n	8002050 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002022:	4b41      	ldr	r3, [pc, #260]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d005      	beq.n	800203a <HAL_RCC_OscConfig+0x152>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d001      	beq.n	800203a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e1c7      	b.n	80023ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203a:	4b3b      	ldr	r3, [pc, #236]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4937      	ldr	r1, [pc, #220]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 800204a:	4313      	orrs	r3, r2
 800204c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204e:	e03a      	b.n	80020c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d020      	beq.n	800209a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002058:	4b34      	ldr	r3, [pc, #208]	@ (800212c <HAL_RCC_OscConfig+0x244>)
 800205a:	2201      	movs	r2, #1
 800205c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205e:	f7ff f81d 	bl	800109c <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002066:	f7ff f819 	bl	800109c <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e1a8      	b.n	80023ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002078:	4b2b      	ldr	r3, [pc, #172]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002084:	4b28      	ldr	r3, [pc, #160]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4925      	ldr	r1, [pc, #148]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 8002094:	4313      	orrs	r3, r2
 8002096:	600b      	str	r3, [r1, #0]
 8002098:	e015      	b.n	80020c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800209a:	4b24      	ldr	r3, [pc, #144]	@ (800212c <HAL_RCC_OscConfig+0x244>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7fe fffc 	bl	800109c <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020a8:	f7fe fff8 	bl	800109c <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e187      	b.n	80023ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d036      	beq.n	8002140 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d016      	beq.n	8002108 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020da:	4b15      	ldr	r3, [pc, #84]	@ (8002130 <HAL_RCC_OscConfig+0x248>)
 80020dc:	2201      	movs	r2, #1
 80020de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e0:	f7fe ffdc 	bl	800109c <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e8:	f7fe ffd8 	bl	800109c <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e167      	b.n	80023ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <HAL_RCC_OscConfig+0x240>)
 80020fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x200>
 8002106:	e01b      	b.n	8002140 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002108:	4b09      	ldr	r3, [pc, #36]	@ (8002130 <HAL_RCC_OscConfig+0x248>)
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210e:	f7fe ffc5 	bl	800109c <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002114:	e00e      	b.n	8002134 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002116:	f7fe ffc1 	bl	800109c <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d907      	bls.n	8002134 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e150      	b.n	80023ca <HAL_RCC_OscConfig+0x4e2>
 8002128:	40023800 	.word	0x40023800
 800212c:	42470000 	.word	0x42470000
 8002130:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002134:	4b88      	ldr	r3, [pc, #544]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 8002136:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1ea      	bne.n	8002116 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 8097 	beq.w	800227c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214e:	2300      	movs	r3, #0
 8002150:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002152:	4b81      	ldr	r3, [pc, #516]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10f      	bne.n	800217e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	4b7d      	ldr	r3, [pc, #500]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	4a7c      	ldr	r2, [pc, #496]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800216c:	6413      	str	r3, [r2, #64]	@ 0x40
 800216e:	4b7a      	ldr	r3, [pc, #488]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002176:	60bb      	str	r3, [r7, #8]
 8002178:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800217a:	2301      	movs	r3, #1
 800217c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217e:	4b77      	ldr	r3, [pc, #476]	@ (800235c <HAL_RCC_OscConfig+0x474>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002186:	2b00      	cmp	r3, #0
 8002188:	d118      	bne.n	80021bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800218a:	4b74      	ldr	r3, [pc, #464]	@ (800235c <HAL_RCC_OscConfig+0x474>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a73      	ldr	r2, [pc, #460]	@ (800235c <HAL_RCC_OscConfig+0x474>)
 8002190:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002194:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002196:	f7fe ff81 	bl	800109c <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219e:	f7fe ff7d 	bl	800109c <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e10c      	b.n	80023ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b0:	4b6a      	ldr	r3, [pc, #424]	@ (800235c <HAL_RCC_OscConfig+0x474>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f0      	beq.n	800219e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d106      	bne.n	80021d2 <HAL_RCC_OscConfig+0x2ea>
 80021c4:	4b64      	ldr	r3, [pc, #400]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 80021c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c8:	4a63      	ldr	r2, [pc, #396]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 80021ca:	f043 0301 	orr.w	r3, r3, #1
 80021ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80021d0:	e01c      	b.n	800220c <HAL_RCC_OscConfig+0x324>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b05      	cmp	r3, #5
 80021d8:	d10c      	bne.n	80021f4 <HAL_RCC_OscConfig+0x30c>
 80021da:	4b5f      	ldr	r3, [pc, #380]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021de:	4a5e      	ldr	r2, [pc, #376]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 80021e0:	f043 0304 	orr.w	r3, r3, #4
 80021e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80021e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80021f2:	e00b      	b.n	800220c <HAL_RCC_OscConfig+0x324>
 80021f4:	4b58      	ldr	r3, [pc, #352]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 80021f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f8:	4a57      	ldr	r2, [pc, #348]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 80021fa:	f023 0301 	bic.w	r3, r3, #1
 80021fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002200:	4b55      	ldr	r3, [pc, #340]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002204:	4a54      	ldr	r2, [pc, #336]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 8002206:	f023 0304 	bic.w	r3, r3, #4
 800220a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d015      	beq.n	8002240 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002214:	f7fe ff42 	bl	800109c <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800221a:	e00a      	b.n	8002232 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800221c:	f7fe ff3e 	bl	800109c <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e0cb      	b.n	80023ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002232:	4b49      	ldr	r3, [pc, #292]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 8002234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0ee      	beq.n	800221c <HAL_RCC_OscConfig+0x334>
 800223e:	e014      	b.n	800226a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002240:	f7fe ff2c 	bl	800109c <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002246:	e00a      	b.n	800225e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002248:	f7fe ff28 	bl	800109c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002256:	4293      	cmp	r3, r2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e0b5      	b.n	80023ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225e:	4b3e      	ldr	r3, [pc, #248]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 8002260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1ee      	bne.n	8002248 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800226a:	7dfb      	ldrb	r3, [r7, #23]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d105      	bne.n	800227c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002270:	4b39      	ldr	r3, [pc, #228]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 8002272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002274:	4a38      	ldr	r2, [pc, #224]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 8002276:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800227a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 80a1 	beq.w	80023c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002286:	4b34      	ldr	r3, [pc, #208]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	2b08      	cmp	r3, #8
 8002290:	d05c      	beq.n	800234c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d141      	bne.n	800231e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229a:	4b31      	ldr	r3, [pc, #196]	@ (8002360 <HAL_RCC_OscConfig+0x478>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7fe fefc 	bl	800109c <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a8:	f7fe fef8 	bl	800109c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e087      	b.n	80023ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ba:	4b27      	ldr	r3, [pc, #156]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69da      	ldr	r2, [r3, #28]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d4:	019b      	lsls	r3, r3, #6
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022dc:	085b      	lsrs	r3, r3, #1
 80022de:	3b01      	subs	r3, #1
 80022e0:	041b      	lsls	r3, r3, #16
 80022e2:	431a      	orrs	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e8:	061b      	lsls	r3, r3, #24
 80022ea:	491b      	ldr	r1, [pc, #108]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002360 <HAL_RCC_OscConfig+0x478>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f6:	f7fe fed1 	bl	800109c <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fe:	f7fe fecd 	bl	800109c <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e05c      	b.n	80023ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002310:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0f0      	beq.n	80022fe <HAL_RCC_OscConfig+0x416>
 800231c:	e054      	b.n	80023c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800231e:	4b10      	ldr	r3, [pc, #64]	@ (8002360 <HAL_RCC_OscConfig+0x478>)
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002324:	f7fe feba 	bl	800109c <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800232c:	f7fe feb6 	bl	800109c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e045      	b.n	80023ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800233e:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <HAL_RCC_OscConfig+0x470>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x444>
 800234a:	e03d      	b.n	80023c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d107      	bne.n	8002364 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e038      	b.n	80023ca <HAL_RCC_OscConfig+0x4e2>
 8002358:	40023800 	.word	0x40023800
 800235c:	40007000 	.word	0x40007000
 8002360:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002364:	4b1b      	ldr	r3, [pc, #108]	@ (80023d4 <HAL_RCC_OscConfig+0x4ec>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d028      	beq.n	80023c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800237c:	429a      	cmp	r2, r3
 800237e:	d121      	bne.n	80023c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800238a:	429a      	cmp	r2, r3
 800238c:	d11a      	bne.n	80023c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002394:	4013      	ands	r3, r2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800239a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800239c:	4293      	cmp	r3, r2
 800239e:	d111      	bne.n	80023c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023aa:	085b      	lsrs	r3, r3, #1
 80023ac:	3b01      	subs	r3, #1
 80023ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d107      	bne.n	80023c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800

080023d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0cc      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023ec:	4b68      	ldr	r3, [pc, #416]	@ (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 030f 	and.w	r3, r3, #15
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d90c      	bls.n	8002414 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fa:	4b65      	ldr	r3, [pc, #404]	@ (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b63      	ldr	r3, [pc, #396]	@ (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0b8      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d020      	beq.n	8002462 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800242c:	4b59      	ldr	r3, [pc, #356]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	4a58      	ldr	r2, [pc, #352]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002436:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002444:	4b53      	ldr	r3, [pc, #332]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	4a52      	ldr	r2, [pc, #328]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800244a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800244e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002450:	4b50      	ldr	r3, [pc, #320]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	494d      	ldr	r1, [pc, #308]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d044      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	4b47      	ldr	r3, [pc, #284]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d119      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e07f      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	2b02      	cmp	r3, #2
 800248c:	d003      	beq.n	8002496 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002492:	2b03      	cmp	r3, #3
 8002494:	d107      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002496:	4b3f      	ldr	r3, [pc, #252]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d109      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e06f      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e067      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024b6:	4b37      	ldr	r3, [pc, #220]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f023 0203 	bic.w	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4934      	ldr	r1, [pc, #208]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024c8:	f7fe fde8 	bl	800109c <HAL_GetTick>
 80024cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ce:	e00a      	b.n	80024e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d0:	f7fe fde4 	bl	800109c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024de:	4293      	cmp	r3, r2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e04f      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 020c 	and.w	r2, r3, #12
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d1eb      	bne.n	80024d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024f8:	4b25      	ldr	r3, [pc, #148]	@ (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d20c      	bcs.n	8002520 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002506:	4b22      	ldr	r3, [pc, #136]	@ (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800250e:	4b20      	ldr	r3, [pc, #128]	@ (8002590 <HAL_RCC_ClockConfig+0x1b8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	429a      	cmp	r2, r3
 800251a:	d001      	beq.n	8002520 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e032      	b.n	8002586 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800252c:	4b19      	ldr	r3, [pc, #100]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4916      	ldr	r1, [pc, #88]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d009      	beq.n	800255e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800254a:	4b12      	ldr	r3, [pc, #72]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	490e      	ldr	r1, [pc, #56]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800255e:	f000 f821 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 8002562:	4602      	mov	r2, r0
 8002564:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	490a      	ldr	r1, [pc, #40]	@ (8002598 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	5ccb      	ldrb	r3, [r1, r3]
 8002572:	fa22 f303 	lsr.w	r3, r2, r3
 8002576:	4a09      	ldr	r2, [pc, #36]	@ (800259c <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800257a:	4b09      	ldr	r3, [pc, #36]	@ (80025a0 <HAL_RCC_ClockConfig+0x1c8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fc40 	bl	8000e04 <HAL_InitTick>

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40023c00 	.word	0x40023c00
 8002594:	40023800 	.word	0x40023800
 8002598:	08007f00 	.word	0x08007f00
 800259c:	20000000 	.word	0x20000000
 80025a0:	20000004 	.word	0x20000004

080025a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025a8:	b094      	sub	sp, #80	@ 0x50
 80025aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80025b0:	2300      	movs	r3, #0
 80025b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025b4:	2300      	movs	r3, #0
 80025b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025bc:	4b79      	ldr	r3, [pc, #484]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d00d      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0x40>
 80025c8:	2b08      	cmp	r3, #8
 80025ca:	f200 80e1 	bhi.w	8002790 <HAL_RCC_GetSysClockFreq+0x1ec>
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <HAL_RCC_GetSysClockFreq+0x34>
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d003      	beq.n	80025de <HAL_RCC_GetSysClockFreq+0x3a>
 80025d6:	e0db      	b.n	8002790 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025d8:	4b73      	ldr	r3, [pc, #460]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80025da:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80025dc:	e0db      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025de:	4b73      	ldr	r3, [pc, #460]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x208>)
 80025e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025e2:	e0d8      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025e4:	4b6f      	ldr	r3, [pc, #444]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025ee:	4b6d      	ldr	r3, [pc, #436]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d063      	beq.n	80026c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025fa:	4b6a      	ldr	r3, [pc, #424]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	099b      	lsrs	r3, r3, #6
 8002600:	2200      	movs	r2, #0
 8002602:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002604:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800260c:	633b      	str	r3, [r7, #48]	@ 0x30
 800260e:	2300      	movs	r3, #0
 8002610:	637b      	str	r3, [r7, #52]	@ 0x34
 8002612:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002616:	4622      	mov	r2, r4
 8002618:	462b      	mov	r3, r5
 800261a:	f04f 0000 	mov.w	r0, #0
 800261e:	f04f 0100 	mov.w	r1, #0
 8002622:	0159      	lsls	r1, r3, #5
 8002624:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002628:	0150      	lsls	r0, r2, #5
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4621      	mov	r1, r4
 8002630:	1a51      	subs	r1, r2, r1
 8002632:	6139      	str	r1, [r7, #16]
 8002634:	4629      	mov	r1, r5
 8002636:	eb63 0301 	sbc.w	r3, r3, r1
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002648:	4659      	mov	r1, fp
 800264a:	018b      	lsls	r3, r1, #6
 800264c:	4651      	mov	r1, sl
 800264e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002652:	4651      	mov	r1, sl
 8002654:	018a      	lsls	r2, r1, #6
 8002656:	4651      	mov	r1, sl
 8002658:	ebb2 0801 	subs.w	r8, r2, r1
 800265c:	4659      	mov	r1, fp
 800265e:	eb63 0901 	sbc.w	r9, r3, r1
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800266e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002672:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002676:	4690      	mov	r8, r2
 8002678:	4699      	mov	r9, r3
 800267a:	4623      	mov	r3, r4
 800267c:	eb18 0303 	adds.w	r3, r8, r3
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	462b      	mov	r3, r5
 8002684:	eb49 0303 	adc.w	r3, r9, r3
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002696:	4629      	mov	r1, r5
 8002698:	024b      	lsls	r3, r1, #9
 800269a:	4621      	mov	r1, r4
 800269c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026a0:	4621      	mov	r1, r4
 80026a2:	024a      	lsls	r2, r1, #9
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026aa:	2200      	movs	r2, #0
 80026ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80026b4:	f7fd fdf4 	bl	80002a0 <__aeabi_uldivmod>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4613      	mov	r3, r2
 80026be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026c0:	e058      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c2:	4b38      	ldr	r3, [pc, #224]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	099b      	lsrs	r3, r3, #6
 80026c8:	2200      	movs	r2, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	4611      	mov	r1, r2
 80026ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026d2:	623b      	str	r3, [r7, #32]
 80026d4:	2300      	movs	r3, #0
 80026d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80026d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026dc:	4642      	mov	r2, r8
 80026de:	464b      	mov	r3, r9
 80026e0:	f04f 0000 	mov.w	r0, #0
 80026e4:	f04f 0100 	mov.w	r1, #0
 80026e8:	0159      	lsls	r1, r3, #5
 80026ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ee:	0150      	lsls	r0, r2, #5
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4641      	mov	r1, r8
 80026f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80026fa:	4649      	mov	r1, r9
 80026fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800270c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002710:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002714:	ebb2 040a 	subs.w	r4, r2, sl
 8002718:	eb63 050b 	sbc.w	r5, r3, fp
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	00eb      	lsls	r3, r5, #3
 8002726:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800272a:	00e2      	lsls	r2, r4, #3
 800272c:	4614      	mov	r4, r2
 800272e:	461d      	mov	r5, r3
 8002730:	4643      	mov	r3, r8
 8002732:	18e3      	adds	r3, r4, r3
 8002734:	603b      	str	r3, [r7, #0]
 8002736:	464b      	mov	r3, r9
 8002738:	eb45 0303 	adc.w	r3, r5, r3
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	e9d7 4500 	ldrd	r4, r5, [r7]
 800274a:	4629      	mov	r1, r5
 800274c:	028b      	lsls	r3, r1, #10
 800274e:	4621      	mov	r1, r4
 8002750:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002754:	4621      	mov	r1, r4
 8002756:	028a      	lsls	r2, r1, #10
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800275e:	2200      	movs	r2, #0
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	61fa      	str	r2, [r7, #28]
 8002764:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002768:	f7fd fd9a 	bl	80002a0 <__aeabi_uldivmod>
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4613      	mov	r3, r2
 8002772:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	0c1b      	lsrs	r3, r3, #16
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	3301      	adds	r3, #1
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002784:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002786:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002788:	fbb2 f3f3 	udiv	r3, r2, r3
 800278c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800278e:	e002      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002790:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002792:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002798:	4618      	mov	r0, r3
 800279a:	3750      	adds	r7, #80	@ 0x50
 800279c:	46bd      	mov	sp, r7
 800279e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800
 80027a8:	00f42400 	.word	0x00f42400
 80027ac:	007a1200 	.word	0x007a1200

080027b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b4:	4b03      	ldr	r3, [pc, #12]	@ (80027c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027b6:	681b      	ldr	r3, [r3, #0]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	20000000 	.word	0x20000000

080027c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027cc:	f7ff fff0 	bl	80027b0 <HAL_RCC_GetHCLKFreq>
 80027d0:	4602      	mov	r2, r0
 80027d2:	4b05      	ldr	r3, [pc, #20]	@ (80027e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	0a9b      	lsrs	r3, r3, #10
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	4903      	ldr	r1, [pc, #12]	@ (80027ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80027de:	5ccb      	ldrb	r3, [r1, r3]
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40023800 	.word	0x40023800
 80027ec:	08007f10 	.word	0x08007f10

080027f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027f4:	f7ff ffdc 	bl	80027b0 <HAL_RCC_GetHCLKFreq>
 80027f8:	4602      	mov	r2, r0
 80027fa:	4b05      	ldr	r3, [pc, #20]	@ (8002810 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	0b5b      	lsrs	r3, r3, #13
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	4903      	ldr	r1, [pc, #12]	@ (8002814 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002806:	5ccb      	ldrb	r3, [r1, r3]
 8002808:	fa22 f303 	lsr.w	r3, r2, r3
}
 800280c:	4618      	mov	r0, r3
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40023800 	.word	0x40023800
 8002814:	08007f10 	.word	0x08007f10

08002818 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	220f      	movs	r2, #15
 8002826:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002828:	4b12      	ldr	r3, [pc, #72]	@ (8002874 <HAL_RCC_GetClockConfig+0x5c>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f003 0203 	and.w	r2, r3, #3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002834:	4b0f      	ldr	r3, [pc, #60]	@ (8002874 <HAL_RCC_GetClockConfig+0x5c>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002840:	4b0c      	ldr	r3, [pc, #48]	@ (8002874 <HAL_RCC_GetClockConfig+0x5c>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800284c:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <HAL_RCC_GetClockConfig+0x5c>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	08db      	lsrs	r3, r3, #3
 8002852:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800285a:	4b07      	ldr	r3, [pc, #28]	@ (8002878 <HAL_RCC_GetClockConfig+0x60>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 020f 	and.w	r2, r3, #15
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	601a      	str	r2, [r3, #0]
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800
 8002878:	40023c00 	.word	0x40023c00

0800287c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d101      	bne.n	800288e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e041      	b.n	8002912 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d106      	bne.n	80028a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fe f9e6 	bl	8000c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2202      	movs	r2, #2
 80028ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3304      	adds	r3, #4
 80028b8:	4619      	mov	r1, r3
 80028ba:	4610      	mov	r0, r2
 80028bc:	f000 fa7e 	bl	8002dbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
	...

0800291c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b01      	cmp	r3, #1
 800292e:	d001      	beq.n	8002934 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e04e      	b.n	80029d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2202      	movs	r2, #2
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0201 	orr.w	r2, r2, #1
 800294a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a23      	ldr	r2, [pc, #140]	@ (80029e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d022      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x80>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800295e:	d01d      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x80>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1f      	ldr	r2, [pc, #124]	@ (80029e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d018      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x80>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a1e      	ldr	r2, [pc, #120]	@ (80029e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d013      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x80>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a1c      	ldr	r2, [pc, #112]	@ (80029ec <HAL_TIM_Base_Start_IT+0xd0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00e      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x80>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a1b      	ldr	r2, [pc, #108]	@ (80029f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d009      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x80>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a19      	ldr	r2, [pc, #100]	@ (80029f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d004      	beq.n	800299c <HAL_TIM_Base_Start_IT+0x80>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a18      	ldr	r2, [pc, #96]	@ (80029f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d111      	bne.n	80029c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b06      	cmp	r3, #6
 80029ac:	d010      	beq.n	80029d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f042 0201 	orr.w	r2, r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029be:	e007      	b.n	80029d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40010000 	.word	0x40010000
 80029e4:	40000400 	.word	0x40000400
 80029e8:	40000800 	.word	0x40000800
 80029ec:	40000c00 	.word	0x40000c00
 80029f0:	40010400 	.word	0x40010400
 80029f4:	40014000 	.word	0x40014000
 80029f8:	40001800 	.word	0x40001800

080029fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d020      	beq.n	8002a60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d01b      	beq.n	8002a60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f06f 0202 	mvn.w	r2, #2
 8002a30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d003      	beq.n	8002a4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f999 	bl	8002d7e <HAL_TIM_IC_CaptureCallback>
 8002a4c:	e005      	b.n	8002a5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f98b 	bl	8002d6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f99c 	bl	8002d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d020      	beq.n	8002aac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01b      	beq.n	8002aac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0204 	mvn.w	r2, #4
 8002a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2202      	movs	r2, #2
 8002a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f973 	bl	8002d7e <HAL_TIM_IC_CaptureCallback>
 8002a98:	e005      	b.n	8002aa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f965 	bl	8002d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 f976 	bl	8002d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d020      	beq.n	8002af8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d01b      	beq.n	8002af8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f06f 0208 	mvn.w	r2, #8
 8002ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2204      	movs	r2, #4
 8002ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 f94d 	bl	8002d7e <HAL_TIM_IC_CaptureCallback>
 8002ae4:	e005      	b.n	8002af2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f93f 	bl	8002d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 f950 	bl	8002d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d020      	beq.n	8002b44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d01b      	beq.n	8002b44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0210 	mvn.w	r2, #16
 8002b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2208      	movs	r2, #8
 8002b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f927 	bl	8002d7e <HAL_TIM_IC_CaptureCallback>
 8002b30:	e005      	b.n	8002b3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f919 	bl	8002d6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f92a 	bl	8002d92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00c      	beq.n	8002b68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f003 0301 	and.w	r3, r3, #1
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d007      	beq.n	8002b68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f06f 0201 	mvn.w	r2, #1
 8002b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f7fd ff70 	bl	8000a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00c      	beq.n	8002b8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d007      	beq.n	8002b8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fae4 	bl	8003154 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00c      	beq.n	8002bb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d007      	beq.n	8002bb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f8fb 	bl	8002da6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f003 0320 	and.w	r3, r3, #32
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00c      	beq.n	8002bd4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f003 0320 	and.w	r3, r3, #32
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d007      	beq.n	8002bd4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0220 	mvn.w	r2, #32
 8002bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 fab6 	bl	8003140 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_TIM_ConfigClockSource+0x1c>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e0b4      	b.n	8002d62 <HAL_TIM_ConfigClockSource+0x186>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c30:	d03e      	beq.n	8002cb0 <HAL_TIM_ConfigClockSource+0xd4>
 8002c32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c36:	f200 8087 	bhi.w	8002d48 <HAL_TIM_ConfigClockSource+0x16c>
 8002c3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c3e:	f000 8086 	beq.w	8002d4e <HAL_TIM_ConfigClockSource+0x172>
 8002c42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c46:	d87f      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x16c>
 8002c48:	2b70      	cmp	r3, #112	@ 0x70
 8002c4a:	d01a      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0xa6>
 8002c4c:	2b70      	cmp	r3, #112	@ 0x70
 8002c4e:	d87b      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x16c>
 8002c50:	2b60      	cmp	r3, #96	@ 0x60
 8002c52:	d050      	beq.n	8002cf6 <HAL_TIM_ConfigClockSource+0x11a>
 8002c54:	2b60      	cmp	r3, #96	@ 0x60
 8002c56:	d877      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x16c>
 8002c58:	2b50      	cmp	r3, #80	@ 0x50
 8002c5a:	d03c      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0xfa>
 8002c5c:	2b50      	cmp	r3, #80	@ 0x50
 8002c5e:	d873      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x16c>
 8002c60:	2b40      	cmp	r3, #64	@ 0x40
 8002c62:	d058      	beq.n	8002d16 <HAL_TIM_ConfigClockSource+0x13a>
 8002c64:	2b40      	cmp	r3, #64	@ 0x40
 8002c66:	d86f      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x16c>
 8002c68:	2b30      	cmp	r3, #48	@ 0x30
 8002c6a:	d064      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x15a>
 8002c6c:	2b30      	cmp	r3, #48	@ 0x30
 8002c6e:	d86b      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x16c>
 8002c70:	2b20      	cmp	r3, #32
 8002c72:	d060      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x15a>
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d867      	bhi.n	8002d48 <HAL_TIM_ConfigClockSource+0x16c>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d05c      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x15a>
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d05a      	beq.n	8002d36 <HAL_TIM_ConfigClockSource+0x15a>
 8002c80:	e062      	b.n	8002d48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c92:	f000 f9b9 	bl	8003008 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ca4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	609a      	str	r2, [r3, #8]
      break;
 8002cae:	e04f      	b.n	8002d50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cc0:	f000 f9a2 	bl	8003008 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cd2:	609a      	str	r2, [r3, #8]
      break;
 8002cd4:	e03c      	b.n	8002d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	f000 f916 	bl	8002f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2150      	movs	r1, #80	@ 0x50
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f000 f96f 	bl	8002fd2 <TIM_ITRx_SetConfig>
      break;
 8002cf4:	e02c      	b.n	8002d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d02:	461a      	mov	r2, r3
 8002d04:	f000 f935 	bl	8002f72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2160      	movs	r1, #96	@ 0x60
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 f95f 	bl	8002fd2 <TIM_ITRx_SetConfig>
      break;
 8002d14:	e01c      	b.n	8002d50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d22:	461a      	mov	r2, r3
 8002d24:	f000 f8f6 	bl	8002f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2140      	movs	r1, #64	@ 0x40
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f000 f94f 	bl	8002fd2 <TIM_ITRx_SetConfig>
      break;
 8002d34:	e00c      	b.n	8002d50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4610      	mov	r0, r2
 8002d42:	f000 f946 	bl	8002fd2 <TIM_ITRx_SetConfig>
      break;
 8002d46:	e003      	b.n	8002d50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d4c:	e000      	b.n	8002d50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a46      	ldr	r2, [pc, #280]	@ (8002ee8 <TIM_Base_SetConfig+0x12c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d013      	beq.n	8002dfc <TIM_Base_SetConfig+0x40>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dda:	d00f      	beq.n	8002dfc <TIM_Base_SetConfig+0x40>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a43      	ldr	r2, [pc, #268]	@ (8002eec <TIM_Base_SetConfig+0x130>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d00b      	beq.n	8002dfc <TIM_Base_SetConfig+0x40>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a42      	ldr	r2, [pc, #264]	@ (8002ef0 <TIM_Base_SetConfig+0x134>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d007      	beq.n	8002dfc <TIM_Base_SetConfig+0x40>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a41      	ldr	r2, [pc, #260]	@ (8002ef4 <TIM_Base_SetConfig+0x138>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d003      	beq.n	8002dfc <TIM_Base_SetConfig+0x40>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a40      	ldr	r2, [pc, #256]	@ (8002ef8 <TIM_Base_SetConfig+0x13c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d108      	bne.n	8002e0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a35      	ldr	r2, [pc, #212]	@ (8002ee8 <TIM_Base_SetConfig+0x12c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d02b      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e1c:	d027      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a32      	ldr	r2, [pc, #200]	@ (8002eec <TIM_Base_SetConfig+0x130>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d023      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a31      	ldr	r2, [pc, #196]	@ (8002ef0 <TIM_Base_SetConfig+0x134>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d01f      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a30      	ldr	r2, [pc, #192]	@ (8002ef4 <TIM_Base_SetConfig+0x138>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d01b      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a2f      	ldr	r2, [pc, #188]	@ (8002ef8 <TIM_Base_SetConfig+0x13c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d017      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a2e      	ldr	r2, [pc, #184]	@ (8002efc <TIM_Base_SetConfig+0x140>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d013      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a2d      	ldr	r2, [pc, #180]	@ (8002f00 <TIM_Base_SetConfig+0x144>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00f      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a2c      	ldr	r2, [pc, #176]	@ (8002f04 <TIM_Base_SetConfig+0x148>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d00b      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a2b      	ldr	r2, [pc, #172]	@ (8002f08 <TIM_Base_SetConfig+0x14c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d007      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a2a      	ldr	r2, [pc, #168]	@ (8002f0c <TIM_Base_SetConfig+0x150>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d003      	beq.n	8002e6e <TIM_Base_SetConfig+0xb2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a29      	ldr	r2, [pc, #164]	@ (8002f10 <TIM_Base_SetConfig+0x154>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d108      	bne.n	8002e80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a10      	ldr	r2, [pc, #64]	@ (8002ee8 <TIM_Base_SetConfig+0x12c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d003      	beq.n	8002eb4 <TIM_Base_SetConfig+0xf8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a12      	ldr	r2, [pc, #72]	@ (8002ef8 <TIM_Base_SetConfig+0x13c>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d103      	bne.n	8002ebc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d105      	bne.n	8002eda <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	f023 0201 	bic.w	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	611a      	str	r2, [r3, #16]
  }
}
 8002eda:	bf00      	nop
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40010000 	.word	0x40010000
 8002eec:	40000400 	.word	0x40000400
 8002ef0:	40000800 	.word	0x40000800
 8002ef4:	40000c00 	.word	0x40000c00
 8002ef8:	40010400 	.word	0x40010400
 8002efc:	40014000 	.word	0x40014000
 8002f00:	40014400 	.word	0x40014400
 8002f04:	40014800 	.word	0x40014800
 8002f08:	40001800 	.word	0x40001800
 8002f0c:	40001c00 	.word	0x40001c00
 8002f10:	40002000 	.word	0x40002000

08002f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	f023 0201 	bic.w	r2, r3, #1
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f023 030a 	bic.w	r3, r3, #10
 8002f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	621a      	str	r2, [r3, #32]
}
 8002f66:	bf00      	nop
 8002f68:	371c      	adds	r7, #28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b087      	sub	sp, #28
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f023 0210 	bic.w	r2, r3, #16
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002f9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	031b      	lsls	r3, r3, #12
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002fae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	621a      	str	r2, [r3, #32]
}
 8002fc6:	bf00      	nop
 8002fc8:	371c      	adds	r7, #28
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b085      	sub	sp, #20
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f043 0307 	orr.w	r3, r3, #7
 8002ff4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	609a      	str	r2, [r3, #8]
}
 8002ffc:	bf00      	nop
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003008:	b480      	push	{r7}
 800300a:	b087      	sub	sp, #28
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003022:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	021a      	lsls	r2, r3, #8
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	431a      	orrs	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	4313      	orrs	r3, r2
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	4313      	orrs	r3, r2
 8003034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	609a      	str	r2, [r3, #8]
}
 800303c:	bf00      	nop
 800303e:	371c      	adds	r7, #28
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800305c:	2302      	movs	r3, #2
 800305e:	e05a      	b.n	8003116 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a21      	ldr	r2, [pc, #132]	@ (8003124 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d022      	beq.n	80030ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ac:	d01d      	beq.n	80030ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003128 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d018      	beq.n	80030ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a1b      	ldr	r2, [pc, #108]	@ (800312c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d013      	beq.n	80030ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003130 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00e      	beq.n	80030ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a18      	ldr	r2, [pc, #96]	@ (8003134 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d009      	beq.n	80030ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a17      	ldr	r2, [pc, #92]	@ (8003138 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d004      	beq.n	80030ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a15      	ldr	r2, [pc, #84]	@ (800313c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d10c      	bne.n	8003104 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40010000 	.word	0x40010000
 8003128:	40000400 	.word	0x40000400
 800312c:	40000800 	.word	0x40000800
 8003130:	40000c00 	.word	0x40000c00
 8003134:	40010400 	.word	0x40010400
 8003138:	40014000 	.word	0x40014000
 800313c:	40001800 	.word	0x40001800

08003140 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e042      	b.n	8003200 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d106      	bne.n	8003194 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fd fd96 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2224      	movs	r2, #36	@ 0x24
 8003198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68da      	ldr	r2, [r3, #12]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80031aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f82b 	bl	8003208 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691a      	ldr	r2, [r3, #16]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	695a      	ldr	r2, [r3, #20]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80031e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800320c:	b0c0      	sub	sp, #256	@ 0x100
 800320e:	af00      	add	r7, sp, #0
 8003210:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003224:	68d9      	ldr	r1, [r3, #12]
 8003226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	ea40 0301 	orr.w	r3, r0, r1
 8003230:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	431a      	orrs	r2, r3
 8003240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	431a      	orrs	r2, r3
 8003248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003260:	f021 010c 	bic.w	r1, r1, #12
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800326e:	430b      	orrs	r3, r1
 8003270:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800327e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003282:	6999      	ldr	r1, [r3, #24]
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	ea40 0301 	orr.w	r3, r0, r1
 800328e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	4b8f      	ldr	r3, [pc, #572]	@ (80034d4 <UART_SetConfig+0x2cc>)
 8003298:	429a      	cmp	r2, r3
 800329a:	d005      	beq.n	80032a8 <UART_SetConfig+0xa0>
 800329c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	4b8d      	ldr	r3, [pc, #564]	@ (80034d8 <UART_SetConfig+0x2d0>)
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d104      	bne.n	80032b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032a8:	f7ff faa2 	bl	80027f0 <HAL_RCC_GetPCLK2Freq>
 80032ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80032b0:	e003      	b.n	80032ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032b2:	f7ff fa89 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 80032b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032c4:	f040 810c 	bne.w	80034e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032cc:	2200      	movs	r2, #0
 80032ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80032d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80032d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80032da:	4622      	mov	r2, r4
 80032dc:	462b      	mov	r3, r5
 80032de:	1891      	adds	r1, r2, r2
 80032e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80032e2:	415b      	adcs	r3, r3
 80032e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80032ea:	4621      	mov	r1, r4
 80032ec:	eb12 0801 	adds.w	r8, r2, r1
 80032f0:	4629      	mov	r1, r5
 80032f2:	eb43 0901 	adc.w	r9, r3, r1
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003302:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003306:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800330a:	4690      	mov	r8, r2
 800330c:	4699      	mov	r9, r3
 800330e:	4623      	mov	r3, r4
 8003310:	eb18 0303 	adds.w	r3, r8, r3
 8003314:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003318:	462b      	mov	r3, r5
 800331a:	eb49 0303 	adc.w	r3, r9, r3
 800331e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800332e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003332:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003336:	460b      	mov	r3, r1
 8003338:	18db      	adds	r3, r3, r3
 800333a:	653b      	str	r3, [r7, #80]	@ 0x50
 800333c:	4613      	mov	r3, r2
 800333e:	eb42 0303 	adc.w	r3, r2, r3
 8003342:	657b      	str	r3, [r7, #84]	@ 0x54
 8003344:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003348:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800334c:	f7fc ffa8 	bl	80002a0 <__aeabi_uldivmod>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	4b61      	ldr	r3, [pc, #388]	@ (80034dc <UART_SetConfig+0x2d4>)
 8003356:	fba3 2302 	umull	r2, r3, r3, r2
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	011c      	lsls	r4, r3, #4
 800335e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003362:	2200      	movs	r2, #0
 8003364:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003368:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800336c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003370:	4642      	mov	r2, r8
 8003372:	464b      	mov	r3, r9
 8003374:	1891      	adds	r1, r2, r2
 8003376:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003378:	415b      	adcs	r3, r3
 800337a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800337c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003380:	4641      	mov	r1, r8
 8003382:	eb12 0a01 	adds.w	sl, r2, r1
 8003386:	4649      	mov	r1, r9
 8003388:	eb43 0b01 	adc.w	fp, r3, r1
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003398:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800339c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033a0:	4692      	mov	sl, r2
 80033a2:	469b      	mov	fp, r3
 80033a4:	4643      	mov	r3, r8
 80033a6:	eb1a 0303 	adds.w	r3, sl, r3
 80033aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033ae:	464b      	mov	r3, r9
 80033b0:	eb4b 0303 	adc.w	r3, fp, r3
 80033b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80033b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80033c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80033c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80033cc:	460b      	mov	r3, r1
 80033ce:	18db      	adds	r3, r3, r3
 80033d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80033d2:	4613      	mov	r3, r2
 80033d4:	eb42 0303 	adc.w	r3, r2, r3
 80033d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80033da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80033de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80033e2:	f7fc ff5d 	bl	80002a0 <__aeabi_uldivmod>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4611      	mov	r1, r2
 80033ec:	4b3b      	ldr	r3, [pc, #236]	@ (80034dc <UART_SetConfig+0x2d4>)
 80033ee:	fba3 2301 	umull	r2, r3, r3, r1
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	2264      	movs	r2, #100	@ 0x64
 80033f6:	fb02 f303 	mul.w	r3, r2, r3
 80033fa:	1acb      	subs	r3, r1, r3
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003402:	4b36      	ldr	r3, [pc, #216]	@ (80034dc <UART_SetConfig+0x2d4>)
 8003404:	fba3 2302 	umull	r2, r3, r3, r2
 8003408:	095b      	lsrs	r3, r3, #5
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003410:	441c      	add	r4, r3
 8003412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003416:	2200      	movs	r2, #0
 8003418:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800341c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003420:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003424:	4642      	mov	r2, r8
 8003426:	464b      	mov	r3, r9
 8003428:	1891      	adds	r1, r2, r2
 800342a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800342c:	415b      	adcs	r3, r3
 800342e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003430:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003434:	4641      	mov	r1, r8
 8003436:	1851      	adds	r1, r2, r1
 8003438:	6339      	str	r1, [r7, #48]	@ 0x30
 800343a:	4649      	mov	r1, r9
 800343c:	414b      	adcs	r3, r1
 800343e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800344c:	4659      	mov	r1, fp
 800344e:	00cb      	lsls	r3, r1, #3
 8003450:	4651      	mov	r1, sl
 8003452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003456:	4651      	mov	r1, sl
 8003458:	00ca      	lsls	r2, r1, #3
 800345a:	4610      	mov	r0, r2
 800345c:	4619      	mov	r1, r3
 800345e:	4603      	mov	r3, r0
 8003460:	4642      	mov	r2, r8
 8003462:	189b      	adds	r3, r3, r2
 8003464:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003468:	464b      	mov	r3, r9
 800346a:	460a      	mov	r2, r1
 800346c:	eb42 0303 	adc.w	r3, r2, r3
 8003470:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003480:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003484:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003488:	460b      	mov	r3, r1
 800348a:	18db      	adds	r3, r3, r3
 800348c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800348e:	4613      	mov	r3, r2
 8003490:	eb42 0303 	adc.w	r3, r2, r3
 8003494:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003496:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800349a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800349e:	f7fc feff 	bl	80002a0 <__aeabi_uldivmod>
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4b0d      	ldr	r3, [pc, #52]	@ (80034dc <UART_SetConfig+0x2d4>)
 80034a8:	fba3 1302 	umull	r1, r3, r3, r2
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	2164      	movs	r1, #100	@ 0x64
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	3332      	adds	r3, #50	@ 0x32
 80034ba:	4a08      	ldr	r2, [pc, #32]	@ (80034dc <UART_SetConfig+0x2d4>)
 80034bc:	fba2 2303 	umull	r2, r3, r2, r3
 80034c0:	095b      	lsrs	r3, r3, #5
 80034c2:	f003 0207 	and.w	r2, r3, #7
 80034c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4422      	add	r2, r4
 80034ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034d0:	e106      	b.n	80036e0 <UART_SetConfig+0x4d8>
 80034d2:	bf00      	nop
 80034d4:	40011000 	.word	0x40011000
 80034d8:	40011400 	.word	0x40011400
 80034dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034e4:	2200      	movs	r2, #0
 80034e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80034ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80034f2:	4642      	mov	r2, r8
 80034f4:	464b      	mov	r3, r9
 80034f6:	1891      	adds	r1, r2, r2
 80034f8:	6239      	str	r1, [r7, #32]
 80034fa:	415b      	adcs	r3, r3
 80034fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80034fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003502:	4641      	mov	r1, r8
 8003504:	1854      	adds	r4, r2, r1
 8003506:	4649      	mov	r1, r9
 8003508:	eb43 0501 	adc.w	r5, r3, r1
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	00eb      	lsls	r3, r5, #3
 8003516:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800351a:	00e2      	lsls	r2, r4, #3
 800351c:	4614      	mov	r4, r2
 800351e:	461d      	mov	r5, r3
 8003520:	4643      	mov	r3, r8
 8003522:	18e3      	adds	r3, r4, r3
 8003524:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003528:	464b      	mov	r3, r9
 800352a:	eb45 0303 	adc.w	r3, r5, r3
 800352e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800353e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800354e:	4629      	mov	r1, r5
 8003550:	008b      	lsls	r3, r1, #2
 8003552:	4621      	mov	r1, r4
 8003554:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003558:	4621      	mov	r1, r4
 800355a:	008a      	lsls	r2, r1, #2
 800355c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003560:	f7fc fe9e 	bl	80002a0 <__aeabi_uldivmod>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4b60      	ldr	r3, [pc, #384]	@ (80036ec <UART_SetConfig+0x4e4>)
 800356a:	fba3 2302 	umull	r2, r3, r3, r2
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	011c      	lsls	r4, r3, #4
 8003572:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003576:	2200      	movs	r2, #0
 8003578:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800357c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003580:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003584:	4642      	mov	r2, r8
 8003586:	464b      	mov	r3, r9
 8003588:	1891      	adds	r1, r2, r2
 800358a:	61b9      	str	r1, [r7, #24]
 800358c:	415b      	adcs	r3, r3
 800358e:	61fb      	str	r3, [r7, #28]
 8003590:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003594:	4641      	mov	r1, r8
 8003596:	1851      	adds	r1, r2, r1
 8003598:	6139      	str	r1, [r7, #16]
 800359a:	4649      	mov	r1, r9
 800359c:	414b      	adcs	r3, r1
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035ac:	4659      	mov	r1, fp
 80035ae:	00cb      	lsls	r3, r1, #3
 80035b0:	4651      	mov	r1, sl
 80035b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035b6:	4651      	mov	r1, sl
 80035b8:	00ca      	lsls	r2, r1, #3
 80035ba:	4610      	mov	r0, r2
 80035bc:	4619      	mov	r1, r3
 80035be:	4603      	mov	r3, r0
 80035c0:	4642      	mov	r2, r8
 80035c2:	189b      	adds	r3, r3, r2
 80035c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80035c8:	464b      	mov	r3, r9
 80035ca:	460a      	mov	r2, r1
 80035cc:	eb42 0303 	adc.w	r3, r2, r3
 80035d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80035d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80035ec:	4649      	mov	r1, r9
 80035ee:	008b      	lsls	r3, r1, #2
 80035f0:	4641      	mov	r1, r8
 80035f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035f6:	4641      	mov	r1, r8
 80035f8:	008a      	lsls	r2, r1, #2
 80035fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80035fe:	f7fc fe4f 	bl	80002a0 <__aeabi_uldivmod>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4611      	mov	r1, r2
 8003608:	4b38      	ldr	r3, [pc, #224]	@ (80036ec <UART_SetConfig+0x4e4>)
 800360a:	fba3 2301 	umull	r2, r3, r3, r1
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	2264      	movs	r2, #100	@ 0x64
 8003612:	fb02 f303 	mul.w	r3, r2, r3
 8003616:	1acb      	subs	r3, r1, r3
 8003618:	011b      	lsls	r3, r3, #4
 800361a:	3332      	adds	r3, #50	@ 0x32
 800361c:	4a33      	ldr	r2, [pc, #204]	@ (80036ec <UART_SetConfig+0x4e4>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003628:	441c      	add	r4, r3
 800362a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800362e:	2200      	movs	r2, #0
 8003630:	673b      	str	r3, [r7, #112]	@ 0x70
 8003632:	677a      	str	r2, [r7, #116]	@ 0x74
 8003634:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003638:	4642      	mov	r2, r8
 800363a:	464b      	mov	r3, r9
 800363c:	1891      	adds	r1, r2, r2
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	415b      	adcs	r3, r3
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003648:	4641      	mov	r1, r8
 800364a:	1851      	adds	r1, r2, r1
 800364c:	6039      	str	r1, [r7, #0]
 800364e:	4649      	mov	r1, r9
 8003650:	414b      	adcs	r3, r1
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003660:	4659      	mov	r1, fp
 8003662:	00cb      	lsls	r3, r1, #3
 8003664:	4651      	mov	r1, sl
 8003666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800366a:	4651      	mov	r1, sl
 800366c:	00ca      	lsls	r2, r1, #3
 800366e:	4610      	mov	r0, r2
 8003670:	4619      	mov	r1, r3
 8003672:	4603      	mov	r3, r0
 8003674:	4642      	mov	r2, r8
 8003676:	189b      	adds	r3, r3, r2
 8003678:	66bb      	str	r3, [r7, #104]	@ 0x68
 800367a:	464b      	mov	r3, r9
 800367c:	460a      	mov	r2, r1
 800367e:	eb42 0303 	adc.w	r3, r2, r3
 8003682:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	663b      	str	r3, [r7, #96]	@ 0x60
 800368e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800369c:	4649      	mov	r1, r9
 800369e:	008b      	lsls	r3, r1, #2
 80036a0:	4641      	mov	r1, r8
 80036a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036a6:	4641      	mov	r1, r8
 80036a8:	008a      	lsls	r2, r1, #2
 80036aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80036ae:	f7fc fdf7 	bl	80002a0 <__aeabi_uldivmod>
 80036b2:	4602      	mov	r2, r0
 80036b4:	460b      	mov	r3, r1
 80036b6:	4b0d      	ldr	r3, [pc, #52]	@ (80036ec <UART_SetConfig+0x4e4>)
 80036b8:	fba3 1302 	umull	r1, r3, r3, r2
 80036bc:	095b      	lsrs	r3, r3, #5
 80036be:	2164      	movs	r1, #100	@ 0x64
 80036c0:	fb01 f303 	mul.w	r3, r1, r3
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	3332      	adds	r3, #50	@ 0x32
 80036ca:	4a08      	ldr	r2, [pc, #32]	@ (80036ec <UART_SetConfig+0x4e4>)
 80036cc:	fba2 2303 	umull	r2, r3, r2, r3
 80036d0:	095b      	lsrs	r3, r3, #5
 80036d2:	f003 020f 	and.w	r2, r3, #15
 80036d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4422      	add	r2, r4
 80036de:	609a      	str	r2, [r3, #8]
}
 80036e0:	bf00      	nop
 80036e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80036e6:	46bd      	mov	sp, r7
 80036e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ec:	51eb851f 	.word	0x51eb851f

080036f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036f0:	b084      	sub	sp, #16
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	f107 001c 	add.w	r0, r7, #28
 80036fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003702:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003706:	2b01      	cmp	r3, #1
 8003708:	d123      	bne.n	8003752 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800371e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003732:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003736:	2b01      	cmp	r3, #1
 8003738:	d105      	bne.n	8003746 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 faa0 	bl	8003c8c <USB_CoreReset>
 800374c:	4603      	mov	r3, r0
 800374e:	73fb      	strb	r3, [r7, #15]
 8003750:	e01b      	b.n	800378a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fa94 	bl	8003c8c <USB_CoreReset>
 8003764:	4603      	mov	r3, r0
 8003766:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003768:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800376c:	2b00      	cmp	r3, #0
 800376e:	d106      	bne.n	800377e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003774:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	639a      	str	r2, [r3, #56]	@ 0x38
 800377c:	e005      	b.n	800378a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003782:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800378a:	7fbb      	ldrb	r3, [r7, #30]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d10b      	bne.n	80037a8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f043 0206 	orr.w	r2, r3, #6
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f043 0220 	orr.w	r2, r3, #32
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037b4:	b004      	add	sp, #16
 80037b6:	4770      	bx	lr

080037b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f023 0201 	bic.w	r2, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b084      	sub	sp, #16
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	460b      	mov	r3, r1
 80037e4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037f6:	78fb      	ldrb	r3, [r7, #3]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d115      	bne.n	8003828 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003808:	200a      	movs	r0, #10
 800380a:	f7fd fc53 	bl	80010b4 <HAL_Delay>
      ms += 10U;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	330a      	adds	r3, #10
 8003812:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fa2b 	bl	8003c70 <USB_GetMode>
 800381a:	4603      	mov	r3, r0
 800381c:	2b01      	cmp	r3, #1
 800381e:	d01e      	beq.n	800385e <USB_SetCurrentMode+0x84>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2bc7      	cmp	r3, #199	@ 0xc7
 8003824:	d9f0      	bls.n	8003808 <USB_SetCurrentMode+0x2e>
 8003826:	e01a      	b.n	800385e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d115      	bne.n	800385a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800383a:	200a      	movs	r0, #10
 800383c:	f7fd fc3a 	bl	80010b4 <HAL_Delay>
      ms += 10U;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	330a      	adds	r3, #10
 8003844:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 fa12 	bl	8003c70 <USB_GetMode>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d005      	beq.n	800385e <USB_SetCurrentMode+0x84>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2bc7      	cmp	r3, #199	@ 0xc7
 8003856:	d9f0      	bls.n	800383a <USB_SetCurrentMode+0x60>
 8003858:	e001      	b.n	800385e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e005      	b.n	800386a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2bc8      	cmp	r3, #200	@ 0xc8
 8003862:	d101      	bne.n	8003868 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e000      	b.n	800386a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003874:	b084      	sub	sp, #16
 8003876:	b580      	push	{r7, lr}
 8003878:	b086      	sub	sp, #24
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800388e:	2300      	movs	r3, #0
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	e009      	b.n	80038a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	3340      	adds	r3, #64	@ 0x40
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	2200      	movs	r2, #0
 80038a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	3301      	adds	r3, #1
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	2b0e      	cmp	r3, #14
 80038ac:	d9f2      	bls.n	8003894 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d11c      	bne.n	80038f0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038c4:	f043 0302 	orr.w	r3, r3, #2
 80038c8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038da:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80038ee:	e00b      	b.n	8003908 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003900:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800390e:	461a      	mov	r2, r3
 8003910:	2300      	movs	r3, #0
 8003912:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003914:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003918:	2b01      	cmp	r3, #1
 800391a:	d10d      	bne.n	8003938 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800391c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003920:	2b00      	cmp	r3, #0
 8003922:	d104      	bne.n	800392e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003924:	2100      	movs	r1, #0
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f968 	bl	8003bfc <USB_SetDevSpeed>
 800392c:	e008      	b.n	8003940 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800392e:	2101      	movs	r1, #1
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f963 	bl	8003bfc <USB_SetDevSpeed>
 8003936:	e003      	b.n	8003940 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003938:	2103      	movs	r1, #3
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f95e 	bl	8003bfc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003940:	2110      	movs	r1, #16
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 f8fa 	bl	8003b3c <USB_FlushTxFifo>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f924 	bl	8003ba0 <USB_FlushRxFifo>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003968:	461a      	mov	r2, r3
 800396a:	2300      	movs	r3, #0
 800396c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003974:	461a      	mov	r2, r3
 8003976:	2300      	movs	r3, #0
 8003978:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003980:	461a      	mov	r2, r3
 8003982:	2300      	movs	r3, #0
 8003984:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003986:	2300      	movs	r3, #0
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	e043      	b.n	8003a14 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	015a      	lsls	r2, r3, #5
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800399e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039a2:	d118      	bne.n	80039d6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10a      	bne.n	80039c0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039b6:	461a      	mov	r2, r3
 80039b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	e013      	b.n	80039e8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	015a      	lsls	r2, r3, #5
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	4413      	add	r3, r2
 80039c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039cc:	461a      	mov	r2, r3
 80039ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	e008      	b.n	80039e8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039e2:	461a      	mov	r2, r3
 80039e4:	2300      	movs	r3, #0
 80039e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039f4:	461a      	mov	r2, r3
 80039f6:	2300      	movs	r3, #0
 80039f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a06:	461a      	mov	r2, r3
 8003a08:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	3301      	adds	r3, #1
 8003a12:	613b      	str	r3, [r7, #16]
 8003a14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003a18:	461a      	mov	r2, r3
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d3b5      	bcc.n	800398c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a20:	2300      	movs	r3, #0
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	e043      	b.n	8003aae <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a3c:	d118      	bne.n	8003a70 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10a      	bne.n	8003a5a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a50:	461a      	mov	r2, r3
 8003a52:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	e013      	b.n	8003a82 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a66:	461a      	mov	r2, r3
 8003a68:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a6c:	6013      	str	r3, [r2, #0]
 8003a6e:	e008      	b.n	8003a82 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	2300      	movs	r3, #0
 8003a80:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a8e:	461a      	mov	r2, r3
 8003a90:	2300      	movs	r3, #0
 8003a92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003aa6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d3b5      	bcc.n	8003a26 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ac8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003acc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003ada:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003adc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d105      	bne.n	8003af0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	f043 0210 	orr.w	r2, r3, #16
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699a      	ldr	r2, [r3, #24]
 8003af4:	4b10      	ldr	r3, [pc, #64]	@ (8003b38 <USB_DevInit+0x2c4>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003afc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	f043 0208 	orr.w	r2, r3, #8
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b10:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d107      	bne.n	8003b28 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b20:	f043 0304 	orr.w	r3, r3, #4
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b34:	b004      	add	sp, #16
 8003b36:	4770      	bx	lr
 8003b38:	803c3800 	.word	0x803c3800

08003b3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b56:	d901      	bls.n	8003b5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e01b      	b.n	8003b94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	daf2      	bge.n	8003b4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	019b      	lsls	r3, r3, #6
 8003b6c:	f043 0220 	orr.w	r2, r3, #32
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	3301      	adds	r3, #1
 8003b78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b80:	d901      	bls.n	8003b86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e006      	b.n	8003b94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b20      	cmp	r3, #32
 8003b90:	d0f0      	beq.n	8003b74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3714      	adds	r7, #20
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bb8:	d901      	bls.n	8003bbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e018      	b.n	8003bf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	daf2      	bge.n	8003bac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2210      	movs	r2, #16
 8003bce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bdc:	d901      	bls.n	8003be2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e006      	b.n	8003bf0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	2b10      	cmp	r3, #16
 8003bec:	d0f0      	beq.n	8003bd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	68f9      	ldr	r1, [r7, #12]
 8003c18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b085      	sub	sp, #20
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003c48:	f023 0303 	bic.w	r3, r3, #3
 8003c4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c5c:	f043 0302 	orr.w	r3, r3, #2
 8003c60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3714      	adds	r7, #20
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ca4:	d901      	bls.n	8003caa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e01b      	b.n	8003ce2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	daf2      	bge.n	8003c98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	f043 0201 	orr.w	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003cce:	d901      	bls.n	8003cd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e006      	b.n	8003ce2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d0f0      	beq.n	8003cc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003cf2:	f000 fe73 	bl	80049dc <vTaskStartScheduler>
  
  return osOK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f103 0208 	add.w	r2, r3, #8
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f04f 32ff 	mov.w	r2, #4294967295
 8003d14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f103 0208 	add.w	r2, r3, #8
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f103 0208 	add.w	r2, r3, #8
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d56:	b480      	push	{r7}
 8003d58:	b085      	sub	sp, #20
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
 8003d5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	601a      	str	r2, [r3, #0]
}
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b085      	sub	sp, #20
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
 8003da6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d103      	bne.n	8003dbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e00c      	b.n	8003dd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	e002      	b.n	8003dcc <vListInsert+0x2e>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d2f6      	bcs.n	8003dc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	601a      	str	r2, [r3, #0]
}
 8003e04:	bf00      	nop
 8003e06:	3714      	adds	r7, #20
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6892      	ldr	r2, [r2, #8]
 8003e26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6852      	ldr	r2, [r2, #4]
 8003e30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d103      	bne.n	8003e44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	1e5a      	subs	r2, r3, #1
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3714      	adds	r7, #20
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10b      	bne.n	8003e90 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7c:	f383 8811 	msr	BASEPRI, r3
 8003e80:	f3bf 8f6f 	isb	sy
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e8a:	bf00      	nop
 8003e8c:	bf00      	nop
 8003e8e:	e7fd      	b.n	8003e8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003e90:	f001 fd22 	bl	80058d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e9c:	68f9      	ldr	r1, [r7, #12]
 8003e9e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	441a      	add	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	68f9      	ldr	r1, [r7, #12]
 8003ec4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ec6:	fb01 f303 	mul.w	r3, r1, r3
 8003eca:	441a      	add	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	22ff      	movs	r2, #255	@ 0xff
 8003ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	22ff      	movs	r2, #255	@ 0xff
 8003edc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d114      	bne.n	8003f10 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d01a      	beq.n	8003f24 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	3310      	adds	r3, #16
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 ffda 	bl	8004eac <xTaskRemoveFromEventList>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d012      	beq.n	8003f24 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003efe:	4b0d      	ldr	r3, [pc, #52]	@ (8003f34 <xQueueGenericReset+0xd0>)
 8003f00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	f3bf 8f4f 	dsb	sy
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	e009      	b.n	8003f24 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	3310      	adds	r3, #16
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff fef1 	bl	8003cfc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	3324      	adds	r3, #36	@ 0x24
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff feec 	bl	8003cfc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f24:	f001 fd0a 	bl	800593c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f28:	2301      	movs	r3, #1
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	e000ed04 	.word	0xe000ed04

08003f38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08a      	sub	sp, #40	@ 0x28
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	4613      	mov	r3, r2
 8003f44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10b      	bne.n	8003f64 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	613b      	str	r3, [r7, #16]
}
 8003f5e:	bf00      	nop
 8003f60:	bf00      	nop
 8003f62:	e7fd      	b.n	8003f60 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	fb02 f303 	mul.w	r3, r2, r3
 8003f6c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	3350      	adds	r3, #80	@ 0x50
 8003f72:	4618      	mov	r0, r3
 8003f74:	f001 fd90 	bl	8005a98 <pvPortMalloc>
 8003f78:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d011      	beq.n	8003fa4 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	3350      	adds	r3, #80	@ 0x50
 8003f88:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f92:	79fa      	ldrb	r2, [r7, #7]
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	68b9      	ldr	r1, [r7, #8]
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 f805 	bl	8003fae <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003fa4:	69bb      	ldr	r3, [r7, #24]
	}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3720      	adds	r7, #32
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	607a      	str	r2, [r7, #4]
 8003fba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d103      	bne.n	8003fca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	e002      	b.n	8003fd0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fdc:	2101      	movs	r1, #1
 8003fde:	69b8      	ldr	r0, [r7, #24]
 8003fe0:	f7ff ff40 	bl	8003e64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	78fa      	ldrb	r2, [r7, #3]
 8003fe8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003fec:	bf00      	nop
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08e      	sub	sp, #56	@ 0x38
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004002:	2300      	movs	r3, #0
 8004004:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800400a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10b      	bne.n	8004028 <xQueueGenericSend+0x34>
	__asm volatile
 8004010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004014:	f383 8811 	msr	BASEPRI, r3
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004022:	bf00      	nop
 8004024:	bf00      	nop
 8004026:	e7fd      	b.n	8004024 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d103      	bne.n	8004036 <xQueueGenericSend+0x42>
 800402e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <xQueueGenericSend+0x46>
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <xQueueGenericSend+0x48>
 800403a:	2300      	movs	r3, #0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d10b      	bne.n	8004058 <xQueueGenericSend+0x64>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	e7fd      	b.n	8004054 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d103      	bne.n	8004066 <xQueueGenericSend+0x72>
 800405e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <xQueueGenericSend+0x76>
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <xQueueGenericSend+0x78>
 800406a:	2300      	movs	r3, #0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10b      	bne.n	8004088 <xQueueGenericSend+0x94>
	__asm volatile
 8004070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004074:	f383 8811 	msr	BASEPRI, r3
 8004078:	f3bf 8f6f 	isb	sy
 800407c:	f3bf 8f4f 	dsb	sy
 8004080:	623b      	str	r3, [r7, #32]
}
 8004082:	bf00      	nop
 8004084:	bf00      	nop
 8004086:	e7fd      	b.n	8004084 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004088:	f001 f8d0 	bl	800522c <xTaskGetSchedulerState>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d102      	bne.n	8004098 <xQueueGenericSend+0xa4>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <xQueueGenericSend+0xa8>
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <xQueueGenericSend+0xaa>
 800409c:	2300      	movs	r3, #0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10b      	bne.n	80040ba <xQueueGenericSend+0xc6>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	61fb      	str	r3, [r7, #28]
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	e7fd      	b.n	80040b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040ba:	f001 fc0d 	bl	80058d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d302      	bcc.n	80040d0 <xQueueGenericSend+0xdc>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d129      	bne.n	8004124 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	68b9      	ldr	r1, [r7, #8]
 80040d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040d6:	f000 f9b7 	bl	8004448 <prvCopyDataToQueue>
 80040da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d010      	beq.n	8004106 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e6:	3324      	adds	r3, #36	@ 0x24
 80040e8:	4618      	mov	r0, r3
 80040ea:	f000 fedf 	bl	8004eac <xTaskRemoveFromEventList>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d013      	beq.n	800411c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80040f4:	4b3f      	ldr	r3, [pc, #252]	@ (80041f4 <xQueueGenericSend+0x200>)
 80040f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	f3bf 8f6f 	isb	sy
 8004104:	e00a      	b.n	800411c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004108:	2b00      	cmp	r3, #0
 800410a:	d007      	beq.n	800411c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800410c:	4b39      	ldr	r3, [pc, #228]	@ (80041f4 <xQueueGenericSend+0x200>)
 800410e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800411c:	f001 fc0e 	bl	800593c <vPortExitCritical>
				return pdPASS;
 8004120:	2301      	movs	r3, #1
 8004122:	e063      	b.n	80041ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d103      	bne.n	8004132 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800412a:	f001 fc07 	bl	800593c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800412e:	2300      	movs	r3, #0
 8004130:	e05c      	b.n	80041ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004134:	2b00      	cmp	r3, #0
 8004136:	d106      	bne.n	8004146 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004138:	f107 0314 	add.w	r3, r7, #20
 800413c:	4618      	mov	r0, r3
 800413e:	f000 ff19 	bl	8004f74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004142:	2301      	movs	r3, #1
 8004144:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004146:	f001 fbf9 	bl	800593c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800414a:	f000 fcab 	bl	8004aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800414e:	f001 fbc3 	bl	80058d8 <vPortEnterCritical>
 8004152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004154:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004158:	b25b      	sxtb	r3, r3
 800415a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415e:	d103      	bne.n	8004168 <xQueueGenericSend+0x174>
 8004160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004162:	2200      	movs	r2, #0
 8004164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800416e:	b25b      	sxtb	r3, r3
 8004170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004174:	d103      	bne.n	800417e <xQueueGenericSend+0x18a>
 8004176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800417e:	f001 fbdd 	bl	800593c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004182:	1d3a      	adds	r2, r7, #4
 8004184:	f107 0314 	add.w	r3, r7, #20
 8004188:	4611      	mov	r1, r2
 800418a:	4618      	mov	r0, r3
 800418c:	f000 ff08 	bl	8004fa0 <xTaskCheckForTimeOut>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d124      	bne.n	80041e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004196:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004198:	f000 fa28 	bl	80045ec <prvIsQueueFull>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d018      	beq.n	80041d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a4:	3310      	adds	r3, #16
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	4611      	mov	r1, r2
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fe58 	bl	8004e60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041b2:	f000 f9b3 	bl	800451c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041b6:	f000 fc83 	bl	8004ac0 <xTaskResumeAll>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f47f af7c 	bne.w	80040ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80041c2:	4b0c      	ldr	r3, [pc, #48]	@ (80041f4 <xQueueGenericSend+0x200>)
 80041c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	e772      	b.n	80040ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80041d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041d6:	f000 f9a1 	bl	800451c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041da:	f000 fc71 	bl	8004ac0 <xTaskResumeAll>
 80041de:	e76c      	b.n	80040ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80041e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80041e2:	f000 f99b 	bl	800451c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041e6:	f000 fc6b 	bl	8004ac0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80041ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3738      	adds	r7, #56	@ 0x38
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	e000ed04 	.word	0xe000ed04

080041f8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08e      	sub	sp, #56	@ 0x38
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004202:	2300      	movs	r3, #0
 8004204:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800420a:	2300      	movs	r3, #0
 800420c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800420e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10b      	bne.n	800422c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	623b      	str	r3, [r7, #32]
}
 8004226:	bf00      	nop
 8004228:	bf00      	nop
 800422a:	e7fd      	b.n	8004228 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800422c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800422e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00b      	beq.n	800424c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	61fb      	str	r3, [r7, #28]
}
 8004246:	bf00      	nop
 8004248:	bf00      	nop
 800424a:	e7fd      	b.n	8004248 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800424c:	f000 ffee 	bl	800522c <xTaskGetSchedulerState>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d102      	bne.n	800425c <xQueueSemaphoreTake+0x64>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <xQueueSemaphoreTake+0x68>
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <xQueueSemaphoreTake+0x6a>
 8004260:	2300      	movs	r3, #0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10b      	bne.n	800427e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	61bb      	str	r3, [r7, #24]
}
 8004278:	bf00      	nop
 800427a:	bf00      	nop
 800427c:	e7fd      	b.n	800427a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800427e:	f001 fb2b 	bl	80058d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004286:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800428a:	2b00      	cmp	r3, #0
 800428c:	d024      	beq.n	80042d8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800428e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004290:	1e5a      	subs	r2, r3, #1
 8004292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004294:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d104      	bne.n	80042a8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800429e:	f001 f971 	bl	8005584 <pvTaskIncrementMutexHeldCount>
 80042a2:	4602      	mov	r2, r0
 80042a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00f      	beq.n	80042d0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042b2:	3310      	adds	r3, #16
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fdf9 	bl	8004eac <xTaskRemoveFromEventList>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d007      	beq.n	80042d0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042c0:	4b54      	ldr	r3, [pc, #336]	@ (8004414 <xQueueSemaphoreTake+0x21c>)
 80042c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042c6:	601a      	str	r2, [r3, #0]
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042d0:	f001 fb34 	bl	800593c <vPortExitCritical>
				return pdPASS;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e098      	b.n	800440a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d112      	bne.n	8004304 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80042de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00b      	beq.n	80042fc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80042e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e8:	f383 8811 	msr	BASEPRI, r3
 80042ec:	f3bf 8f6f 	isb	sy
 80042f0:	f3bf 8f4f 	dsb	sy
 80042f4:	617b      	str	r3, [r7, #20]
}
 80042f6:	bf00      	nop
 80042f8:	bf00      	nop
 80042fa:	e7fd      	b.n	80042f8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80042fc:	f001 fb1e 	bl	800593c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004300:	2300      	movs	r3, #0
 8004302:	e082      	b.n	800440a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800430a:	f107 030c 	add.w	r3, r7, #12
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fe30 	bl	8004f74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004314:	2301      	movs	r3, #1
 8004316:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004318:	f001 fb10 	bl	800593c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800431c:	f000 fbc2 	bl	8004aa4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004320:	f001 fada 	bl	80058d8 <vPortEnterCritical>
 8004324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004326:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800432a:	b25b      	sxtb	r3, r3
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d103      	bne.n	800433a <xQueueSemaphoreTake+0x142>
 8004332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800433a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800433c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004340:	b25b      	sxtb	r3, r3
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	d103      	bne.n	8004350 <xQueueSemaphoreTake+0x158>
 8004348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004350:	f001 faf4 	bl	800593c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004354:	463a      	mov	r2, r7
 8004356:	f107 030c 	add.w	r3, r7, #12
 800435a:	4611      	mov	r1, r2
 800435c:	4618      	mov	r0, r3
 800435e:	f000 fe1f 	bl	8004fa0 <xTaskCheckForTimeOut>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d132      	bne.n	80043ce <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004368:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800436a:	f000 f929 	bl	80045c0 <prvIsQueueEmpty>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d026      	beq.n	80043c2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d109      	bne.n	8004390 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800437c:	f001 faac 	bl	80058d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	4618      	mov	r0, r3
 8004386:	f000 ff6f 	bl	8005268 <xTaskPriorityInherit>
 800438a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800438c:	f001 fad6 	bl	800593c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004392:	3324      	adds	r3, #36	@ 0x24
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	4611      	mov	r1, r2
 8004398:	4618      	mov	r0, r3
 800439a:	f000 fd61 	bl	8004e60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800439e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043a0:	f000 f8bc 	bl	800451c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043a4:	f000 fb8c 	bl	8004ac0 <xTaskResumeAll>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f47f af67 	bne.w	800427e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80043b0:	4b18      	ldr	r3, [pc, #96]	@ (8004414 <xQueueSemaphoreTake+0x21c>)
 80043b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	f3bf 8f6f 	isb	sy
 80043c0:	e75d      	b.n	800427e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80043c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043c4:	f000 f8aa 	bl	800451c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043c8:	f000 fb7a 	bl	8004ac0 <xTaskResumeAll>
 80043cc:	e757      	b.n	800427e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80043ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043d0:	f000 f8a4 	bl	800451c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043d4:	f000 fb74 	bl	8004ac0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043da:	f000 f8f1 	bl	80045c0 <prvIsQueueEmpty>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f43f af4c 	beq.w	800427e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80043e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00d      	beq.n	8004408 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80043ec:	f001 fa74 	bl	80058d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80043f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80043f2:	f000 f811 	bl	8004418 <prvGetDisinheritPriorityAfterTimeout>
 80043f6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80043f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043fe:	4618      	mov	r0, r3
 8004400:	f001 f830 	bl	8005464 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004404:	f001 fa9a 	bl	800593c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004408:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800440a:	4618      	mov	r0, r3
 800440c:	3738      	adds	r7, #56	@ 0x38
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	e000ed04 	.word	0xe000ed04

08004418 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004424:	2b00      	cmp	r3, #0
 8004426:	d006      	beq.n	8004436 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f1c3 0307 	rsb	r3, r3, #7
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	e001      	b.n	800443a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004436:	2300      	movs	r3, #0
 8004438:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800443a:	68fb      	ldr	r3, [r7, #12]
	}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10d      	bne.n	8004482 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d14d      	bne.n	800450a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	4618      	mov	r0, r3
 8004474:	f000 ff6e 	bl	8005354 <xTaskPriorityDisinherit>
 8004478:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	609a      	str	r2, [r3, #8]
 8004480:	e043      	b.n	800450a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d119      	bne.n	80044bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6858      	ldr	r0, [r3, #4]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004490:	461a      	mov	r2, r3
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	f002 fdff 	bl	8007096 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a0:	441a      	add	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d32b      	bcc.n	800450a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	605a      	str	r2, [r3, #4]
 80044ba:	e026      	b.n	800450a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	68d8      	ldr	r0, [r3, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c4:	461a      	mov	r2, r3
 80044c6:	68b9      	ldr	r1, [r7, #8]
 80044c8:	f002 fde5 	bl	8007096 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d4:	425b      	negs	r3, r3
 80044d6:	441a      	add	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d207      	bcs.n	80044f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f0:	425b      	negs	r3, r3
 80044f2:	441a      	add	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d105      	bne.n	800450a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	3b01      	subs	r3, #1
 8004508:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004512:	697b      	ldr	r3, [r7, #20]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004524:	f001 f9d8 	bl	80058d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800452e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004530:	e011      	b.n	8004556 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004536:	2b00      	cmp	r3, #0
 8004538:	d012      	beq.n	8004560 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	3324      	adds	r3, #36	@ 0x24
 800453e:	4618      	mov	r0, r3
 8004540:	f000 fcb4 	bl	8004eac <xTaskRemoveFromEventList>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800454a:	f000 fd8d 	bl	8005068 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	3b01      	subs	r3, #1
 8004552:	b2db      	uxtb	r3, r3
 8004554:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800455a:	2b00      	cmp	r3, #0
 800455c:	dce9      	bgt.n	8004532 <prvUnlockQueue+0x16>
 800455e:	e000      	b.n	8004562 <prvUnlockQueue+0x46>
					break;
 8004560:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	22ff      	movs	r2, #255	@ 0xff
 8004566:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800456a:	f001 f9e7 	bl	800593c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800456e:	f001 f9b3 	bl	80058d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004578:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800457a:	e011      	b.n	80045a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d012      	beq.n	80045aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3310      	adds	r3, #16
 8004588:	4618      	mov	r0, r3
 800458a:	f000 fc8f 	bl	8004eac <xTaskRemoveFromEventList>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004594:	f000 fd68 	bl	8005068 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004598:	7bbb      	ldrb	r3, [r7, #14]
 800459a:	3b01      	subs	r3, #1
 800459c:	b2db      	uxtb	r3, r3
 800459e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	dce9      	bgt.n	800457c <prvUnlockQueue+0x60>
 80045a8:	e000      	b.n	80045ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	22ff      	movs	r2, #255	@ 0xff
 80045b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80045b4:	f001 f9c2 	bl	800593c <vPortExitCritical>
}
 80045b8:	bf00      	nop
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045c8:	f001 f986 	bl	80058d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d102      	bne.n	80045da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80045d4:	2301      	movs	r3, #1
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	e001      	b.n	80045de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80045da:	2300      	movs	r3, #0
 80045dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045de:	f001 f9ad 	bl	800593c <vPortExitCritical>

	return xReturn;
 80045e2:	68fb      	ldr	r3, [r7, #12]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045f4:	f001 f970 	bl	80058d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004600:	429a      	cmp	r2, r3
 8004602:	d102      	bne.n	800460a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004604:	2301      	movs	r3, #1
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	e001      	b.n	800460e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800460a:	2300      	movs	r3, #0
 800460c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800460e:	f001 f995 	bl	800593c <vPortExitCritical>

	return xReturn;
 8004612:	68fb      	ldr	r3, [r7, #12]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800461c:	b580      	push	{r7, lr}
 800461e:	b08e      	sub	sp, #56	@ 0x38
 8004620:	af04      	add	r7, sp, #16
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800462a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10b      	bne.n	8004648 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	623b      	str	r3, [r7, #32]
}
 8004642:	bf00      	nop
 8004644:	bf00      	nop
 8004646:	e7fd      	b.n	8004644 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800464a:	2b00      	cmp	r3, #0
 800464c:	d10b      	bne.n	8004666 <xTaskCreateStatic+0x4a>
	__asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	61fb      	str	r3, [r7, #28]
}
 8004660:	bf00      	nop
 8004662:	bf00      	nop
 8004664:	e7fd      	b.n	8004662 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004666:	2364      	movs	r3, #100	@ 0x64
 8004668:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	2b64      	cmp	r3, #100	@ 0x64
 800466e:	d00b      	beq.n	8004688 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	61bb      	str	r3, [r7, #24]
}
 8004682:	bf00      	nop
 8004684:	bf00      	nop
 8004686:	e7fd      	b.n	8004684 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004688:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800468a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468c:	2b00      	cmp	r3, #0
 800468e:	d01e      	beq.n	80046ce <xTaskCreateStatic+0xb2>
 8004690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004692:	2b00      	cmp	r3, #0
 8004694:	d01b      	beq.n	80046ce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004698:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800469e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80046a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a2:	2202      	movs	r2, #2
 80046a4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80046a8:	2300      	movs	r3, #0
 80046aa:	9303      	str	r3, [sp, #12]
 80046ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ae:	9302      	str	r3, [sp, #8]
 80046b0:	f107 0314 	add.w	r3, r7, #20
 80046b4:	9301      	str	r3, [sp, #4]
 80046b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	68b9      	ldr	r1, [r7, #8]
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 f850 	bl	8004766 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80046c8:	f000 f8e4 	bl	8004894 <prvAddNewTaskToReadyList>
 80046cc:	e001      	b.n	80046d2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80046d2:	697b      	ldr	r3, [r7, #20]
	}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3728      	adds	r7, #40	@ 0x28
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08c      	sub	sp, #48	@ 0x30
 80046e0:	af04      	add	r7, sp, #16
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	4613      	mov	r3, r2
 80046ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046ec:	88fb      	ldrh	r3, [r7, #6]
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4618      	mov	r0, r3
 80046f2:	f001 f9d1 	bl	8005a98 <pvPortMalloc>
 80046f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00e      	beq.n	800471c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046fe:	2064      	movs	r0, #100	@ 0x64
 8004700:	f001 f9ca 	bl	8005a98 <pvPortMalloc>
 8004704:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	631a      	str	r2, [r3, #48]	@ 0x30
 8004712:	e005      	b.n	8004720 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004714:	6978      	ldr	r0, [r7, #20]
 8004716:	f001 fa8d 	bl	8005c34 <vPortFree>
 800471a:	e001      	b.n	8004720 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800471c:	2300      	movs	r3, #0
 800471e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d017      	beq.n	8004756 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800472e:	88fa      	ldrh	r2, [r7, #6]
 8004730:	2300      	movs	r3, #0
 8004732:	9303      	str	r3, [sp, #12]
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	9302      	str	r3, [sp, #8]
 8004738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473a:	9301      	str	r3, [sp, #4]
 800473c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	68b9      	ldr	r1, [r7, #8]
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 f80e 	bl	8004766 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800474a:	69f8      	ldr	r0, [r7, #28]
 800474c:	f000 f8a2 	bl	8004894 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004750:	2301      	movs	r3, #1
 8004752:	61bb      	str	r3, [r7, #24]
 8004754:	e002      	b.n	800475c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004756:	f04f 33ff 	mov.w	r3, #4294967295
 800475a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800475c:	69bb      	ldr	r3, [r7, #24]
	}
 800475e:	4618      	mov	r0, r3
 8004760:	3720      	adds	r7, #32
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b088      	sub	sp, #32
 800476a:	af00      	add	r7, sp, #0
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	60b9      	str	r1, [r7, #8]
 8004770:	607a      	str	r2, [r7, #4]
 8004772:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004776:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	461a      	mov	r2, r3
 800477e:	21a5      	movs	r1, #165	@ 0xa5
 8004780:	f002 fc0d 	bl	8006f9e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004786:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800478e:	3b01      	subs	r3, #1
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4413      	add	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	f023 0307 	bic.w	r3, r3, #7
 800479c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00b      	beq.n	80047c0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	617b      	str	r3, [r7, #20]
}
 80047ba:	bf00      	nop
 80047bc:	bf00      	nop
 80047be:	e7fd      	b.n	80047bc <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 80047c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01f      	beq.n	800480c <prvInitialiseNewTask+0xa6>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047cc:	2300      	movs	r3, #0
 80047ce:	61fb      	str	r3, [r7, #28]
 80047d0:	e012      	b.n	80047f8 <prvInitialiseNewTask+0x92>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	4413      	add	r3, r2
 80047d8:	7819      	ldrb	r1, [r3, #0]
 80047da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	4413      	add	r3, r2
 80047e0:	3334      	adds	r3, #52	@ 0x34
 80047e2:	460a      	mov	r2, r1
 80047e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	4413      	add	r3, r2
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d006      	beq.n	8004800 <prvInitialiseNewTask+0x9a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	3301      	adds	r3, #1
 80047f6:	61fb      	str	r3, [r7, #28]
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	2b0f      	cmp	r3, #15
 80047fc:	d9e9      	bls.n	80047d2 <prvInitialiseNewTask+0x6c>
 80047fe:	e000      	b.n	8004802 <prvInitialiseNewTask+0x9c>
			{
				break;
 8004800:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800480a:	e003      	b.n	8004814 <prvInitialiseNewTask+0xae>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800480c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004816:	2b06      	cmp	r3, #6
 8004818:	d901      	bls.n	800481e <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800481a:	2306      	movs	r3, #6
 800481c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800481e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004820:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004822:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004826:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004828:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800482a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482c:	2200      	movs	r2, #0
 800482e:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004832:	3304      	adds	r3, #4
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff fa81 	bl	8003d3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800483a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483c:	3318      	adds	r3, #24
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff fa7c 	bl	8003d3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004848:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800484a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484c:	f1c3 0207 	rsb	r2, r3, #7
 8004850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004852:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004858:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800485a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485c:	2200      	movs	r2, #0
 800485e:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004862:	2200      	movs	r2, #0
 8004864:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	68f9      	ldr	r1, [r7, #12]
 8004872:	69b8      	ldr	r0, [r7, #24]
 8004874:	f000 ff00 	bl	8005678 <pxPortInitialiseStack>
 8004878:	4602      	mov	r2, r0
 800487a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800487e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <prvInitialiseNewTask+0x124>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004888:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800488a:	bf00      	nop
 800488c:	3720      	adds	r7, #32
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800489c:	f001 f81c 	bl	80058d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80048a0:	4b2c      	ldr	r3, [pc, #176]	@ (8004954 <prvAddNewTaskToReadyList+0xc0>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3301      	adds	r3, #1
 80048a6:	4a2b      	ldr	r2, [pc, #172]	@ (8004954 <prvAddNewTaskToReadyList+0xc0>)
 80048a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80048aa:	4b2b      	ldr	r3, [pc, #172]	@ (8004958 <prvAddNewTaskToReadyList+0xc4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d109      	bne.n	80048c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048b2:	4a29      	ldr	r2, [pc, #164]	@ (8004958 <prvAddNewTaskToReadyList+0xc4>)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048b8:	4b26      	ldr	r3, [pc, #152]	@ (8004954 <prvAddNewTaskToReadyList+0xc0>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d110      	bne.n	80048e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048c0:	f000 fbf6 	bl	80050b0 <prvInitialiseTaskLists>
 80048c4:	e00d      	b.n	80048e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048c6:	4b25      	ldr	r3, [pc, #148]	@ (800495c <prvAddNewTaskToReadyList+0xc8>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d109      	bne.n	80048e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048ce:	4b22      	ldr	r3, [pc, #136]	@ (8004958 <prvAddNewTaskToReadyList+0xc4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d8:	429a      	cmp	r2, r3
 80048da:	d802      	bhi.n	80048e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80048dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004958 <prvAddNewTaskToReadyList+0xc4>)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004960 <prvAddNewTaskToReadyList+0xcc>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3301      	adds	r3, #1
 80048e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004960 <prvAddNewTaskToReadyList+0xcc>)
 80048ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80048ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004960 <prvAddNewTaskToReadyList+0xcc>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f8:	2201      	movs	r2, #1
 80048fa:	409a      	lsls	r2, r3
 80048fc:	4b19      	ldr	r3, [pc, #100]	@ (8004964 <prvAddNewTaskToReadyList+0xd0>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4313      	orrs	r3, r2
 8004902:	4a18      	ldr	r2, [pc, #96]	@ (8004964 <prvAddNewTaskToReadyList+0xd0>)
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	4a15      	ldr	r2, [pc, #84]	@ (8004968 <prvAddNewTaskToReadyList+0xd4>)
 8004914:	441a      	add	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3304      	adds	r3, #4
 800491a:	4619      	mov	r1, r3
 800491c:	4610      	mov	r0, r2
 800491e:	f7ff fa1a 	bl	8003d56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004922:	f001 f80b 	bl	800593c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004926:	4b0d      	ldr	r3, [pc, #52]	@ (800495c <prvAddNewTaskToReadyList+0xc8>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00e      	beq.n	800494c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800492e:	4b0a      	ldr	r3, [pc, #40]	@ (8004958 <prvAddNewTaskToReadyList+0xc4>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004938:	429a      	cmp	r2, r3
 800493a:	d207      	bcs.n	800494c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800493c:	4b0b      	ldr	r3, [pc, #44]	@ (800496c <prvAddNewTaskToReadyList+0xd8>)
 800493e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800494c:	bf00      	nop
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	20000bec 	.word	0x20000bec
 8004958:	20000aec 	.word	0x20000aec
 800495c:	20000bf8 	.word	0x20000bf8
 8004960:	20000c08 	.word	0x20000c08
 8004964:	20000bf4 	.word	0x20000bf4
 8004968:	20000af0 	.word	0x20000af0
 800496c:	e000ed04 	.word	0xe000ed04

08004970 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004970:	b580      	push	{r7, lr}
 8004972:	b084      	sub	sp, #16
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004978:	2300      	movs	r3, #0
 800497a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d018      	beq.n	80049b4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004982:	4b14      	ldr	r3, [pc, #80]	@ (80049d4 <vTaskDelay+0x64>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00b      	beq.n	80049a2 <vTaskDelay+0x32>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	60bb      	str	r3, [r7, #8]
}
 800499c:	bf00      	nop
 800499e:	bf00      	nop
 80049a0:	e7fd      	b.n	800499e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80049a2:	f000 f87f 	bl	8004aa4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80049a6:	2100      	movs	r1, #0
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fdff 	bl	80055ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80049ae:	f000 f887 	bl	8004ac0 <xTaskResumeAll>
 80049b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d107      	bne.n	80049ca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80049ba:	4b07      	ldr	r3, [pc, #28]	@ (80049d8 <vTaskDelay+0x68>)
 80049bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049ca:	bf00      	nop
 80049cc:	3710      	adds	r7, #16
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20000c14 	.word	0x20000c14
 80049d8:	e000ed04 	.word	0xe000ed04

080049dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08a      	sub	sp, #40	@ 0x28
 80049e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80049e2:	2300      	movs	r3, #0
 80049e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80049ea:	463a      	mov	r2, r7
 80049ec:	1d39      	adds	r1, r7, #4
 80049ee:	f107 0308 	add.w	r3, r7, #8
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fb fdcc 	bl	8000590 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80049f8:	6839      	ldr	r1, [r7, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	9202      	str	r2, [sp, #8]
 8004a00:	9301      	str	r3, [sp, #4]
 8004a02:	2300      	movs	r3, #0
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	2300      	movs	r3, #0
 8004a08:	460a      	mov	r2, r1
 8004a0a:	4920      	ldr	r1, [pc, #128]	@ (8004a8c <vTaskStartScheduler+0xb0>)
 8004a0c:	4820      	ldr	r0, [pc, #128]	@ (8004a90 <vTaskStartScheduler+0xb4>)
 8004a0e:	f7ff fe05 	bl	800461c <xTaskCreateStatic>
 8004a12:	4603      	mov	r3, r0
 8004a14:	4a1f      	ldr	r2, [pc, #124]	@ (8004a94 <vTaskStartScheduler+0xb8>)
 8004a16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a18:	4b1e      	ldr	r3, [pc, #120]	@ (8004a94 <vTaskStartScheduler+0xb8>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d002      	beq.n	8004a26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a20:	2301      	movs	r3, #1
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e001      	b.n	8004a2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d118      	bne.n	8004a62 <vTaskStartScheduler+0x86>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	613b      	str	r3, [r7, #16]
}
 8004a42:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a44:	4b14      	ldr	r3, [pc, #80]	@ (8004a98 <vTaskStartScheduler+0xbc>)
 8004a46:	f04f 32ff 	mov.w	r2, #4294967295
 8004a4a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a4c:	4b13      	ldr	r3, [pc, #76]	@ (8004a9c <vTaskStartScheduler+0xc0>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a52:	4b13      	ldr	r3, [pc, #76]	@ (8004aa0 <vTaskStartScheduler+0xc4>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8004a58:	f7fb ffde 	bl	8000a18 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a5c:	f000 fe98 	bl	8005790 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a60:	e00f      	b.n	8004a82 <vTaskStartScheduler+0xa6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a68:	d10b      	bne.n	8004a82 <vTaskStartScheduler+0xa6>
	__asm volatile
 8004a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	60fb      	str	r3, [r7, #12]
}
 8004a7c:	bf00      	nop
 8004a7e:	bf00      	nop
 8004a80:	e7fd      	b.n	8004a7e <vTaskStartScheduler+0xa2>
}
 8004a82:	bf00      	nop
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	08007dfc 	.word	0x08007dfc
 8004a90:	08005081 	.word	0x08005081
 8004a94:	20000c10 	.word	0x20000c10
 8004a98:	20000c0c 	.word	0x20000c0c
 8004a9c:	20000bf8 	.word	0x20000bf8
 8004aa0:	20000bf0 	.word	0x20000bf0

08004aa4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004aa8:	4b04      	ldr	r3, [pc, #16]	@ (8004abc <vTaskSuspendAll+0x18>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3301      	adds	r3, #1
 8004aae:	4a03      	ldr	r2, [pc, #12]	@ (8004abc <vTaskSuspendAll+0x18>)
 8004ab0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ab2:	bf00      	nop
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	20000c14 	.word	0x20000c14

08004ac0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004ace:	4b42      	ldr	r3, [pc, #264]	@ (8004bd8 <xTaskResumeAll+0x118>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10b      	bne.n	8004aee <xTaskResumeAll+0x2e>
	__asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	603b      	str	r3, [r7, #0]
}
 8004ae8:	bf00      	nop
 8004aea:	bf00      	nop
 8004aec:	e7fd      	b.n	8004aea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004aee:	f000 fef3 	bl	80058d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004af2:	4b39      	ldr	r3, [pc, #228]	@ (8004bd8 <xTaskResumeAll+0x118>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	4a37      	ldr	r2, [pc, #220]	@ (8004bd8 <xTaskResumeAll+0x118>)
 8004afa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004afc:	4b36      	ldr	r3, [pc, #216]	@ (8004bd8 <xTaskResumeAll+0x118>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d161      	bne.n	8004bc8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b04:	4b35      	ldr	r3, [pc, #212]	@ (8004bdc <xTaskResumeAll+0x11c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d05d      	beq.n	8004bc8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b0c:	e02e      	b.n	8004b6c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b0e:	4b34      	ldr	r3, [pc, #208]	@ (8004be0 <xTaskResumeAll+0x120>)
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	3318      	adds	r3, #24
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff f978 	bl	8003e10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3304      	adds	r3, #4
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff f973 	bl	8003e10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b2e:	2201      	movs	r2, #1
 8004b30:	409a      	lsls	r2, r3
 8004b32:	4b2c      	ldr	r3, [pc, #176]	@ (8004be4 <xTaskResumeAll+0x124>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	4a2a      	ldr	r2, [pc, #168]	@ (8004be4 <xTaskResumeAll+0x124>)
 8004b3a:	6013      	str	r3, [r2, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4a27      	ldr	r2, [pc, #156]	@ (8004be8 <xTaskResumeAll+0x128>)
 8004b4a:	441a      	add	r2, r3
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	4619      	mov	r1, r3
 8004b52:	4610      	mov	r0, r2
 8004b54:	f7ff f8ff 	bl	8003d56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b5c:	4b23      	ldr	r3, [pc, #140]	@ (8004bec <xTaskResumeAll+0x12c>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d302      	bcc.n	8004b6c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004b66:	4b22      	ldr	r3, [pc, #136]	@ (8004bf0 <xTaskResumeAll+0x130>)
 8004b68:	2201      	movs	r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8004be0 <xTaskResumeAll+0x120>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1cc      	bne.n	8004b0e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b7a:	f000 fb37 	bl	80051ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8004bf4 <xTaskResumeAll+0x134>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d010      	beq.n	8004bac <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b8a:	f000 f837 	bl	8004bfc <xTaskIncrementTick>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004b94:	4b16      	ldr	r3, [pc, #88]	@ (8004bf0 <xTaskResumeAll+0x130>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1f1      	bne.n	8004b8a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004ba6:	4b13      	ldr	r3, [pc, #76]	@ (8004bf4 <xTaskResumeAll+0x134>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004bac:	4b10      	ldr	r3, [pc, #64]	@ (8004bf0 <xTaskResumeAll+0x130>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d009      	beq.n	8004bc8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf8 <xTaskResumeAll+0x138>)
 8004bba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bc8:	f000 feb8 	bl	800593c <vPortExitCritical>

	return xAlreadyYielded;
 8004bcc:	68bb      	ldr	r3, [r7, #8]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20000c14 	.word	0x20000c14
 8004bdc:	20000bec 	.word	0x20000bec
 8004be0:	20000bac 	.word	0x20000bac
 8004be4:	20000bf4 	.word	0x20000bf4
 8004be8:	20000af0 	.word	0x20000af0
 8004bec:	20000aec 	.word	0x20000aec
 8004bf0:	20000c00 	.word	0x20000c00
 8004bf4:	20000bfc 	.word	0x20000bfc
 8004bf8:	e000ed04 	.word	0xe000ed04

08004bfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c02:	2300      	movs	r3, #0
 8004c04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c06:	4b4f      	ldr	r3, [pc, #316]	@ (8004d44 <xTaskIncrementTick+0x148>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f040 808f 	bne.w	8004d2e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c10:	4b4d      	ldr	r3, [pc, #308]	@ (8004d48 <xTaskIncrementTick+0x14c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3301      	adds	r3, #1
 8004c16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c18:	4a4b      	ldr	r2, [pc, #300]	@ (8004d48 <xTaskIncrementTick+0x14c>)
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d121      	bne.n	8004c68 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c24:	4b49      	ldr	r3, [pc, #292]	@ (8004d4c <xTaskIncrementTick+0x150>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00b      	beq.n	8004c46 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c32:	f383 8811 	msr	BASEPRI, r3
 8004c36:	f3bf 8f6f 	isb	sy
 8004c3a:	f3bf 8f4f 	dsb	sy
 8004c3e:	603b      	str	r3, [r7, #0]
}
 8004c40:	bf00      	nop
 8004c42:	bf00      	nop
 8004c44:	e7fd      	b.n	8004c42 <xTaskIncrementTick+0x46>
 8004c46:	4b41      	ldr	r3, [pc, #260]	@ (8004d4c <xTaskIncrementTick+0x150>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	4b40      	ldr	r3, [pc, #256]	@ (8004d50 <xTaskIncrementTick+0x154>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a3e      	ldr	r2, [pc, #248]	@ (8004d4c <xTaskIncrementTick+0x150>)
 8004c52:	6013      	str	r3, [r2, #0]
 8004c54:	4a3e      	ldr	r2, [pc, #248]	@ (8004d50 <xTaskIncrementTick+0x154>)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8004d54 <xTaskIncrementTick+0x158>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	4a3c      	ldr	r2, [pc, #240]	@ (8004d54 <xTaskIncrementTick+0x158>)
 8004c62:	6013      	str	r3, [r2, #0]
 8004c64:	f000 fac2 	bl	80051ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c68:	4b3b      	ldr	r3, [pc, #236]	@ (8004d58 <xTaskIncrementTick+0x15c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d348      	bcc.n	8004d04 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c72:	4b36      	ldr	r3, [pc, #216]	@ (8004d4c <xTaskIncrementTick+0x150>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d104      	bne.n	8004c86 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c7c:	4b36      	ldr	r3, [pc, #216]	@ (8004d58 <xTaskIncrementTick+0x15c>)
 8004c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c82:	601a      	str	r2, [r3, #0]
					break;
 8004c84:	e03e      	b.n	8004d04 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c86:	4b31      	ldr	r3, [pc, #196]	@ (8004d4c <xTaskIncrementTick+0x150>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d203      	bcs.n	8004ca6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c9e:	4a2e      	ldr	r2, [pc, #184]	@ (8004d58 <xTaskIncrementTick+0x15c>)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ca4:	e02e      	b.n	8004d04 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	3304      	adds	r3, #4
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7ff f8b0 	bl	8003e10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d004      	beq.n	8004cc2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	3318      	adds	r3, #24
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7ff f8a7 	bl	8003e10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	409a      	lsls	r2, r3
 8004cca:	4b24      	ldr	r3, [pc, #144]	@ (8004d5c <xTaskIncrementTick+0x160>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	4a22      	ldr	r2, [pc, #136]	@ (8004d5c <xTaskIncrementTick+0x160>)
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d60 <xTaskIncrementTick+0x164>)
 8004ce2:	441a      	add	r2, r3
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4610      	mov	r0, r2
 8004cec:	f7ff f833 	bl	8003d56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8004d64 <xTaskIncrementTick+0x168>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d3b9      	bcc.n	8004c72 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d02:	e7b6      	b.n	8004c72 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d04:	4b17      	ldr	r3, [pc, #92]	@ (8004d64 <xTaskIncrementTick+0x168>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d0a:	4915      	ldr	r1, [pc, #84]	@ (8004d60 <xTaskIncrementTick+0x164>)
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	440b      	add	r3, r1
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d901      	bls.n	8004d20 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d20:	4b11      	ldr	r3, [pc, #68]	@ (8004d68 <xTaskIncrementTick+0x16c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d007      	beq.n	8004d38 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	e004      	b.n	8004d38 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d2e:	4b0f      	ldr	r3, [pc, #60]	@ (8004d6c <xTaskIncrementTick+0x170>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3301      	adds	r3, #1
 8004d34:	4a0d      	ldr	r2, [pc, #52]	@ (8004d6c <xTaskIncrementTick+0x170>)
 8004d36:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004d38:	697b      	ldr	r3, [r7, #20]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20000c14 	.word	0x20000c14
 8004d48:	20000bf0 	.word	0x20000bf0
 8004d4c:	20000ba4 	.word	0x20000ba4
 8004d50:	20000ba8 	.word	0x20000ba8
 8004d54:	20000c04 	.word	0x20000c04
 8004d58:	20000c0c 	.word	0x20000c0c
 8004d5c:	20000bf4 	.word	0x20000bf4
 8004d60:	20000af0 	.word	0x20000af0
 8004d64:	20000aec 	.word	0x20000aec
 8004d68:	20000c00 	.word	0x20000c00
 8004d6c:	20000bfc 	.word	0x20000bfc

08004d70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d76:	4b33      	ldr	r3, [pc, #204]	@ (8004e44 <vTaskSwitchContext+0xd4>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d7e:	4b32      	ldr	r3, [pc, #200]	@ (8004e48 <vTaskSwitchContext+0xd8>)
 8004d80:	2201      	movs	r2, #1
 8004d82:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d84:	e059      	b.n	8004e3a <vTaskSwitchContext+0xca>
		xYieldPending = pdFALSE;
 8004d86:	4b30      	ldr	r3, [pc, #192]	@ (8004e48 <vTaskSwitchContext+0xd8>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004d8c:	f7fb fe50 	bl	8000a30 <getRunTimeCounterValue>
 8004d90:	4603      	mov	r3, r0
 8004d92:	4a2e      	ldr	r2, [pc, #184]	@ (8004e4c <vTaskSwitchContext+0xdc>)
 8004d94:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004d96:	4b2d      	ldr	r3, [pc, #180]	@ (8004e4c <vTaskSwitchContext+0xdc>)
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	4b2d      	ldr	r3, [pc, #180]	@ (8004e50 <vTaskSwitchContext+0xe0>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d909      	bls.n	8004db6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004da2:	4b2c      	ldr	r3, [pc, #176]	@ (8004e54 <vTaskSwitchContext+0xe4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8004da8:	4a28      	ldr	r2, [pc, #160]	@ (8004e4c <vTaskSwitchContext+0xdc>)
 8004daa:	6810      	ldr	r0, [r2, #0]
 8004dac:	4a28      	ldr	r2, [pc, #160]	@ (8004e50 <vTaskSwitchContext+0xe0>)
 8004dae:	6812      	ldr	r2, [r2, #0]
 8004db0:	1a82      	subs	r2, r0, r2
 8004db2:	440a      	add	r2, r1
 8004db4:	659a      	str	r2, [r3, #88]	@ 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8004db6:	4b25      	ldr	r3, [pc, #148]	@ (8004e4c <vTaskSwitchContext+0xdc>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a25      	ldr	r2, [pc, #148]	@ (8004e50 <vTaskSwitchContext+0xe0>)
 8004dbc:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dbe:	4b26      	ldr	r3, [pc, #152]	@ (8004e58 <vTaskSwitchContext+0xe8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	fab3 f383 	clz	r3, r3
 8004dca:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004dcc:	7afb      	ldrb	r3, [r7, #11]
 8004dce:	f1c3 031f 	rsb	r3, r3, #31
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	4921      	ldr	r1, [pc, #132]	@ (8004e5c <vTaskSwitchContext+0xec>)
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10b      	bne.n	8004e00 <vTaskSwitchContext+0x90>
	__asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	607b      	str	r3, [r7, #4]
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	e7fd      	b.n	8004dfc <vTaskSwitchContext+0x8c>
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4a14      	ldr	r2, [pc, #80]	@ (8004e5c <vTaskSwitchContext+0xec>)
 8004e0c:	4413      	add	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	605a      	str	r2, [r3, #4]
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	3308      	adds	r3, #8
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d104      	bne.n	8004e30 <vTaskSwitchContext+0xc0>
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	605a      	str	r2, [r3, #4]
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	4a07      	ldr	r2, [pc, #28]	@ (8004e54 <vTaskSwitchContext+0xe4>)
 8004e38:	6013      	str	r3, [r2, #0]
}
 8004e3a:	bf00      	nop
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000c14 	.word	0x20000c14
 8004e48:	20000c00 	.word	0x20000c00
 8004e4c:	20000c1c 	.word	0x20000c1c
 8004e50:	20000c18 	.word	0x20000c18
 8004e54:	20000aec 	.word	0x20000aec
 8004e58:	20000bf4 	.word	0x20000bf4
 8004e5c:	20000af0 	.word	0x20000af0

08004e60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10b      	bne.n	8004e88 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	60fb      	str	r3, [r7, #12]
}
 8004e82:	bf00      	nop
 8004e84:	bf00      	nop
 8004e86:	e7fd      	b.n	8004e84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e88:	4b07      	ldr	r3, [pc, #28]	@ (8004ea8 <vTaskPlaceOnEventList+0x48>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	3318      	adds	r3, #24
 8004e8e:	4619      	mov	r1, r3
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7fe ff84 	bl	8003d9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e96:	2101      	movs	r1, #1
 8004e98:	6838      	ldr	r0, [r7, #0]
 8004e9a:	f000 fb87 	bl	80055ac <prvAddCurrentTaskToDelayedList>
}
 8004e9e:	bf00      	nop
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20000aec 	.word	0x20000aec

08004eac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10b      	bne.n	8004eda <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	60fb      	str	r3, [r7, #12]
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop
 8004ed8:	e7fd      	b.n	8004ed6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	3318      	adds	r3, #24
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fe ff96 	bl	8003e10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f5c <xTaskRemoveFromEventList+0xb0>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d11c      	bne.n	8004f26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	3304      	adds	r3, #4
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fe ff8d 	bl	8003e10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efa:	2201      	movs	r2, #1
 8004efc:	409a      	lsls	r2, r3
 8004efe:	4b18      	ldr	r3, [pc, #96]	@ (8004f60 <xTaskRemoveFromEventList+0xb4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	4a16      	ldr	r2, [pc, #88]	@ (8004f60 <xTaskRemoveFromEventList+0xb4>)
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4a13      	ldr	r2, [pc, #76]	@ (8004f64 <xTaskRemoveFromEventList+0xb8>)
 8004f16:	441a      	add	r2, r3
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	f7fe ff19 	bl	8003d56 <vListInsertEnd>
 8004f24:	e005      	b.n	8004f32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	3318      	adds	r3, #24
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	480e      	ldr	r0, [pc, #56]	@ (8004f68 <xTaskRemoveFromEventList+0xbc>)
 8004f2e:	f7fe ff12 	bl	8003d56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f36:	4b0d      	ldr	r3, [pc, #52]	@ (8004f6c <xTaskRemoveFromEventList+0xc0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d905      	bls.n	8004f4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004f40:	2301      	movs	r3, #1
 8004f42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f44:	4b0a      	ldr	r3, [pc, #40]	@ (8004f70 <xTaskRemoveFromEventList+0xc4>)
 8004f46:	2201      	movs	r2, #1
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	e001      	b.n	8004f50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f50:	697b      	ldr	r3, [r7, #20]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	20000c14 	.word	0x20000c14
 8004f60:	20000bf4 	.word	0x20000bf4
 8004f64:	20000af0 	.word	0x20000af0
 8004f68:	20000bac 	.word	0x20000bac
 8004f6c:	20000aec 	.word	0x20000aec
 8004f70:	20000c00 	.word	0x20000c00

08004f74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f7c:	4b06      	ldr	r3, [pc, #24]	@ (8004f98 <vTaskInternalSetTimeOutState+0x24>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f84:	4b05      	ldr	r3, [pc, #20]	@ (8004f9c <vTaskInternalSetTimeOutState+0x28>)
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	605a      	str	r2, [r3, #4]
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	20000c04 	.word	0x20000c04
 8004f9c:	20000bf0 	.word	0x20000bf0

08004fa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b088      	sub	sp, #32
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10b      	bne.n	8004fc8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	613b      	str	r3, [r7, #16]
}
 8004fc2:	bf00      	nop
 8004fc4:	bf00      	nop
 8004fc6:	e7fd      	b.n	8004fc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10b      	bne.n	8004fe6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	60fb      	str	r3, [r7, #12]
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	e7fd      	b.n	8004fe2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004fe6:	f000 fc77 	bl	80058d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004fea:	4b1d      	ldr	r3, [pc, #116]	@ (8005060 <xTaskCheckForTimeOut+0xc0>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005002:	d102      	bne.n	800500a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005004:	2300      	movs	r3, #0
 8005006:	61fb      	str	r3, [r7, #28]
 8005008:	e023      	b.n	8005052 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	4b15      	ldr	r3, [pc, #84]	@ (8005064 <xTaskCheckForTimeOut+0xc4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d007      	beq.n	8005026 <xTaskCheckForTimeOut+0x86>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	429a      	cmp	r2, r3
 800501e:	d302      	bcc.n	8005026 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005020:	2301      	movs	r3, #1
 8005022:	61fb      	str	r3, [r7, #28]
 8005024:	e015      	b.n	8005052 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	429a      	cmp	r2, r3
 800502e:	d20b      	bcs.n	8005048 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	1ad2      	subs	r2, r2, r3
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff ff99 	bl	8004f74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
 8005046:	e004      	b.n	8005052 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2200      	movs	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800504e:	2301      	movs	r3, #1
 8005050:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005052:	f000 fc73 	bl	800593c <vPortExitCritical>

	return xReturn;
 8005056:	69fb      	ldr	r3, [r7, #28]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3720      	adds	r7, #32
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}
 8005060:	20000bf0 	.word	0x20000bf0
 8005064:	20000c04 	.word	0x20000c04

08005068 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800506c:	4b03      	ldr	r3, [pc, #12]	@ (800507c <vTaskMissedYield+0x14>)
 800506e:	2201      	movs	r2, #1
 8005070:	601a      	str	r2, [r3, #0]
}
 8005072:	bf00      	nop
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	20000c00 	.word	0x20000c00

08005080 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005088:	f000 f852 	bl	8005130 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800508c:	4b06      	ldr	r3, [pc, #24]	@ (80050a8 <prvIdleTask+0x28>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d9f9      	bls.n	8005088 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005094:	4b05      	ldr	r3, [pc, #20]	@ (80050ac <prvIdleTask+0x2c>)
 8005096:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80050a4:	e7f0      	b.n	8005088 <prvIdleTask+0x8>
 80050a6:	bf00      	nop
 80050a8:	20000af0 	.word	0x20000af0
 80050ac:	e000ed04 	.word	0xe000ed04

080050b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050b6:	2300      	movs	r3, #0
 80050b8:	607b      	str	r3, [r7, #4]
 80050ba:	e00c      	b.n	80050d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4a12      	ldr	r2, [pc, #72]	@ (8005110 <prvInitialiseTaskLists+0x60>)
 80050c8:	4413      	add	r3, r2
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fe fe16 	bl	8003cfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3301      	adds	r3, #1
 80050d4:	607b      	str	r3, [r7, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b06      	cmp	r3, #6
 80050da:	d9ef      	bls.n	80050bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80050dc:	480d      	ldr	r0, [pc, #52]	@ (8005114 <prvInitialiseTaskLists+0x64>)
 80050de:	f7fe fe0d 	bl	8003cfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80050e2:	480d      	ldr	r0, [pc, #52]	@ (8005118 <prvInitialiseTaskLists+0x68>)
 80050e4:	f7fe fe0a 	bl	8003cfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050e8:	480c      	ldr	r0, [pc, #48]	@ (800511c <prvInitialiseTaskLists+0x6c>)
 80050ea:	f7fe fe07 	bl	8003cfc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050ee:	480c      	ldr	r0, [pc, #48]	@ (8005120 <prvInitialiseTaskLists+0x70>)
 80050f0:	f7fe fe04 	bl	8003cfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050f4:	480b      	ldr	r0, [pc, #44]	@ (8005124 <prvInitialiseTaskLists+0x74>)
 80050f6:	f7fe fe01 	bl	8003cfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005128 <prvInitialiseTaskLists+0x78>)
 80050fc:	4a05      	ldr	r2, [pc, #20]	@ (8005114 <prvInitialiseTaskLists+0x64>)
 80050fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005100:	4b0a      	ldr	r3, [pc, #40]	@ (800512c <prvInitialiseTaskLists+0x7c>)
 8005102:	4a05      	ldr	r2, [pc, #20]	@ (8005118 <prvInitialiseTaskLists+0x68>)
 8005104:	601a      	str	r2, [r3, #0]
}
 8005106:	bf00      	nop
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000af0 	.word	0x20000af0
 8005114:	20000b7c 	.word	0x20000b7c
 8005118:	20000b90 	.word	0x20000b90
 800511c:	20000bac 	.word	0x20000bac
 8005120:	20000bc0 	.word	0x20000bc0
 8005124:	20000bd8 	.word	0x20000bd8
 8005128:	20000ba4 	.word	0x20000ba4
 800512c:	20000ba8 	.word	0x20000ba8

08005130 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005136:	e019      	b.n	800516c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005138:	f000 fbce 	bl	80058d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800513c:	4b10      	ldr	r3, [pc, #64]	@ (8005180 <prvCheckTasksWaitingTermination+0x50>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3304      	adds	r3, #4
 8005148:	4618      	mov	r0, r3
 800514a:	f7fe fe61 	bl	8003e10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800514e:	4b0d      	ldr	r3, [pc, #52]	@ (8005184 <prvCheckTasksWaitingTermination+0x54>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	3b01      	subs	r3, #1
 8005154:	4a0b      	ldr	r2, [pc, #44]	@ (8005184 <prvCheckTasksWaitingTermination+0x54>)
 8005156:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005158:	4b0b      	ldr	r3, [pc, #44]	@ (8005188 <prvCheckTasksWaitingTermination+0x58>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	3b01      	subs	r3, #1
 800515e:	4a0a      	ldr	r2, [pc, #40]	@ (8005188 <prvCheckTasksWaitingTermination+0x58>)
 8005160:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005162:	f000 fbeb 	bl	800593c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f810 	bl	800518c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800516c:	4b06      	ldr	r3, [pc, #24]	@ (8005188 <prvCheckTasksWaitingTermination+0x58>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e1      	bne.n	8005138 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20000bc0 	.word	0x20000bc0
 8005184:	20000bec 	.word	0x20000bec
 8005188:	20000bd4 	.word	0x20000bd4

0800518c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800519a:	2b00      	cmp	r3, #0
 800519c:	d108      	bne.n	80051b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 fd46 	bl	8005c34 <vPortFree>
				vPortFree( pxTCB );
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 fd43 	bl	8005c34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80051ae:	e019      	b.n	80051e4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d103      	bne.n	80051c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 fd3a 	bl	8005c34 <vPortFree>
	}
 80051c0:	e010      	b.n	80051e4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d00b      	beq.n	80051e4 <prvDeleteTCB+0x58>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	60fb      	str	r3, [r7, #12]
}
 80051de:	bf00      	nop
 80051e0:	bf00      	nop
 80051e2:	e7fd      	b.n	80051e0 <prvDeleteTCB+0x54>
	}
 80051e4:	bf00      	nop
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005224 <prvResetNextTaskUnblockTime+0x38>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d104      	bne.n	8005206 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005228 <prvResetNextTaskUnblockTime+0x3c>)
 80051fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005202:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005204:	e008      	b.n	8005218 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005206:	4b07      	ldr	r3, [pc, #28]	@ (8005224 <prvResetNextTaskUnblockTime+0x38>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	4a04      	ldr	r2, [pc, #16]	@ (8005228 <prvResetNextTaskUnblockTime+0x3c>)
 8005216:	6013      	str	r3, [r2, #0]
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	20000ba4 	.word	0x20000ba4
 8005228:	20000c0c 	.word	0x20000c0c

0800522c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005232:	4b0b      	ldr	r3, [pc, #44]	@ (8005260 <xTaskGetSchedulerState+0x34>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d102      	bne.n	8005240 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800523a:	2301      	movs	r3, #1
 800523c:	607b      	str	r3, [r7, #4]
 800523e:	e008      	b.n	8005252 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005240:	4b08      	ldr	r3, [pc, #32]	@ (8005264 <xTaskGetSchedulerState+0x38>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d102      	bne.n	800524e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005248:	2302      	movs	r3, #2
 800524a:	607b      	str	r3, [r7, #4]
 800524c:	e001      	b.n	8005252 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800524e:	2300      	movs	r3, #0
 8005250:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005252:	687b      	ldr	r3, [r7, #4]
	}
 8005254:	4618      	mov	r0, r3
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	20000bf8 	.word	0x20000bf8
 8005264:	20000c14 	.word	0x20000c14

08005268 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005274:	2300      	movs	r3, #0
 8005276:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d05e      	beq.n	800533c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005282:	4b31      	ldr	r3, [pc, #196]	@ (8005348 <xTaskPriorityInherit+0xe0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005288:	429a      	cmp	r2, r3
 800528a:	d24e      	bcs.n	800532a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	2b00      	cmp	r3, #0
 8005292:	db06      	blt.n	80052a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005294:	4b2c      	ldr	r3, [pc, #176]	@ (8005348 <xTaskPriorityInherit+0xe0>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529a:	f1c3 0207 	rsb	r2, r3, #7
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	6959      	ldr	r1, [r3, #20]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052aa:	4613      	mov	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4a26      	ldr	r2, [pc, #152]	@ (800534c <xTaskPriorityInherit+0xe4>)
 80052b4:	4413      	add	r3, r2
 80052b6:	4299      	cmp	r1, r3
 80052b8:	d12f      	bne.n	800531a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	3304      	adds	r3, #4
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fe fda6 	bl	8003e10 <uxListRemove>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d10a      	bne.n	80052e0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ce:	2201      	movs	r2, #1
 80052d0:	fa02 f303 	lsl.w	r3, r2, r3
 80052d4:	43da      	mvns	r2, r3
 80052d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005350 <xTaskPriorityInherit+0xe8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4013      	ands	r3, r2
 80052dc:	4a1c      	ldr	r2, [pc, #112]	@ (8005350 <xTaskPriorityInherit+0xe8>)
 80052de:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80052e0:	4b19      	ldr	r3, [pc, #100]	@ (8005348 <xTaskPriorityInherit+0xe0>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ee:	2201      	movs	r2, #1
 80052f0:	409a      	lsls	r2, r3
 80052f2:	4b17      	ldr	r3, [pc, #92]	@ (8005350 <xTaskPriorityInherit+0xe8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	4a15      	ldr	r2, [pc, #84]	@ (8005350 <xTaskPriorityInherit+0xe8>)
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4a10      	ldr	r2, [pc, #64]	@ (800534c <xTaskPriorityInherit+0xe4>)
 800530a:	441a      	add	r2, r3
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	3304      	adds	r3, #4
 8005310:	4619      	mov	r1, r3
 8005312:	4610      	mov	r0, r2
 8005314:	f7fe fd1f 	bl	8003d56 <vListInsertEnd>
 8005318:	e004      	b.n	8005324 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800531a:	4b0b      	ldr	r3, [pc, #44]	@ (8005348 <xTaskPriorityInherit+0xe0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005324:	2301      	movs	r3, #1
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	e008      	b.n	800533c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800532e:	4b06      	ldr	r3, [pc, #24]	@ (8005348 <xTaskPriorityInherit+0xe0>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005334:	429a      	cmp	r2, r3
 8005336:	d201      	bcs.n	800533c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005338:	2301      	movs	r3, #1
 800533a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800533c:	68fb      	ldr	r3, [r7, #12]
	}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20000aec 	.word	0x20000aec
 800534c:	20000af0 	.word	0x20000af0
 8005350:	20000bf4 	.word	0x20000bf4

08005354 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005354:	b580      	push	{r7, lr}
 8005356:	b086      	sub	sp, #24
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005360:	2300      	movs	r3, #0
 8005362:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d070      	beq.n	800544c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800536a:	4b3b      	ldr	r3, [pc, #236]	@ (8005458 <xTaskPriorityDisinherit+0x104>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	429a      	cmp	r2, r3
 8005372:	d00b      	beq.n	800538c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	60fb      	str	r3, [r7, #12]
}
 8005386:	bf00      	nop
 8005388:	bf00      	nop
 800538a:	e7fd      	b.n	8005388 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10b      	bne.n	80053ac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	60bb      	str	r3, [r7, #8]
}
 80053a6:	bf00      	nop
 80053a8:	bf00      	nop
 80053aa:	e7fd      	b.n	80053a8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b0:	1e5a      	subs	r2, r3, #1
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	655a      	str	r2, [r3, #84]	@ 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053be:	429a      	cmp	r2, r3
 80053c0:	d044      	beq.n	800544c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d140      	bne.n	800544c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	3304      	adds	r3, #4
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fe fd1e 	bl	8003e10 <uxListRemove>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d115      	bne.n	8005406 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053de:	491f      	ldr	r1, [pc, #124]	@ (800545c <xTaskPriorityDisinherit+0x108>)
 80053e0:	4613      	mov	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d10a      	bne.n	8005406 <xTaskPriorityDisinherit+0xb2>
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f4:	2201      	movs	r2, #1
 80053f6:	fa02 f303 	lsl.w	r3, r2, r3
 80053fa:	43da      	mvns	r2, r3
 80053fc:	4b18      	ldr	r3, [pc, #96]	@ (8005460 <xTaskPriorityDisinherit+0x10c>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4013      	ands	r3, r2
 8005402:	4a17      	ldr	r2, [pc, #92]	@ (8005460 <xTaskPriorityDisinherit+0x10c>)
 8005404:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005412:	f1c3 0207 	rsb	r2, r3, #7
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541e:	2201      	movs	r2, #1
 8005420:	409a      	lsls	r2, r3
 8005422:	4b0f      	ldr	r3, [pc, #60]	@ (8005460 <xTaskPriorityDisinherit+0x10c>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4313      	orrs	r3, r2
 8005428:	4a0d      	ldr	r2, [pc, #52]	@ (8005460 <xTaskPriorityDisinherit+0x10c>)
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005430:	4613      	mov	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4a08      	ldr	r2, [pc, #32]	@ (800545c <xTaskPriorityDisinherit+0x108>)
 800543a:	441a      	add	r2, r3
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	3304      	adds	r3, #4
 8005440:	4619      	mov	r1, r3
 8005442:	4610      	mov	r0, r2
 8005444:	f7fe fc87 	bl	8003d56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005448:	2301      	movs	r3, #1
 800544a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800544c:	697b      	ldr	r3, [r7, #20]
	}
 800544e:	4618      	mov	r0, r3
 8005450:	3718      	adds	r7, #24
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	20000aec 	.word	0x20000aec
 800545c:	20000af0 	.word	0x20000af0
 8005460:	20000bf4 	.word	0x20000bf4

08005464 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005464:	b580      	push	{r7, lr}
 8005466:	b088      	sub	sp, #32
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005472:	2301      	movs	r3, #1
 8005474:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d079      	beq.n	8005570 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10b      	bne.n	800549c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	60fb      	str	r3, [r7, #12]
}
 8005496:	bf00      	nop
 8005498:	bf00      	nop
 800549a:	e7fd      	b.n	8005498 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d902      	bls.n	80054ac <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	61fb      	str	r3, [r7, #28]
 80054aa:	e002      	b.n	80054b2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054b0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b6:	69fa      	ldr	r2, [r7, #28]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d059      	beq.n	8005570 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d154      	bne.n	8005570 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80054c6:	4b2c      	ldr	r3, [pc, #176]	@ (8005578 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d10b      	bne.n	80054e8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	60bb      	str	r3, [r7, #8]
}
 80054e2:	bf00      	nop
 80054e4:	bf00      	nop
 80054e6:	e7fd      	b.n	80054e4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	69fa      	ldr	r2, [r7, #28]
 80054f2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	db04      	blt.n	8005506 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f1c3 0207 	rsb	r2, r3, #7
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	6959      	ldr	r1, [r3, #20]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4613      	mov	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4a19      	ldr	r2, [pc, #100]	@ (800557c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005516:	4413      	add	r3, r2
 8005518:	4299      	cmp	r1, r3
 800551a:	d129      	bne.n	8005570 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	3304      	adds	r3, #4
 8005520:	4618      	mov	r0, r3
 8005522:	f7fe fc75 	bl	8003e10 <uxListRemove>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10a      	bne.n	8005542 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005530:	2201      	movs	r2, #1
 8005532:	fa02 f303 	lsl.w	r3, r2, r3
 8005536:	43da      	mvns	r2, r3
 8005538:	4b11      	ldr	r3, [pc, #68]	@ (8005580 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4013      	ands	r3, r2
 800553e:	4a10      	ldr	r2, [pc, #64]	@ (8005580 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005540:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005546:	2201      	movs	r2, #1
 8005548:	409a      	lsls	r2, r3
 800554a:	4b0d      	ldr	r3, [pc, #52]	@ (8005580 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4313      	orrs	r3, r2
 8005550:	4a0b      	ldr	r2, [pc, #44]	@ (8005580 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4a06      	ldr	r2, [pc, #24]	@ (800557c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005562:	441a      	add	r2, r3
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	3304      	adds	r3, #4
 8005568:	4619      	mov	r1, r3
 800556a:	4610      	mov	r0, r2
 800556c:	f7fe fbf3 	bl	8003d56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005570:	bf00      	nop
 8005572:	3720      	adds	r7, #32
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	20000aec 	.word	0x20000aec
 800557c:	20000af0 	.word	0x20000af0
 8005580:	20000bf4 	.word	0x20000bf4

08005584 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005588:	4b07      	ldr	r3, [pc, #28]	@ (80055a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d004      	beq.n	800559a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005590:	4b05      	ldr	r3, [pc, #20]	@ (80055a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005596:	3201      	adds	r2, #1
 8005598:	655a      	str	r2, [r3, #84]	@ 0x54
		}

		return pxCurrentTCB;
 800559a:	4b03      	ldr	r3, [pc, #12]	@ (80055a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800559c:	681b      	ldr	r3, [r3, #0]
	}
 800559e:	4618      	mov	r0, r3
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	20000aec 	.word	0x20000aec

080055ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80055b6:	4b29      	ldr	r3, [pc, #164]	@ (800565c <prvAddCurrentTaskToDelayedList+0xb0>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055bc:	4b28      	ldr	r3, [pc, #160]	@ (8005660 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3304      	adds	r3, #4
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fe fc24 	bl	8003e10 <uxListRemove>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10b      	bne.n	80055e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80055ce:	4b24      	ldr	r3, [pc, #144]	@ (8005660 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055d4:	2201      	movs	r2, #1
 80055d6:	fa02 f303 	lsl.w	r3, r2, r3
 80055da:	43da      	mvns	r2, r3
 80055dc:	4b21      	ldr	r3, [pc, #132]	@ (8005664 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4013      	ands	r3, r2
 80055e2:	4a20      	ldr	r2, [pc, #128]	@ (8005664 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ec:	d10a      	bne.n	8005604 <prvAddCurrentTaskToDelayedList+0x58>
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d007      	beq.n	8005604 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005660 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3304      	adds	r3, #4
 80055fa:	4619      	mov	r1, r3
 80055fc:	481a      	ldr	r0, [pc, #104]	@ (8005668 <prvAddCurrentTaskToDelayedList+0xbc>)
 80055fe:	f7fe fbaa 	bl	8003d56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005602:	e026      	b.n	8005652 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4413      	add	r3, r2
 800560a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800560c:	4b14      	ldr	r3, [pc, #80]	@ (8005660 <prvAddCurrentTaskToDelayedList+0xb4>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005614:	68ba      	ldr	r2, [r7, #8]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	429a      	cmp	r2, r3
 800561a:	d209      	bcs.n	8005630 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800561c:	4b13      	ldr	r3, [pc, #76]	@ (800566c <prvAddCurrentTaskToDelayedList+0xc0>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	4b0f      	ldr	r3, [pc, #60]	@ (8005660 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3304      	adds	r3, #4
 8005626:	4619      	mov	r1, r3
 8005628:	4610      	mov	r0, r2
 800562a:	f7fe fbb8 	bl	8003d9e <vListInsert>
}
 800562e:	e010      	b.n	8005652 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005630:	4b0f      	ldr	r3, [pc, #60]	@ (8005670 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	4b0a      	ldr	r3, [pc, #40]	@ (8005660 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3304      	adds	r3, #4
 800563a:	4619      	mov	r1, r3
 800563c:	4610      	mov	r0, r2
 800563e:	f7fe fbae 	bl	8003d9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005642:	4b0c      	ldr	r3, [pc, #48]	@ (8005674 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	429a      	cmp	r2, r3
 800564a:	d202      	bcs.n	8005652 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800564c:	4a09      	ldr	r2, [pc, #36]	@ (8005674 <prvAddCurrentTaskToDelayedList+0xc8>)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	6013      	str	r3, [r2, #0]
}
 8005652:	bf00      	nop
 8005654:	3710      	adds	r7, #16
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20000bf0 	.word	0x20000bf0
 8005660:	20000aec 	.word	0x20000aec
 8005664:	20000bf4 	.word	0x20000bf4
 8005668:	20000bd8 	.word	0x20000bd8
 800566c:	20000ba8 	.word	0x20000ba8
 8005670:	20000ba4 	.word	0x20000ba4
 8005674:	20000c0c 	.word	0x20000c0c

08005678 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	3b04      	subs	r3, #4
 8005688:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3b04      	subs	r3, #4
 8005696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f023 0201 	bic.w	r2, r3, #1
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	3b04      	subs	r3, #4
 80056a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80056a8:	4a0c      	ldr	r2, [pc, #48]	@ (80056dc <pxPortInitialiseStack+0x64>)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	3b14      	subs	r3, #20
 80056b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3b04      	subs	r3, #4
 80056be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f06f 0202 	mvn.w	r2, #2
 80056c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3b20      	subs	r3, #32
 80056cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80056ce:	68fb      	ldr	r3, [r7, #12]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	080056e1 	.word	0x080056e1

080056e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80056e6:	2300      	movs	r3, #0
 80056e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80056ea:	4b13      	ldr	r3, [pc, #76]	@ (8005738 <prvTaskExitError+0x58>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f2:	d00b      	beq.n	800570c <prvTaskExitError+0x2c>
	__asm volatile
 80056f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f8:	f383 8811 	msr	BASEPRI, r3
 80056fc:	f3bf 8f6f 	isb	sy
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	60fb      	str	r3, [r7, #12]
}
 8005706:	bf00      	nop
 8005708:	bf00      	nop
 800570a:	e7fd      	b.n	8005708 <prvTaskExitError+0x28>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	60bb      	str	r3, [r7, #8]
}
 800571e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005720:	bf00      	nop
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d0fc      	beq.n	8005722 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005728:	bf00      	nop
 800572a:	bf00      	nop
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	2000000c 	.word	0x2000000c
 800573c:	00000000 	.word	0x00000000

08005740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005740:	4b07      	ldr	r3, [pc, #28]	@ (8005760 <pxCurrentTCBConst2>)
 8005742:	6819      	ldr	r1, [r3, #0]
 8005744:	6808      	ldr	r0, [r1, #0]
 8005746:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574a:	f380 8809 	msr	PSP, r0
 800574e:	f3bf 8f6f 	isb	sy
 8005752:	f04f 0000 	mov.w	r0, #0
 8005756:	f380 8811 	msr	BASEPRI, r0
 800575a:	4770      	bx	lr
 800575c:	f3af 8000 	nop.w

08005760 <pxCurrentTCBConst2>:
 8005760:	20000aec 	.word	0x20000aec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005764:	bf00      	nop
 8005766:	bf00      	nop

08005768 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005768:	4808      	ldr	r0, [pc, #32]	@ (800578c <prvPortStartFirstTask+0x24>)
 800576a:	6800      	ldr	r0, [r0, #0]
 800576c:	6800      	ldr	r0, [r0, #0]
 800576e:	f380 8808 	msr	MSP, r0
 8005772:	f04f 0000 	mov.w	r0, #0
 8005776:	f380 8814 	msr	CONTROL, r0
 800577a:	b662      	cpsie	i
 800577c:	b661      	cpsie	f
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	df00      	svc	0
 8005788:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800578a:	bf00      	nop
 800578c:	e000ed08 	.word	0xe000ed08

08005790 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005796:	4b47      	ldr	r3, [pc, #284]	@ (80058b4 <xPortStartScheduler+0x124>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a47      	ldr	r2, [pc, #284]	@ (80058b8 <xPortStartScheduler+0x128>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d10b      	bne.n	80057b8 <xPortStartScheduler+0x28>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	613b      	str	r3, [r7, #16]
}
 80057b2:	bf00      	nop
 80057b4:	bf00      	nop
 80057b6:	e7fd      	b.n	80057b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80057b8:	4b3e      	ldr	r3, [pc, #248]	@ (80058b4 <xPortStartScheduler+0x124>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a3f      	ldr	r2, [pc, #252]	@ (80058bc <xPortStartScheduler+0x12c>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d10b      	bne.n	80057da <xPortStartScheduler+0x4a>
	__asm volatile
 80057c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c6:	f383 8811 	msr	BASEPRI, r3
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	f3bf 8f4f 	dsb	sy
 80057d2:	60fb      	str	r3, [r7, #12]
}
 80057d4:	bf00      	nop
 80057d6:	bf00      	nop
 80057d8:	e7fd      	b.n	80057d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057da:	4b39      	ldr	r3, [pc, #228]	@ (80058c0 <xPortStartScheduler+0x130>)
 80057dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	22ff      	movs	r2, #255	@ 0xff
 80057ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057f4:	78fb      	ldrb	r3, [r7, #3]
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	4b31      	ldr	r3, [pc, #196]	@ (80058c4 <xPortStartScheduler+0x134>)
 8005800:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005802:	4b31      	ldr	r3, [pc, #196]	@ (80058c8 <xPortStartScheduler+0x138>)
 8005804:	2207      	movs	r2, #7
 8005806:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005808:	e009      	b.n	800581e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800580a:	4b2f      	ldr	r3, [pc, #188]	@ (80058c8 <xPortStartScheduler+0x138>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	3b01      	subs	r3, #1
 8005810:	4a2d      	ldr	r2, [pc, #180]	@ (80058c8 <xPortStartScheduler+0x138>)
 8005812:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005814:	78fb      	ldrb	r3, [r7, #3]
 8005816:	b2db      	uxtb	r3, r3
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	b2db      	uxtb	r3, r3
 800581c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800581e:	78fb      	ldrb	r3, [r7, #3]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005826:	2b80      	cmp	r3, #128	@ 0x80
 8005828:	d0ef      	beq.n	800580a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800582a:	4b27      	ldr	r3, [pc, #156]	@ (80058c8 <xPortStartScheduler+0x138>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f1c3 0307 	rsb	r3, r3, #7
 8005832:	2b04      	cmp	r3, #4
 8005834:	d00b      	beq.n	800584e <xPortStartScheduler+0xbe>
	__asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	60bb      	str	r3, [r7, #8]
}
 8005848:	bf00      	nop
 800584a:	bf00      	nop
 800584c:	e7fd      	b.n	800584a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800584e:	4b1e      	ldr	r3, [pc, #120]	@ (80058c8 <xPortStartScheduler+0x138>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	021b      	lsls	r3, r3, #8
 8005854:	4a1c      	ldr	r2, [pc, #112]	@ (80058c8 <xPortStartScheduler+0x138>)
 8005856:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005858:	4b1b      	ldr	r3, [pc, #108]	@ (80058c8 <xPortStartScheduler+0x138>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005860:	4a19      	ldr	r2, [pc, #100]	@ (80058c8 <xPortStartScheduler+0x138>)
 8005862:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	b2da      	uxtb	r2, r3
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800586c:	4b17      	ldr	r3, [pc, #92]	@ (80058cc <xPortStartScheduler+0x13c>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a16      	ldr	r2, [pc, #88]	@ (80058cc <xPortStartScheduler+0x13c>)
 8005872:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005876:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005878:	4b14      	ldr	r3, [pc, #80]	@ (80058cc <xPortStartScheduler+0x13c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a13      	ldr	r2, [pc, #76]	@ (80058cc <xPortStartScheduler+0x13c>)
 800587e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005882:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005884:	f000 f8da 	bl	8005a3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005888:	4b11      	ldr	r3, [pc, #68]	@ (80058d0 <xPortStartScheduler+0x140>)
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800588e:	f000 f8f9 	bl	8005a84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005892:	4b10      	ldr	r3, [pc, #64]	@ (80058d4 <xPortStartScheduler+0x144>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a0f      	ldr	r2, [pc, #60]	@ (80058d4 <xPortStartScheduler+0x144>)
 8005898:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800589c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800589e:	f7ff ff63 	bl	8005768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80058a2:	f7ff fa65 	bl	8004d70 <vTaskSwitchContext>
	prvTaskExitError();
 80058a6:	f7ff ff1b 	bl	80056e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	e000ed00 	.word	0xe000ed00
 80058b8:	410fc271 	.word	0x410fc271
 80058bc:	410fc270 	.word	0x410fc270
 80058c0:	e000e400 	.word	0xe000e400
 80058c4:	20000c20 	.word	0x20000c20
 80058c8:	20000c24 	.word	0x20000c24
 80058cc:	e000ed20 	.word	0xe000ed20
 80058d0:	2000000c 	.word	0x2000000c
 80058d4:	e000ef34 	.word	0xe000ef34

080058d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	607b      	str	r3, [r7, #4]
}
 80058f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80058f2:	4b10      	ldr	r3, [pc, #64]	@ (8005934 <vPortEnterCritical+0x5c>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	3301      	adds	r3, #1
 80058f8:	4a0e      	ldr	r2, [pc, #56]	@ (8005934 <vPortEnterCritical+0x5c>)
 80058fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80058fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005934 <vPortEnterCritical+0x5c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d110      	bne.n	8005926 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005904:	4b0c      	ldr	r3, [pc, #48]	@ (8005938 <vPortEnterCritical+0x60>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00b      	beq.n	8005926 <vPortEnterCritical+0x4e>
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	603b      	str	r3, [r7, #0]
}
 8005920:	bf00      	nop
 8005922:	bf00      	nop
 8005924:	e7fd      	b.n	8005922 <vPortEnterCritical+0x4a>
	}
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	2000000c 	.word	0x2000000c
 8005938:	e000ed04 	.word	0xe000ed04

0800593c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005942:	4b12      	ldr	r3, [pc, #72]	@ (800598c <vPortExitCritical+0x50>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10b      	bne.n	8005962 <vPortExitCritical+0x26>
	__asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	607b      	str	r3, [r7, #4]
}
 800595c:	bf00      	nop
 800595e:	bf00      	nop
 8005960:	e7fd      	b.n	800595e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005962:	4b0a      	ldr	r3, [pc, #40]	@ (800598c <vPortExitCritical+0x50>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	3b01      	subs	r3, #1
 8005968:	4a08      	ldr	r2, [pc, #32]	@ (800598c <vPortExitCritical+0x50>)
 800596a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800596c:	4b07      	ldr	r3, [pc, #28]	@ (800598c <vPortExitCritical+0x50>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d105      	bne.n	8005980 <vPortExitCritical+0x44>
 8005974:	2300      	movs	r3, #0
 8005976:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800597e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	2000000c 	.word	0x2000000c

08005990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005990:	f3ef 8009 	mrs	r0, PSP
 8005994:	f3bf 8f6f 	isb	sy
 8005998:	4b15      	ldr	r3, [pc, #84]	@ (80059f0 <pxCurrentTCBConst>)
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	f01e 0f10 	tst.w	lr, #16
 80059a0:	bf08      	it	eq
 80059a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059aa:	6010      	str	r0, [r2, #0]
 80059ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80059b4:	f380 8811 	msr	BASEPRI, r0
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f7ff f9d6 	bl	8004d70 <vTaskSwitchContext>
 80059c4:	f04f 0000 	mov.w	r0, #0
 80059c8:	f380 8811 	msr	BASEPRI, r0
 80059cc:	bc09      	pop	{r0, r3}
 80059ce:	6819      	ldr	r1, [r3, #0]
 80059d0:	6808      	ldr	r0, [r1, #0]
 80059d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059d6:	f01e 0f10 	tst.w	lr, #16
 80059da:	bf08      	it	eq
 80059dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80059e0:	f380 8809 	msr	PSP, r0
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	f3af 8000 	nop.w

080059f0 <pxCurrentTCBConst>:
 80059f0:	20000aec 	.word	0x20000aec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80059f4:	bf00      	nop
 80059f6:	bf00      	nop

080059f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	607b      	str	r3, [r7, #4]
}
 8005a10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a12:	f7ff f8f3 	bl	8004bfc <xTaskIncrementTick>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a1c:	4b06      	ldr	r3, [pc, #24]	@ (8005a38 <SysTick_Handler+0x40>)
 8005a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a22:	601a      	str	r2, [r3, #0]
 8005a24:	2300      	movs	r3, #0
 8005a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	f383 8811 	msr	BASEPRI, r3
}
 8005a2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a30:	bf00      	nop
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	e000ed04 	.word	0xe000ed04

08005a3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a40:	4b0b      	ldr	r3, [pc, #44]	@ (8005a70 <vPortSetupTimerInterrupt+0x34>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a46:	4b0b      	ldr	r3, [pc, #44]	@ (8005a74 <vPortSetupTimerInterrupt+0x38>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a78 <vPortSetupTimerInterrupt+0x3c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a0a      	ldr	r2, [pc, #40]	@ (8005a7c <vPortSetupTimerInterrupt+0x40>)
 8005a52:	fba2 2303 	umull	r2, r3, r2, r3
 8005a56:	099b      	lsrs	r3, r3, #6
 8005a58:	4a09      	ldr	r2, [pc, #36]	@ (8005a80 <vPortSetupTimerInterrupt+0x44>)
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a5e:	4b04      	ldr	r3, [pc, #16]	@ (8005a70 <vPortSetupTimerInterrupt+0x34>)
 8005a60:	2207      	movs	r2, #7
 8005a62:	601a      	str	r2, [r3, #0]
}
 8005a64:	bf00      	nop
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	e000e010 	.word	0xe000e010
 8005a74:	e000e018 	.word	0xe000e018
 8005a78:	20000000 	.word	0x20000000
 8005a7c:	10624dd3 	.word	0x10624dd3
 8005a80:	e000e014 	.word	0xe000e014

08005a84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005a84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005a94 <vPortEnableVFP+0x10>
 8005a88:	6801      	ldr	r1, [r0, #0]
 8005a8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005a8e:	6001      	str	r1, [r0, #0]
 8005a90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005a92:	bf00      	nop
 8005a94:	e000ed88 	.word	0xe000ed88

08005a98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08a      	sub	sp, #40	@ 0x28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005aa4:	f7fe fffe 	bl	8004aa4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005aa8:	4b5c      	ldr	r3, [pc, #368]	@ (8005c1c <pvPortMalloc+0x184>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ab0:	f000 f924 	bl	8005cfc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ab4:	4b5a      	ldr	r3, [pc, #360]	@ (8005c20 <pvPortMalloc+0x188>)
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4013      	ands	r3, r2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f040 8095 	bne.w	8005bec <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01e      	beq.n	8005b06 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005ac8:	2208      	movs	r2, #8
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4413      	add	r3, r2
 8005ace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f003 0307 	and.w	r3, r3, #7
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d015      	beq.n	8005b06 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f023 0307 	bic.w	r3, r3, #7
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00b      	beq.n	8005b06 <pvPortMalloc+0x6e>
	__asm volatile
 8005aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af2:	f383 8811 	msr	BASEPRI, r3
 8005af6:	f3bf 8f6f 	isb	sy
 8005afa:	f3bf 8f4f 	dsb	sy
 8005afe:	617b      	str	r3, [r7, #20]
}
 8005b00:	bf00      	nop
 8005b02:	bf00      	nop
 8005b04:	e7fd      	b.n	8005b02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d06f      	beq.n	8005bec <pvPortMalloc+0x154>
 8005b0c:	4b45      	ldr	r3, [pc, #276]	@ (8005c24 <pvPortMalloc+0x18c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d86a      	bhi.n	8005bec <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005b16:	4b44      	ldr	r3, [pc, #272]	@ (8005c28 <pvPortMalloc+0x190>)
 8005b18:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005b1a:	4b43      	ldr	r3, [pc, #268]	@ (8005c28 <pvPortMalloc+0x190>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b20:	e004      	b.n	8005b2c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b24:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d903      	bls.n	8005b3e <pvPortMalloc+0xa6>
 8005b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1f1      	bne.n	8005b22 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005b3e:	4b37      	ldr	r3, [pc, #220]	@ (8005c1c <pvPortMalloc+0x184>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d051      	beq.n	8005bec <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2208      	movs	r2, #8
 8005b4e:	4413      	add	r3, r2
 8005b50:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	1ad2      	subs	r2, r2, r3
 8005b62:	2308      	movs	r3, #8
 8005b64:	005b      	lsls	r3, r3, #1
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d920      	bls.n	8005bac <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4413      	add	r3, r2
 8005b70:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	f003 0307 	and.w	r3, r3, #7
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00b      	beq.n	8005b94 <pvPortMalloc+0xfc>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	613b      	str	r3, [r7, #16]
}
 8005b8e:	bf00      	nop
 8005b90:	bf00      	nop
 8005b92:	e7fd      	b.n	8005b90 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	1ad2      	subs	r2, r2, r3
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005ba6:	69b8      	ldr	r0, [r7, #24]
 8005ba8:	f000 f90a 	bl	8005dc0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005bac:	4b1d      	ldr	r3, [pc, #116]	@ (8005c24 <pvPortMalloc+0x18c>)
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	4a1b      	ldr	r2, [pc, #108]	@ (8005c24 <pvPortMalloc+0x18c>)
 8005bb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005bba:	4b1a      	ldr	r3, [pc, #104]	@ (8005c24 <pvPortMalloc+0x18c>)
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8005c2c <pvPortMalloc+0x194>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d203      	bcs.n	8005bce <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005bc6:	4b17      	ldr	r3, [pc, #92]	@ (8005c24 <pvPortMalloc+0x18c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a18      	ldr	r2, [pc, #96]	@ (8005c2c <pvPortMalloc+0x194>)
 8005bcc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	4b13      	ldr	r3, [pc, #76]	@ (8005c20 <pvPortMalloc+0x188>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005be2:	4b13      	ldr	r3, [pc, #76]	@ (8005c30 <pvPortMalloc+0x198>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3301      	adds	r3, #1
 8005be8:	4a11      	ldr	r2, [pc, #68]	@ (8005c30 <pvPortMalloc+0x198>)
 8005bea:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005bec:	f7fe ff68 	bl	8004ac0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00b      	beq.n	8005c12 <pvPortMalloc+0x17a>
	__asm volatile
 8005bfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	60fb      	str	r3, [r7, #12]
}
 8005c0c:	bf00      	nop
 8005c0e:	bf00      	nop
 8005c10:	e7fd      	b.n	8005c0e <pvPortMalloc+0x176>
	return pvReturn;
 8005c12:	69fb      	ldr	r3, [r7, #28]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3728      	adds	r7, #40	@ 0x28
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	20004830 	.word	0x20004830
 8005c20:	20004844 	.word	0x20004844
 8005c24:	20004834 	.word	0x20004834
 8005c28:	20004828 	.word	0x20004828
 8005c2c:	20004838 	.word	0x20004838
 8005c30:	2000483c 	.word	0x2000483c

08005c34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d04f      	beq.n	8005ce6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005c46:	2308      	movs	r3, #8
 8005c48:	425b      	negs	r3, r3
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	4b25      	ldr	r3, [pc, #148]	@ (8005cf0 <vPortFree+0xbc>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10b      	bne.n	8005c7a <vPortFree+0x46>
	__asm volatile
 8005c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	60fb      	str	r3, [r7, #12]
}
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop
 8005c78:	e7fd      	b.n	8005c76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00b      	beq.n	8005c9a <vPortFree+0x66>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	60bb      	str	r3, [r7, #8]
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop
 8005c98:	e7fd      	b.n	8005c96 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	4b14      	ldr	r3, [pc, #80]	@ (8005cf0 <vPortFree+0xbc>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d01e      	beq.n	8005ce6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d11a      	bne.n	8005ce6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	685a      	ldr	r2, [r3, #4]
 8005cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8005cf0 <vPortFree+0xbc>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	401a      	ands	r2, r3
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005cc0:	f7fe fef0 	bl	8004aa4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf4 <vPortFree+0xc0>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4413      	add	r3, r2
 8005cce:	4a09      	ldr	r2, [pc, #36]	@ (8005cf4 <vPortFree+0xc0>)
 8005cd0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005cd2:	6938      	ldr	r0, [r7, #16]
 8005cd4:	f000 f874 	bl	8005dc0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005cd8:	4b07      	ldr	r3, [pc, #28]	@ (8005cf8 <vPortFree+0xc4>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	4a06      	ldr	r2, [pc, #24]	@ (8005cf8 <vPortFree+0xc4>)
 8005ce0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005ce2:	f7fe feed 	bl	8004ac0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ce6:	bf00      	nop
 8005ce8:	3718      	adds	r7, #24
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20004844 	.word	0x20004844
 8005cf4:	20004834 	.word	0x20004834
 8005cf8:	20004840 	.word	0x20004840

08005cfc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d02:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005d06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d08:	4b27      	ldr	r3, [pc, #156]	@ (8005da8 <prvHeapInit+0xac>)
 8005d0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f003 0307 	and.w	r3, r3, #7
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00c      	beq.n	8005d30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	3307      	adds	r3, #7
 8005d1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0307 	bic.w	r3, r3, #7
 8005d22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005da8 <prvHeapInit+0xac>)
 8005d2c:	4413      	add	r3, r2
 8005d2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d34:	4a1d      	ldr	r2, [pc, #116]	@ (8005dac <prvHeapInit+0xb0>)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8005dac <prvHeapInit+0xb0>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	4413      	add	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005d48:	2208      	movs	r2, #8
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	1a9b      	subs	r3, r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0307 	bic.w	r3, r3, #7
 8005d56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4a15      	ldr	r2, [pc, #84]	@ (8005db0 <prvHeapInit+0xb4>)
 8005d5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d5e:	4b14      	ldr	r3, [pc, #80]	@ (8005db0 <prvHeapInit+0xb4>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2200      	movs	r2, #0
 8005d64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d66:	4b12      	ldr	r3, [pc, #72]	@ (8005db0 <prvHeapInit+0xb4>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	1ad2      	subs	r2, r2, r3
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005db0 <prvHeapInit+0xb4>)
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	4a0a      	ldr	r2, [pc, #40]	@ (8005db4 <prvHeapInit+0xb8>)
 8005d8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	4a09      	ldr	r2, [pc, #36]	@ (8005db8 <prvHeapInit+0xbc>)
 8005d92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d94:	4b09      	ldr	r3, [pc, #36]	@ (8005dbc <prvHeapInit+0xc0>)
 8005d96:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005d9a:	601a      	str	r2, [r3, #0]
}
 8005d9c:	bf00      	nop
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	20000c28 	.word	0x20000c28
 8005dac:	20004828 	.word	0x20004828
 8005db0:	20004830 	.word	0x20004830
 8005db4:	20004838 	.word	0x20004838
 8005db8:	20004834 	.word	0x20004834
 8005dbc:	20004844 	.word	0x20004844

08005dc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005dc8:	4b28      	ldr	r3, [pc, #160]	@ (8005e6c <prvInsertBlockIntoFreeList+0xac>)
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	e002      	b.n	8005dd4 <prvInsertBlockIntoFreeList+0x14>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d8f7      	bhi.n	8005dce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	4413      	add	r3, r2
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d108      	bne.n	8005e02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	441a      	add	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	441a      	add	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d118      	bne.n	8005e48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	4b15      	ldr	r3, [pc, #84]	@ (8005e70 <prvInsertBlockIntoFreeList+0xb0>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d00d      	beq.n	8005e3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	441a      	add	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	e008      	b.n	8005e50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e3e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e70 <prvInsertBlockIntoFreeList+0xb0>)
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	e003      	b.n	8005e50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d002      	beq.n	8005e5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e5e:	bf00      	nop
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	20004828 	.word	0x20004828
 8005e70:	20004830 	.word	0x20004830

08005e74 <app_init>:
SemaphoreHandle_t hsem_button;
SemaphoreHandle_t hsem_led;

/********************** external functions definition ************************/
void app_init(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af02      	add	r7, sp, #8
  hsem_button = xSemaphoreCreateBinary();
 8005e7a:	2203      	movs	r2, #3
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	2001      	movs	r0, #1
 8005e80:	f7fe f85a 	bl	8003f38 <xQueueGenericCreate>
 8005e84:	4603      	mov	r3, r0
 8005e86:	4a46      	ldr	r2, [pc, #280]	@ (8005fa0 <app_init+0x12c>)
 8005e88:	6013      	str	r3, [r2, #0]
  while(NULL == hsem_button)
 8005e8a:	bf00      	nop
 8005e8c:	4b44      	ldr	r3, [pc, #272]	@ (8005fa0 <app_init+0x12c>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0fb      	beq.n	8005e8c <app_init+0x18>
  {

  }

  hsem_led = xSemaphoreCreateBinary();
 8005e94:	2203      	movs	r2, #3
 8005e96:	2100      	movs	r1, #0
 8005e98:	2001      	movs	r0, #1
 8005e9a:	f7fe f84d 	bl	8003f38 <xQueueGenericCreate>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	4a40      	ldr	r2, [pc, #256]	@ (8005fa4 <app_init+0x130>)
 8005ea2:	6013      	str	r3, [r2, #0]
  while(NULL == hsem_led)
 8005ea4:	bf00      	nop
 8005ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8005fa4 <app_init+0x130>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0fb      	beq.n	8005ea6 <app_init+0x32>

  }

  BaseType_t status;

  status = xTaskCreate(task_button, "task_button", 128, NULL, tskIDLE_PRIORITY, NULL);
 8005eae:	2300      	movs	r3, #0
 8005eb0:	9301      	str	r3, [sp, #4]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	2280      	movs	r2, #128	@ 0x80
 8005eba:	493b      	ldr	r1, [pc, #236]	@ (8005fa8 <app_init+0x134>)
 8005ebc:	483b      	ldr	r0, [pc, #236]	@ (8005fac <app_init+0x138>)
 8005ebe:	f7fe fc0d 	bl	80046dc <xTaskCreate>
 8005ec2:	6078      	str	r0, [r7, #4]
  while (pdPASS != status)
 8005ec4:	bf00      	nop
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d1fc      	bne.n	8005ec6 <app_init+0x52>
  {
    // error
  }

  status = xTaskCreate(task_ui, "task_ui", 128, NULL, tskIDLE_PRIORITY, NULL);
 8005ecc:	2300      	movs	r3, #0
 8005ece:	9301      	str	r3, [sp, #4]
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	9300      	str	r3, [sp, #0]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	2280      	movs	r2, #128	@ 0x80
 8005ed8:	4935      	ldr	r1, [pc, #212]	@ (8005fb0 <app_init+0x13c>)
 8005eda:	4836      	ldr	r0, [pc, #216]	@ (8005fb4 <app_init+0x140>)
 8005edc:	f7fe fbfe 	bl	80046dc <xTaskCreate>
 8005ee0:	6078      	str	r0, [r7, #4]
  while (pdPASS != status)
 8005ee2:	bf00      	nop
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d1fc      	bne.n	8005ee4 <app_init+0x70>
  {
    // error
  }

  status = xTaskCreate(task_led, "task_led", 128, NULL, tskIDLE_PRIORITY, NULL);
 8005eea:	2300      	movs	r3, #0
 8005eec:	9301      	str	r3, [sp, #4]
 8005eee:	2300      	movs	r3, #0
 8005ef0:	9300      	str	r3, [sp, #0]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	2280      	movs	r2, #128	@ 0x80
 8005ef6:	4930      	ldr	r1, [pc, #192]	@ (8005fb8 <app_init+0x144>)
 8005ef8:	4830      	ldr	r0, [pc, #192]	@ (8005fbc <app_init+0x148>)
 8005efa:	f7fe fbef 	bl	80046dc <xTaskCreate>
 8005efe:	6078      	str	r0, [r7, #4]
  while (pdPASS != status)
 8005f00:	bf00      	nop
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d1fc      	bne.n	8005f02 <app_init+0x8e>
  {
    // error
  }

  LOGGER_INFO("app init");
 8005f08:	f7ff fce6 	bl	80058d8 <vPortEnterCritical>
 8005f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8005fc0 <app_init+0x14c>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a2c      	ldr	r2, [pc, #176]	@ (8005fc4 <app_init+0x150>)
 8005f12:	213f      	movs	r1, #63	@ 0x3f
 8005f14:	4618      	mov	r0, r3
 8005f16:	f000 ffcb 	bl	8006eb0 <sniprintf>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	4a2a      	ldr	r2, [pc, #168]	@ (8005fc8 <app_init+0x154>)
 8005f1e:	6013      	str	r3, [r2, #0]
 8005f20:	4b27      	ldr	r3, [pc, #156]	@ (8005fc0 <app_init+0x14c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 f859 	bl	8005fdc <logger_log_print_>
 8005f2a:	f7ff fd07 	bl	800593c <vPortExitCritical>
 8005f2e:	f7ff fcd3 	bl	80058d8 <vPortEnterCritical>
 8005f32:	4b23      	ldr	r3, [pc, #140]	@ (8005fc0 <app_init+0x14c>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a25      	ldr	r2, [pc, #148]	@ (8005fcc <app_init+0x158>)
 8005f38:	213f      	movs	r1, #63	@ 0x3f
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 ffb8 	bl	8006eb0 <sniprintf>
 8005f40:	4603      	mov	r3, r0
 8005f42:	4a21      	ldr	r2, [pc, #132]	@ (8005fc8 <app_init+0x154>)
 8005f44:	6013      	str	r3, [r2, #0]
 8005f46:	4b1e      	ldr	r3, [pc, #120]	@ (8005fc0 <app_init+0x14c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 f846 	bl	8005fdc <logger_log_print_>
 8005f50:	f7ff fcf4 	bl	800593c <vPortExitCritical>
 8005f54:	f7ff fcc0 	bl	80058d8 <vPortEnterCritical>
 8005f58:	4b19      	ldr	r3, [pc, #100]	@ (8005fc0 <app_init+0x14c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a1c      	ldr	r2, [pc, #112]	@ (8005fd0 <app_init+0x15c>)
 8005f5e:	213f      	movs	r1, #63	@ 0x3f
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 ffa5 	bl	8006eb0 <sniprintf>
 8005f66:	4603      	mov	r3, r0
 8005f68:	4a17      	ldr	r2, [pc, #92]	@ (8005fc8 <app_init+0x154>)
 8005f6a:	6013      	str	r3, [r2, #0]
 8005f6c:	4b14      	ldr	r3, [pc, #80]	@ (8005fc0 <app_init+0x14c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f000 f833 	bl	8005fdc <logger_log_print_>
 8005f76:	f7ff fce1 	bl	800593c <vPortExitCritical>

  cycle_counter_init();
 8005f7a:	4b16      	ldr	r3, [pc, #88]	@ (8005fd4 <app_init+0x160>)
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	4a15      	ldr	r2, [pc, #84]	@ (8005fd4 <app_init+0x160>)
 8005f80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f84:	60d3      	str	r3, [r2, #12]
 8005f86:	4b14      	ldr	r3, [pc, #80]	@ (8005fd8 <app_init+0x164>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	605a      	str	r2, [r3, #4]
 8005f8c:	4b12      	ldr	r3, [pc, #72]	@ (8005fd8 <app_init+0x164>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a11      	ldr	r2, [pc, #68]	@ (8005fd8 <app_init+0x164>)
 8005f92:	f043 0301 	orr.w	r3, r3, #1
 8005f96:	6013      	str	r3, [r2, #0]
}
 8005f98:	bf00      	nop
 8005f9a:	3708      	adds	r7, #8
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	20004848 	.word	0x20004848
 8005fa4:	2000484c 	.word	0x2000484c
 8005fa8:	08007e2c 	.word	0x08007e2c
 8005fac:	08006081 	.word	0x08006081
 8005fb0:	08007e38 	.word	0x08007e38
 8005fb4:	080065a1 	.word	0x080065a1
 8005fb8:	08007e40 	.word	0x08007e40
 8005fbc:	08006325 	.word	0x08006325
 8005fc0:	08007f18 	.word	0x08007f18
 8005fc4:	08007e4c 	.word	0x08007e4c
 8005fc8:	20004890 	.word	0x20004890
 8005fcc:	08007e54 	.word	0x08007e54
 8005fd0:	08007e60 	.word	0x08007e60
 8005fd4:	e000edf0 	.word	0xe000edf0
 8005fd8:	e0001000 	.word	0xe0001000

08005fdc <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
	printf(msg);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 ff51 	bl	8006e8c <iprintf>
	fflush(stdout);
 8005fea:	4b05      	ldr	r3, [pc, #20]	@ (8006000 <logger_log_print_+0x24>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f000 fe75 	bl	8006ce0 <fflush>
}
 8005ff6:	bf00      	nop
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000024 	.word	0x20000024

08006004 <button_init_>:
{
    uint32_t counter;
} button;

static void button_init_(void)
{
 8006004:	b480      	push	{r7}
 8006006:	af00      	add	r7, sp, #0
  button.counter = 0;
 8006008:	4b03      	ldr	r3, [pc, #12]	@ (8006018 <button_init_+0x14>)
 800600a:	2200      	movs	r2, #0
 800600c:	601a      	str	r2, [r3, #0]
}
 800600e:	bf00      	nop
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	20004894 	.word	0x20004894

0800601c <button_process_state_>:

static button_type_t button_process_state_(bool value)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	4603      	mov	r3, r0
 8006024:	71fb      	strb	r3, [r7, #7]
  button_type_t ret = BUTTON_TYPE_NONE;
 8006026:	2300      	movs	r3, #0
 8006028:	73fb      	strb	r3, [r7, #15]
  if(value)
 800602a:	79fb      	ldrb	r3, [r7, #7]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <button_process_state_+0x20>
  {
    button.counter += BUTTON_PERIOD_MS_;
 8006030:	4b12      	ldr	r3, [pc, #72]	@ (800607c <button_process_state_+0x60>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3332      	adds	r3, #50	@ 0x32
 8006036:	4a11      	ldr	r2, [pc, #68]	@ (800607c <button_process_state_+0x60>)
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	e018      	b.n	800606e <button_process_state_+0x52>
  }
  else
  {
    if(BUTTON_LONG_TIMEOUT_ <= button.counter)
 800603c:	4b0f      	ldr	r3, [pc, #60]	@ (800607c <button_process_state_+0x60>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8006044:	d302      	bcc.n	800604c <button_process_state_+0x30>
    {
      ret = BUTTON_TYPE_LONG;
 8006046:	2303      	movs	r3, #3
 8006048:	73fb      	strb	r3, [r7, #15]
 800604a:	e00d      	b.n	8006068 <button_process_state_+0x4c>
    }
    else if(BUTTON_SHORT_TIMEOUT_ <= button.counter)
 800604c:	4b0b      	ldr	r3, [pc, #44]	@ (800607c <button_process_state_+0x60>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006054:	d302      	bcc.n	800605c <button_process_state_+0x40>
    {
      ret = BUTTON_TYPE_SHORT;
 8006056:	2302      	movs	r3, #2
 8006058:	73fb      	strb	r3, [r7, #15]
 800605a:	e005      	b.n	8006068 <button_process_state_+0x4c>
    }
    else if(BUTTON_PULSE_TIMEOUT_ <= button.counter)
 800605c:	4b07      	ldr	r3, [pc, #28]	@ (800607c <button_process_state_+0x60>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2bc7      	cmp	r3, #199	@ 0xc7
 8006062:	d901      	bls.n	8006068 <button_process_state_+0x4c>
    {
      ret = BUTTON_TYPE_PULSE;
 8006064:	2301      	movs	r3, #1
 8006066:	73fb      	strb	r3, [r7, #15]
    }
    button.counter = 0;
 8006068:	4b04      	ldr	r3, [pc, #16]	@ (800607c <button_process_state_+0x60>)
 800606a:	2200      	movs	r2, #0
 800606c:	601a      	str	r2, [r3, #0]
  }
  return ret;
 800606e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	20004894 	.word	0x20004894

08006080 <task_button>:

/********************** external functions definition ************************/

void task_button(void* argument)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  button_init_();
 8006088:	f7ff ffbc 	bl	8006004 <button_init_>

  while(true)
  {
    GPIO_PinState button_state;
    button_state = HAL_GPIO_ReadPin(BUTTON_PORT, BUTTON_PIN);
 800608c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006090:	4889      	ldr	r0, [pc, #548]	@ (80062b8 <task_button+0x238>)
 8006092:	f7fb fde9 	bl	8001c68 <HAL_GPIO_ReadPin>
 8006096:	4603      	mov	r3, r0
 8006098:	73fb      	strb	r3, [r7, #15]

    button_type_t button_type;
    button_type = button_process_state_(button_state);
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	2b00      	cmp	r3, #0
 800609e:	bf14      	ite	ne
 80060a0:	2301      	movne	r3, #1
 80060a2:	2300      	moveq	r3, #0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7ff ffb8 	bl	800601c <button_process_state_>
 80060ac:	4603      	mov	r3, r0
 80060ae:	73bb      	strb	r3, [r7, #14]

    switch (button_type) {
 80060b0:	7bbb      	ldrb	r3, [r7, #14]
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	f200 80c1 	bhi.w	800623a <task_button+0x1ba>
 80060b8:	a201      	add	r2, pc, #4	@ (adr r2, 80060c0 <task_button+0x40>)
 80060ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060be:	bf00      	nop
 80060c0:	080062af 	.word	0x080062af
 80060c4:	080060d1 	.word	0x080060d1
 80060c8:	08006153 	.word	0x08006153
 80060cc:	080061c7 	.word	0x080061c7
      case BUTTON_TYPE_NONE:
        break;
      case BUTTON_TYPE_PULSE:
        LOGGER_INFO("button pulse");
 80060d0:	f7ff fc02 	bl	80058d8 <vPortEnterCritical>
 80060d4:	4b79      	ldr	r3, [pc, #484]	@ (80062bc <task_button+0x23c>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a79      	ldr	r2, [pc, #484]	@ (80062c0 <task_button+0x240>)
 80060da:	213f      	movs	r1, #63	@ 0x3f
 80060dc:	4618      	mov	r0, r3
 80060de:	f000 fee7 	bl	8006eb0 <sniprintf>
 80060e2:	4603      	mov	r3, r0
 80060e4:	4a77      	ldr	r2, [pc, #476]	@ (80062c4 <task_button+0x244>)
 80060e6:	6013      	str	r3, [r2, #0]
 80060e8:	4b74      	ldr	r3, [pc, #464]	@ (80062bc <task_button+0x23c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7ff ff75 	bl	8005fdc <logger_log_print_>
 80060f2:	f7ff fc23 	bl	800593c <vPortExitCritical>
 80060f6:	f7ff fbef 	bl	80058d8 <vPortEnterCritical>
 80060fa:	4b70      	ldr	r3, [pc, #448]	@ (80062bc <task_button+0x23c>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a72      	ldr	r2, [pc, #456]	@ (80062c8 <task_button+0x248>)
 8006100:	213f      	movs	r1, #63	@ 0x3f
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fed4 	bl	8006eb0 <sniprintf>
 8006108:	4603      	mov	r3, r0
 800610a:	4a6e      	ldr	r2, [pc, #440]	@ (80062c4 <task_button+0x244>)
 800610c:	6013      	str	r3, [r2, #0]
 800610e:	4b6b      	ldr	r3, [pc, #428]	@ (80062bc <task_button+0x23c>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4618      	mov	r0, r3
 8006114:	f7ff ff62 	bl	8005fdc <logger_log_print_>
 8006118:	f7ff fc10 	bl	800593c <vPortExitCritical>
 800611c:	f7ff fbdc 	bl	80058d8 <vPortEnterCritical>
 8006120:	4b66      	ldr	r3, [pc, #408]	@ (80062bc <task_button+0x23c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a69      	ldr	r2, [pc, #420]	@ (80062cc <task_button+0x24c>)
 8006126:	213f      	movs	r1, #63	@ 0x3f
 8006128:	4618      	mov	r0, r3
 800612a:	f000 fec1 	bl	8006eb0 <sniprintf>
 800612e:	4603      	mov	r3, r0
 8006130:	4a64      	ldr	r2, [pc, #400]	@ (80062c4 <task_button+0x244>)
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	4b61      	ldr	r3, [pc, #388]	@ (80062bc <task_button+0x23c>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4618      	mov	r0, r3
 800613a:	f7ff ff4f 	bl	8005fdc <logger_log_print_>
 800613e:	f7ff fbfd 	bl	800593c <vPortExitCritical>
        xSemaphoreGive(hsem_button);
 8006142:	4b63      	ldr	r3, [pc, #396]	@ (80062d0 <task_button+0x250>)
 8006144:	6818      	ldr	r0, [r3, #0]
 8006146:	2300      	movs	r3, #0
 8006148:	2200      	movs	r2, #0
 800614a:	2100      	movs	r1, #0
 800614c:	f7fd ff52 	bl	8003ff4 <xQueueGenericSend>
        break;
 8006150:	e0ae      	b.n	80062b0 <task_button+0x230>
      case BUTTON_TYPE_SHORT:
        LOGGER_INFO("button short");
 8006152:	f7ff fbc1 	bl	80058d8 <vPortEnterCritical>
 8006156:	4b59      	ldr	r3, [pc, #356]	@ (80062bc <task_button+0x23c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a59      	ldr	r2, [pc, #356]	@ (80062c0 <task_button+0x240>)
 800615c:	213f      	movs	r1, #63	@ 0x3f
 800615e:	4618      	mov	r0, r3
 8006160:	f000 fea6 	bl	8006eb0 <sniprintf>
 8006164:	4603      	mov	r3, r0
 8006166:	4a57      	ldr	r2, [pc, #348]	@ (80062c4 <task_button+0x244>)
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	4b54      	ldr	r3, [pc, #336]	@ (80062bc <task_button+0x23c>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4618      	mov	r0, r3
 8006170:	f7ff ff34 	bl	8005fdc <logger_log_print_>
 8006174:	f7ff fbe2 	bl	800593c <vPortExitCritical>
 8006178:	f7ff fbae 	bl	80058d8 <vPortEnterCritical>
 800617c:	4b4f      	ldr	r3, [pc, #316]	@ (80062bc <task_button+0x23c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a54      	ldr	r2, [pc, #336]	@ (80062d4 <task_button+0x254>)
 8006182:	213f      	movs	r1, #63	@ 0x3f
 8006184:	4618      	mov	r0, r3
 8006186:	f000 fe93 	bl	8006eb0 <sniprintf>
 800618a:	4603      	mov	r3, r0
 800618c:	4a4d      	ldr	r2, [pc, #308]	@ (80062c4 <task_button+0x244>)
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	4b4a      	ldr	r3, [pc, #296]	@ (80062bc <task_button+0x23c>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4618      	mov	r0, r3
 8006196:	f7ff ff21 	bl	8005fdc <logger_log_print_>
 800619a:	f7ff fbcf 	bl	800593c <vPortExitCritical>
 800619e:	f7ff fb9b 	bl	80058d8 <vPortEnterCritical>
 80061a2:	4b46      	ldr	r3, [pc, #280]	@ (80062bc <task_button+0x23c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a49      	ldr	r2, [pc, #292]	@ (80062cc <task_button+0x24c>)
 80061a8:	213f      	movs	r1, #63	@ 0x3f
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 fe80 	bl	8006eb0 <sniprintf>
 80061b0:	4603      	mov	r3, r0
 80061b2:	4a44      	ldr	r2, [pc, #272]	@ (80062c4 <task_button+0x244>)
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	4b41      	ldr	r3, [pc, #260]	@ (80062bc <task_button+0x23c>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff ff0e 	bl	8005fdc <logger_log_print_>
 80061c0:	f7ff fbbc 	bl	800593c <vPortExitCritical>
        break;
 80061c4:	e074      	b.n	80062b0 <task_button+0x230>
      case BUTTON_TYPE_LONG:
        LOGGER_INFO("button long");
 80061c6:	f7ff fb87 	bl	80058d8 <vPortEnterCritical>
 80061ca:	4b3c      	ldr	r3, [pc, #240]	@ (80062bc <task_button+0x23c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a3c      	ldr	r2, [pc, #240]	@ (80062c0 <task_button+0x240>)
 80061d0:	213f      	movs	r1, #63	@ 0x3f
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fe6c 	bl	8006eb0 <sniprintf>
 80061d8:	4603      	mov	r3, r0
 80061da:	4a3a      	ldr	r2, [pc, #232]	@ (80062c4 <task_button+0x244>)
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	4b37      	ldr	r3, [pc, #220]	@ (80062bc <task_button+0x23c>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff fefa 	bl	8005fdc <logger_log_print_>
 80061e8:	f7ff fba8 	bl	800593c <vPortExitCritical>
 80061ec:	f7ff fb74 	bl	80058d8 <vPortEnterCritical>
 80061f0:	4b32      	ldr	r3, [pc, #200]	@ (80062bc <task_button+0x23c>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a38      	ldr	r2, [pc, #224]	@ (80062d8 <task_button+0x258>)
 80061f6:	213f      	movs	r1, #63	@ 0x3f
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 fe59 	bl	8006eb0 <sniprintf>
 80061fe:	4603      	mov	r3, r0
 8006200:	4a30      	ldr	r2, [pc, #192]	@ (80062c4 <task_button+0x244>)
 8006202:	6013      	str	r3, [r2, #0]
 8006204:	4b2d      	ldr	r3, [pc, #180]	@ (80062bc <task_button+0x23c>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff fee7 	bl	8005fdc <logger_log_print_>
 800620e:	f7ff fb95 	bl	800593c <vPortExitCritical>
 8006212:	f7ff fb61 	bl	80058d8 <vPortEnterCritical>
 8006216:	4b29      	ldr	r3, [pc, #164]	@ (80062bc <task_button+0x23c>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a2c      	ldr	r2, [pc, #176]	@ (80062cc <task_button+0x24c>)
 800621c:	213f      	movs	r1, #63	@ 0x3f
 800621e:	4618      	mov	r0, r3
 8006220:	f000 fe46 	bl	8006eb0 <sniprintf>
 8006224:	4603      	mov	r3, r0
 8006226:	4a27      	ldr	r2, [pc, #156]	@ (80062c4 <task_button+0x244>)
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	4b24      	ldr	r3, [pc, #144]	@ (80062bc <task_button+0x23c>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4618      	mov	r0, r3
 8006230:	f7ff fed4 	bl	8005fdc <logger_log_print_>
 8006234:	f7ff fb82 	bl	800593c <vPortExitCritical>
        break;
 8006238:	e03a      	b.n	80062b0 <task_button+0x230>
      default:
        LOGGER_INFO("button error");
 800623a:	f7ff fb4d 	bl	80058d8 <vPortEnterCritical>
 800623e:	4b1f      	ldr	r3, [pc, #124]	@ (80062bc <task_button+0x23c>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a1f      	ldr	r2, [pc, #124]	@ (80062c0 <task_button+0x240>)
 8006244:	213f      	movs	r1, #63	@ 0x3f
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fe32 	bl	8006eb0 <sniprintf>
 800624c:	4603      	mov	r3, r0
 800624e:	4a1d      	ldr	r2, [pc, #116]	@ (80062c4 <task_button+0x244>)
 8006250:	6013      	str	r3, [r2, #0]
 8006252:	4b1a      	ldr	r3, [pc, #104]	@ (80062bc <task_button+0x23c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4618      	mov	r0, r3
 8006258:	f7ff fec0 	bl	8005fdc <logger_log_print_>
 800625c:	f7ff fb6e 	bl	800593c <vPortExitCritical>
 8006260:	f7ff fb3a 	bl	80058d8 <vPortEnterCritical>
 8006264:	4b15      	ldr	r3, [pc, #84]	@ (80062bc <task_button+0x23c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a1c      	ldr	r2, [pc, #112]	@ (80062dc <task_button+0x25c>)
 800626a:	213f      	movs	r1, #63	@ 0x3f
 800626c:	4618      	mov	r0, r3
 800626e:	f000 fe1f 	bl	8006eb0 <sniprintf>
 8006272:	4603      	mov	r3, r0
 8006274:	4a13      	ldr	r2, [pc, #76]	@ (80062c4 <task_button+0x244>)
 8006276:	6013      	str	r3, [r2, #0]
 8006278:	4b10      	ldr	r3, [pc, #64]	@ (80062bc <task_button+0x23c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4618      	mov	r0, r3
 800627e:	f7ff fead 	bl	8005fdc <logger_log_print_>
 8006282:	f7ff fb5b 	bl	800593c <vPortExitCritical>
 8006286:	f7ff fb27 	bl	80058d8 <vPortEnterCritical>
 800628a:	4b0c      	ldr	r3, [pc, #48]	@ (80062bc <task_button+0x23c>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a0f      	ldr	r2, [pc, #60]	@ (80062cc <task_button+0x24c>)
 8006290:	213f      	movs	r1, #63	@ 0x3f
 8006292:	4618      	mov	r0, r3
 8006294:	f000 fe0c 	bl	8006eb0 <sniprintf>
 8006298:	4603      	mov	r3, r0
 800629a:	4a0a      	ldr	r2, [pc, #40]	@ (80062c4 <task_button+0x244>)
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	4b07      	ldr	r3, [pc, #28]	@ (80062bc <task_button+0x23c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7ff fe9a 	bl	8005fdc <logger_log_print_>
 80062a8:	f7ff fb48 	bl	800593c <vPortExitCritical>
        break;
 80062ac:	e000      	b.n	80062b0 <task_button+0x230>
        break;
 80062ae:	bf00      	nop
    }

    vTaskDelay((TickType_t)(TASK_PERIOD_MS_ / portTICK_PERIOD_MS));
 80062b0:	2032      	movs	r0, #50	@ 0x32
 80062b2:	f7fe fb5d 	bl	8004970 <vTaskDelay>
  {
 80062b6:	e6e9      	b.n	800608c <task_button+0xc>
 80062b8:	40020800 	.word	0x40020800
 80062bc:	08007f18 	.word	0x08007f18
 80062c0:	08007e64 	.word	0x08007e64
 80062c4:	20004890 	.word	0x20004890
 80062c8:	08007e6c 	.word	0x08007e6c
 80062cc:	08007e7c 	.word	0x08007e7c
 80062d0:	20004848 	.word	0x20004848
 80062d4:	08007e80 	.word	0x08007e80
 80062d8:	08007e90 	.word	0x08007e90
 80062dc:	08007e9c 	.word	0x08007e9c

080062e0 <led_set_colors>:
extern SemaphoreHandle_t hsem_led;

/********************** internal functions definition ************************/

void led_set_colors(bool r, bool g, bool b)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	4603      	mov	r3, r0
 80062e8:	71fb      	strb	r3, [r7, #7]
 80062ea:	460b      	mov	r3, r1
 80062ec:	71bb      	strb	r3, [r7, #6]
 80062ee:	4613      	mov	r3, r2
 80062f0:	717b      	strb	r3, [r7, #5]
  HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, r ? GPIO_PIN_SET: GPIO_PIN_RESET);
 80062f2:	79fb      	ldrb	r3, [r7, #7]
 80062f4:	461a      	mov	r2, r3
 80062f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80062fa:	4809      	ldr	r0, [pc, #36]	@ (8006320 <led_set_colors+0x40>)
 80062fc:	f7fb fccc 	bl	8001c98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, g ? GPIO_PIN_SET: GPIO_PIN_RESET);
 8006300:	79bb      	ldrb	r3, [r7, #6]
 8006302:	461a      	mov	r2, r3
 8006304:	2101      	movs	r1, #1
 8006306:	4806      	ldr	r0, [pc, #24]	@ (8006320 <led_set_colors+0x40>)
 8006308:	f7fb fcc6 	bl	8001c98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, b ? GPIO_PIN_SET: GPIO_PIN_RESET);
 800630c:	797b      	ldrb	r3, [r7, #5]
 800630e:	461a      	mov	r2, r3
 8006310:	2180      	movs	r1, #128	@ 0x80
 8006312:	4803      	ldr	r0, [pc, #12]	@ (8006320 <led_set_colors+0x40>)
 8006314:	f7fb fcc0 	bl	8001c98 <HAL_GPIO_WritePin>
}
 8006318:	bf00      	nop
 800631a:	3708      	adds	r7, #8
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	40020400 	.word	0x40020400

08006324 <task_led>:

/********************** external functions definition ************************/

void task_led(void *argument)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  while (true)
  {
    led_color_t color;

    if(pdTRUE == xSemaphoreTake(hsem_led, 0))
 800632c:	4b93      	ldr	r3, [pc, #588]	@ (800657c <task_led+0x258>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2100      	movs	r1, #0
 8006332:	4618      	mov	r0, r3
 8006334:	f7fd ff60 	bl	80041f8 <xQueueSemaphoreTake>
 8006338:	4603      	mov	r3, r0
 800633a:	2b01      	cmp	r3, #1
 800633c:	d102      	bne.n	8006344 <task_led+0x20>
    {
      color = LED_COLOR_RED;
 800633e:	2301      	movs	r3, #1
 8006340:	73fb      	strb	r3, [r7, #15]
 8006342:	e001      	b.n	8006348 <task_led+0x24>
    }
    else
    {
      color = LED_COLOR_NONE;
 8006344:	2300      	movs	r3, #0
 8006346:	73fb      	strb	r3, [r7, #15]
    }

    switch (color)
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	2b04      	cmp	r3, #4
 800634c:	f200 8110 	bhi.w	8006570 <task_led+0x24c>
 8006350:	a201      	add	r2, pc, #4	@ (adr r2, 8006358 <task_led+0x34>)
 8006352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006356:	bf00      	nop
 8006358:	0800636d 	.word	0x0800636d
 800635c:	08006379 	.word	0x08006379
 8006360:	080063f7 	.word	0x080063f7
 8006364:	08006475 	.word	0x08006475
 8006368:	080064f3 	.word	0x080064f3
    {
      case LED_COLOR_NONE:
        led_set_colors(false, false, false);
 800636c:	2200      	movs	r2, #0
 800636e:	2100      	movs	r1, #0
 8006370:	2000      	movs	r0, #0
 8006372:	f7ff ffb5 	bl	80062e0 <led_set_colors>
        break;
 8006376:	e0fc      	b.n	8006572 <task_led+0x24e>
      case LED_COLOR_RED:
        LOGGER_INFO("led red");
 8006378:	f7ff faae 	bl	80058d8 <vPortEnterCritical>
 800637c:	4b80      	ldr	r3, [pc, #512]	@ (8006580 <task_led+0x25c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a80      	ldr	r2, [pc, #512]	@ (8006584 <task_led+0x260>)
 8006382:	213f      	movs	r1, #63	@ 0x3f
 8006384:	4618      	mov	r0, r3
 8006386:	f000 fd93 	bl	8006eb0 <sniprintf>
 800638a:	4603      	mov	r3, r0
 800638c:	4a7e      	ldr	r2, [pc, #504]	@ (8006588 <task_led+0x264>)
 800638e:	6013      	str	r3, [r2, #0]
 8006390:	4b7b      	ldr	r3, [pc, #492]	@ (8006580 <task_led+0x25c>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4618      	mov	r0, r3
 8006396:	f7ff fe21 	bl	8005fdc <logger_log_print_>
 800639a:	f7ff facf 	bl	800593c <vPortExitCritical>
 800639e:	f7ff fa9b 	bl	80058d8 <vPortEnterCritical>
 80063a2:	4b77      	ldr	r3, [pc, #476]	@ (8006580 <task_led+0x25c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a79      	ldr	r2, [pc, #484]	@ (800658c <task_led+0x268>)
 80063a8:	213f      	movs	r1, #63	@ 0x3f
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 fd80 	bl	8006eb0 <sniprintf>
 80063b0:	4603      	mov	r3, r0
 80063b2:	4a75      	ldr	r2, [pc, #468]	@ (8006588 <task_led+0x264>)
 80063b4:	6013      	str	r3, [r2, #0]
 80063b6:	4b72      	ldr	r3, [pc, #456]	@ (8006580 <task_led+0x25c>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7ff fe0e 	bl	8005fdc <logger_log_print_>
 80063c0:	f7ff fabc 	bl	800593c <vPortExitCritical>
 80063c4:	f7ff fa88 	bl	80058d8 <vPortEnterCritical>
 80063c8:	4b6d      	ldr	r3, [pc, #436]	@ (8006580 <task_led+0x25c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a70      	ldr	r2, [pc, #448]	@ (8006590 <task_led+0x26c>)
 80063ce:	213f      	movs	r1, #63	@ 0x3f
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fd6d 	bl	8006eb0 <sniprintf>
 80063d6:	4603      	mov	r3, r0
 80063d8:	4a6b      	ldr	r2, [pc, #428]	@ (8006588 <task_led+0x264>)
 80063da:	6013      	str	r3, [r2, #0]
 80063dc:	4b68      	ldr	r3, [pc, #416]	@ (8006580 <task_led+0x25c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff fdfb 	bl	8005fdc <logger_log_print_>
 80063e6:	f7ff faa9 	bl	800593c <vPortExitCritical>
        led_set_colors(true, false, false);
 80063ea:	2200      	movs	r2, #0
 80063ec:	2100      	movs	r1, #0
 80063ee:	2001      	movs	r0, #1
 80063f0:	f7ff ff76 	bl	80062e0 <led_set_colors>
        break;
 80063f4:	e0bd      	b.n	8006572 <task_led+0x24e>
      case LED_COLOR_GREEN:
        LOGGER_INFO("led green");
 80063f6:	f7ff fa6f 	bl	80058d8 <vPortEnterCritical>
 80063fa:	4b61      	ldr	r3, [pc, #388]	@ (8006580 <task_led+0x25c>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a61      	ldr	r2, [pc, #388]	@ (8006584 <task_led+0x260>)
 8006400:	213f      	movs	r1, #63	@ 0x3f
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fd54 	bl	8006eb0 <sniprintf>
 8006408:	4603      	mov	r3, r0
 800640a:	4a5f      	ldr	r2, [pc, #380]	@ (8006588 <task_led+0x264>)
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	4b5c      	ldr	r3, [pc, #368]	@ (8006580 <task_led+0x25c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4618      	mov	r0, r3
 8006414:	f7ff fde2 	bl	8005fdc <logger_log_print_>
 8006418:	f7ff fa90 	bl	800593c <vPortExitCritical>
 800641c:	f7ff fa5c 	bl	80058d8 <vPortEnterCritical>
 8006420:	4b57      	ldr	r3, [pc, #348]	@ (8006580 <task_led+0x25c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a5b      	ldr	r2, [pc, #364]	@ (8006594 <task_led+0x270>)
 8006426:	213f      	movs	r1, #63	@ 0x3f
 8006428:	4618      	mov	r0, r3
 800642a:	f000 fd41 	bl	8006eb0 <sniprintf>
 800642e:	4603      	mov	r3, r0
 8006430:	4a55      	ldr	r2, [pc, #340]	@ (8006588 <task_led+0x264>)
 8006432:	6013      	str	r3, [r2, #0]
 8006434:	4b52      	ldr	r3, [pc, #328]	@ (8006580 <task_led+0x25c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4618      	mov	r0, r3
 800643a:	f7ff fdcf 	bl	8005fdc <logger_log_print_>
 800643e:	f7ff fa7d 	bl	800593c <vPortExitCritical>
 8006442:	f7ff fa49 	bl	80058d8 <vPortEnterCritical>
 8006446:	4b4e      	ldr	r3, [pc, #312]	@ (8006580 <task_led+0x25c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a51      	ldr	r2, [pc, #324]	@ (8006590 <task_led+0x26c>)
 800644c:	213f      	movs	r1, #63	@ 0x3f
 800644e:	4618      	mov	r0, r3
 8006450:	f000 fd2e 	bl	8006eb0 <sniprintf>
 8006454:	4603      	mov	r3, r0
 8006456:	4a4c      	ldr	r2, [pc, #304]	@ (8006588 <task_led+0x264>)
 8006458:	6013      	str	r3, [r2, #0]
 800645a:	4b49      	ldr	r3, [pc, #292]	@ (8006580 <task_led+0x25c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4618      	mov	r0, r3
 8006460:	f7ff fdbc 	bl	8005fdc <logger_log_print_>
 8006464:	f7ff fa6a 	bl	800593c <vPortExitCritical>
        led_set_colors(false, true, false);
 8006468:	2200      	movs	r2, #0
 800646a:	2101      	movs	r1, #1
 800646c:	2000      	movs	r0, #0
 800646e:	f7ff ff37 	bl	80062e0 <led_set_colors>
        break;
 8006472:	e07e      	b.n	8006572 <task_led+0x24e>
      case LED_COLOR_BLUE:
        LOGGER_INFO("led blue");
 8006474:	f7ff fa30 	bl	80058d8 <vPortEnterCritical>
 8006478:	4b41      	ldr	r3, [pc, #260]	@ (8006580 <task_led+0x25c>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a41      	ldr	r2, [pc, #260]	@ (8006584 <task_led+0x260>)
 800647e:	213f      	movs	r1, #63	@ 0x3f
 8006480:	4618      	mov	r0, r3
 8006482:	f000 fd15 	bl	8006eb0 <sniprintf>
 8006486:	4603      	mov	r3, r0
 8006488:	4a3f      	ldr	r2, [pc, #252]	@ (8006588 <task_led+0x264>)
 800648a:	6013      	str	r3, [r2, #0]
 800648c:	4b3c      	ldr	r3, [pc, #240]	@ (8006580 <task_led+0x25c>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4618      	mov	r0, r3
 8006492:	f7ff fda3 	bl	8005fdc <logger_log_print_>
 8006496:	f7ff fa51 	bl	800593c <vPortExitCritical>
 800649a:	f7ff fa1d 	bl	80058d8 <vPortEnterCritical>
 800649e:	4b38      	ldr	r3, [pc, #224]	@ (8006580 <task_led+0x25c>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a3d      	ldr	r2, [pc, #244]	@ (8006598 <task_led+0x274>)
 80064a4:	213f      	movs	r1, #63	@ 0x3f
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 fd02 	bl	8006eb0 <sniprintf>
 80064ac:	4603      	mov	r3, r0
 80064ae:	4a36      	ldr	r2, [pc, #216]	@ (8006588 <task_led+0x264>)
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	4b33      	ldr	r3, [pc, #204]	@ (8006580 <task_led+0x25c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7ff fd90 	bl	8005fdc <logger_log_print_>
 80064bc:	f7ff fa3e 	bl	800593c <vPortExitCritical>
 80064c0:	f7ff fa0a 	bl	80058d8 <vPortEnterCritical>
 80064c4:	4b2e      	ldr	r3, [pc, #184]	@ (8006580 <task_led+0x25c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a31      	ldr	r2, [pc, #196]	@ (8006590 <task_led+0x26c>)
 80064ca:	213f      	movs	r1, #63	@ 0x3f
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fcef 	bl	8006eb0 <sniprintf>
 80064d2:	4603      	mov	r3, r0
 80064d4:	4a2c      	ldr	r2, [pc, #176]	@ (8006588 <task_led+0x264>)
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	4b29      	ldr	r3, [pc, #164]	@ (8006580 <task_led+0x25c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4618      	mov	r0, r3
 80064de:	f7ff fd7d 	bl	8005fdc <logger_log_print_>
 80064e2:	f7ff fa2b 	bl	800593c <vPortExitCritical>
        led_set_colors(false, false, true);
 80064e6:	2201      	movs	r2, #1
 80064e8:	2100      	movs	r1, #0
 80064ea:	2000      	movs	r0, #0
 80064ec:	f7ff fef8 	bl	80062e0 <led_set_colors>
        break;
 80064f0:	e03f      	b.n	8006572 <task_led+0x24e>
      case LED_COLOR_WHITE:
        LOGGER_INFO("led white");
 80064f2:	f7ff f9f1 	bl	80058d8 <vPortEnterCritical>
 80064f6:	4b22      	ldr	r3, [pc, #136]	@ (8006580 <task_led+0x25c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a22      	ldr	r2, [pc, #136]	@ (8006584 <task_led+0x260>)
 80064fc:	213f      	movs	r1, #63	@ 0x3f
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 fcd6 	bl	8006eb0 <sniprintf>
 8006504:	4603      	mov	r3, r0
 8006506:	4a20      	ldr	r2, [pc, #128]	@ (8006588 <task_led+0x264>)
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	4b1d      	ldr	r3, [pc, #116]	@ (8006580 <task_led+0x25c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4618      	mov	r0, r3
 8006510:	f7ff fd64 	bl	8005fdc <logger_log_print_>
 8006514:	f7ff fa12 	bl	800593c <vPortExitCritical>
 8006518:	f7ff f9de 	bl	80058d8 <vPortEnterCritical>
 800651c:	4b18      	ldr	r3, [pc, #96]	@ (8006580 <task_led+0x25c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1e      	ldr	r2, [pc, #120]	@ (800659c <task_led+0x278>)
 8006522:	213f      	movs	r1, #63	@ 0x3f
 8006524:	4618      	mov	r0, r3
 8006526:	f000 fcc3 	bl	8006eb0 <sniprintf>
 800652a:	4603      	mov	r3, r0
 800652c:	4a16      	ldr	r2, [pc, #88]	@ (8006588 <task_led+0x264>)
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	4b13      	ldr	r3, [pc, #76]	@ (8006580 <task_led+0x25c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4618      	mov	r0, r3
 8006536:	f7ff fd51 	bl	8005fdc <logger_log_print_>
 800653a:	f7ff f9ff 	bl	800593c <vPortExitCritical>
 800653e:	f7ff f9cb 	bl	80058d8 <vPortEnterCritical>
 8006542:	4b0f      	ldr	r3, [pc, #60]	@ (8006580 <task_led+0x25c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a12      	ldr	r2, [pc, #72]	@ (8006590 <task_led+0x26c>)
 8006548:	213f      	movs	r1, #63	@ 0x3f
 800654a:	4618      	mov	r0, r3
 800654c:	f000 fcb0 	bl	8006eb0 <sniprintf>
 8006550:	4603      	mov	r3, r0
 8006552:	4a0d      	ldr	r2, [pc, #52]	@ (8006588 <task_led+0x264>)
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	4b0a      	ldr	r3, [pc, #40]	@ (8006580 <task_led+0x25c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4618      	mov	r0, r3
 800655c:	f7ff fd3e 	bl	8005fdc <logger_log_print_>
 8006560:	f7ff f9ec 	bl	800593c <vPortExitCritical>
        led_set_colors(true, true, true);
 8006564:	2201      	movs	r2, #1
 8006566:	2101      	movs	r1, #1
 8006568:	2001      	movs	r0, #1
 800656a:	f7ff feb9 	bl	80062e0 <led_set_colors>
        break;
 800656e:	e000      	b.n	8006572 <task_led+0x24e>
      default:
        break;
 8006570:	bf00      	nop
    }

    vTaskDelay((TickType_t)(TASK_PERIOD_MS_ / portTICK_PERIOD_MS));
 8006572:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006576:	f7fe f9fb 	bl	8004970 <vTaskDelay>
  {
 800657a:	e6d7      	b.n	800632c <task_led+0x8>
 800657c:	2000484c 	.word	0x2000484c
 8006580:	08007f18 	.word	0x08007f18
 8006584:	08007eac 	.word	0x08007eac
 8006588:	20004890 	.word	0x20004890
 800658c:	08007eb4 	.word	0x08007eb4
 8006590:	08007ebc 	.word	0x08007ebc
 8006594:	08007ec0 	.word	0x08007ec0
 8006598:	08007ecc 	.word	0x08007ecc
 800659c:	08007ed8 	.word	0x08007ed8

080065a0 <task_ui>:
/********************** internal functions definition ************************/

/********************** external functions definition ************************/

void task_ui(void *argument)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b082      	sub	sp, #8
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  while (true)
  {
    if(pdTRUE == xSemaphoreTake(hsem_button, portMAX_DELAY))
 80065a8:	4b25      	ldr	r3, [pc, #148]	@ (8006640 <task_ui+0xa0>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f04f 31ff 	mov.w	r1, #4294967295
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fd fe21 	bl	80041f8 <xQueueSemaphoreTake>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d1f5      	bne.n	80065a8 <task_ui+0x8>
    {
      LOGGER_INFO("ui led activate");
 80065bc:	f7ff f98c 	bl	80058d8 <vPortEnterCritical>
 80065c0:	4b20      	ldr	r3, [pc, #128]	@ (8006644 <task_ui+0xa4>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a20      	ldr	r2, [pc, #128]	@ (8006648 <task_ui+0xa8>)
 80065c6:	213f      	movs	r1, #63	@ 0x3f
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 fc71 	bl	8006eb0 <sniprintf>
 80065ce:	4603      	mov	r3, r0
 80065d0:	4a1e      	ldr	r2, [pc, #120]	@ (800664c <task_ui+0xac>)
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006644 <task_ui+0xa4>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4618      	mov	r0, r3
 80065da:	f7ff fcff 	bl	8005fdc <logger_log_print_>
 80065de:	f7ff f9ad 	bl	800593c <vPortExitCritical>
 80065e2:	f7ff f979 	bl	80058d8 <vPortEnterCritical>
 80065e6:	4b17      	ldr	r3, [pc, #92]	@ (8006644 <task_ui+0xa4>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a19      	ldr	r2, [pc, #100]	@ (8006650 <task_ui+0xb0>)
 80065ec:	213f      	movs	r1, #63	@ 0x3f
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 fc5e 	bl	8006eb0 <sniprintf>
 80065f4:	4603      	mov	r3, r0
 80065f6:	4a15      	ldr	r2, [pc, #84]	@ (800664c <task_ui+0xac>)
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	4b12      	ldr	r3, [pc, #72]	@ (8006644 <task_ui+0xa4>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4618      	mov	r0, r3
 8006600:	f7ff fcec 	bl	8005fdc <logger_log_print_>
 8006604:	f7ff f99a 	bl	800593c <vPortExitCritical>
 8006608:	f7ff f966 	bl	80058d8 <vPortEnterCritical>
 800660c:	4b0d      	ldr	r3, [pc, #52]	@ (8006644 <task_ui+0xa4>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a10      	ldr	r2, [pc, #64]	@ (8006654 <task_ui+0xb4>)
 8006612:	213f      	movs	r1, #63	@ 0x3f
 8006614:	4618      	mov	r0, r3
 8006616:	f000 fc4b 	bl	8006eb0 <sniprintf>
 800661a:	4603      	mov	r3, r0
 800661c:	4a0b      	ldr	r2, [pc, #44]	@ (800664c <task_ui+0xac>)
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	4b08      	ldr	r3, [pc, #32]	@ (8006644 <task_ui+0xa4>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff fcd9 	bl	8005fdc <logger_log_print_>
 800662a:	f7ff f987 	bl	800593c <vPortExitCritical>
      xSemaphoreGive(hsem_led);
 800662e:	4b0a      	ldr	r3, [pc, #40]	@ (8006658 <task_ui+0xb8>)
 8006630:	6818      	ldr	r0, [r3, #0]
 8006632:	2300      	movs	r3, #0
 8006634:	2200      	movs	r2, #0
 8006636:	2100      	movs	r1, #0
 8006638:	f7fd fcdc 	bl	8003ff4 <xQueueGenericSend>
    if(pdTRUE == xSemaphoreTake(hsem_button, portMAX_DELAY))
 800663c:	e7b4      	b.n	80065a8 <task_ui+0x8>
 800663e:	bf00      	nop
 8006640:	20004848 	.word	0x20004848
 8006644:	08007f18 	.word	0x08007f18
 8006648:	08007ee4 	.word	0x08007ee4
 800664c:	20004890 	.word	0x20004890
 8006650:	08007eec 	.word	0x08007eec
 8006654:	08007efc 	.word	0x08007efc
 8006658:	2000484c 	.word	0x2000484c

0800665c <findslot>:
 800665c:	4b0a      	ldr	r3, [pc, #40]	@ (8006688 <findslot+0x2c>)
 800665e:	b510      	push	{r4, lr}
 8006660:	4604      	mov	r4, r0
 8006662:	6818      	ldr	r0, [r3, #0]
 8006664:	b118      	cbz	r0, 800666e <findslot+0x12>
 8006666:	6a03      	ldr	r3, [r0, #32]
 8006668:	b90b      	cbnz	r3, 800666e <findslot+0x12>
 800666a:	f000 fbd9 	bl	8006e20 <__sinit>
 800666e:	2c13      	cmp	r4, #19
 8006670:	d807      	bhi.n	8006682 <findslot+0x26>
 8006672:	4806      	ldr	r0, [pc, #24]	@ (800668c <findslot+0x30>)
 8006674:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8006678:	3201      	adds	r2, #1
 800667a:	d002      	beq.n	8006682 <findslot+0x26>
 800667c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8006680:	bd10      	pop	{r4, pc}
 8006682:	2000      	movs	r0, #0
 8006684:	e7fc      	b.n	8006680 <findslot+0x24>
 8006686:	bf00      	nop
 8006688:	20000024 	.word	0x20000024
 800668c:	200048a4 	.word	0x200048a4

08006690 <error>:
 8006690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006692:	4604      	mov	r4, r0
 8006694:	f000 fcd2 	bl	800703c <__errno>
 8006698:	2613      	movs	r6, #19
 800669a:	4605      	mov	r5, r0
 800669c:	2700      	movs	r7, #0
 800669e:	4630      	mov	r0, r6
 80066a0:	4639      	mov	r1, r7
 80066a2:	beab      	bkpt	0x00ab
 80066a4:	4606      	mov	r6, r0
 80066a6:	602e      	str	r6, [r5, #0]
 80066a8:	4620      	mov	r0, r4
 80066aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080066ac <checkerror>:
 80066ac:	1c43      	adds	r3, r0, #1
 80066ae:	d101      	bne.n	80066b4 <checkerror+0x8>
 80066b0:	f7ff bfee 	b.w	8006690 <error>
 80066b4:	4770      	bx	lr

080066b6 <_swiread>:
 80066b6:	b530      	push	{r4, r5, lr}
 80066b8:	b085      	sub	sp, #20
 80066ba:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80066be:	9203      	str	r2, [sp, #12]
 80066c0:	2406      	movs	r4, #6
 80066c2:	ad01      	add	r5, sp, #4
 80066c4:	4620      	mov	r0, r4
 80066c6:	4629      	mov	r1, r5
 80066c8:	beab      	bkpt	0x00ab
 80066ca:	4604      	mov	r4, r0
 80066cc:	4620      	mov	r0, r4
 80066ce:	f7ff ffed 	bl	80066ac <checkerror>
 80066d2:	b005      	add	sp, #20
 80066d4:	bd30      	pop	{r4, r5, pc}

080066d6 <_read>:
 80066d6:	b570      	push	{r4, r5, r6, lr}
 80066d8:	460e      	mov	r6, r1
 80066da:	4614      	mov	r4, r2
 80066dc:	f7ff ffbe 	bl	800665c <findslot>
 80066e0:	4605      	mov	r5, r0
 80066e2:	b930      	cbnz	r0, 80066f2 <_read+0x1c>
 80066e4:	f000 fcaa 	bl	800703c <__errno>
 80066e8:	2309      	movs	r3, #9
 80066ea:	6003      	str	r3, [r0, #0]
 80066ec:	f04f 30ff 	mov.w	r0, #4294967295
 80066f0:	bd70      	pop	{r4, r5, r6, pc}
 80066f2:	6800      	ldr	r0, [r0, #0]
 80066f4:	4622      	mov	r2, r4
 80066f6:	4631      	mov	r1, r6
 80066f8:	f7ff ffdd 	bl	80066b6 <_swiread>
 80066fc:	1c43      	adds	r3, r0, #1
 80066fe:	d0f5      	beq.n	80066ec <_read+0x16>
 8006700:	686b      	ldr	r3, [r5, #4]
 8006702:	1a20      	subs	r0, r4, r0
 8006704:	4403      	add	r3, r0
 8006706:	606b      	str	r3, [r5, #4]
 8006708:	e7f2      	b.n	80066f0 <_read+0x1a>

0800670a <_swilseek>:
 800670a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800670c:	460c      	mov	r4, r1
 800670e:	4616      	mov	r6, r2
 8006710:	f7ff ffa4 	bl	800665c <findslot>
 8006714:	4605      	mov	r5, r0
 8006716:	b940      	cbnz	r0, 800672a <_swilseek+0x20>
 8006718:	f000 fc90 	bl	800703c <__errno>
 800671c:	2309      	movs	r3, #9
 800671e:	6003      	str	r3, [r0, #0]
 8006720:	f04f 34ff 	mov.w	r4, #4294967295
 8006724:	4620      	mov	r0, r4
 8006726:	b003      	add	sp, #12
 8006728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800672a:	2e02      	cmp	r6, #2
 800672c:	d903      	bls.n	8006736 <_swilseek+0x2c>
 800672e:	f000 fc85 	bl	800703c <__errno>
 8006732:	2316      	movs	r3, #22
 8006734:	e7f3      	b.n	800671e <_swilseek+0x14>
 8006736:	2e01      	cmp	r6, #1
 8006738:	d112      	bne.n	8006760 <_swilseek+0x56>
 800673a:	6843      	ldr	r3, [r0, #4]
 800673c:	18e4      	adds	r4, r4, r3
 800673e:	d4f6      	bmi.n	800672e <_swilseek+0x24>
 8006740:	682b      	ldr	r3, [r5, #0]
 8006742:	260a      	movs	r6, #10
 8006744:	e9cd 3400 	strd	r3, r4, [sp]
 8006748:	466f      	mov	r7, sp
 800674a:	4630      	mov	r0, r6
 800674c:	4639      	mov	r1, r7
 800674e:	beab      	bkpt	0x00ab
 8006750:	4606      	mov	r6, r0
 8006752:	4630      	mov	r0, r6
 8006754:	f7ff ffaa 	bl	80066ac <checkerror>
 8006758:	2800      	cmp	r0, #0
 800675a:	dbe1      	blt.n	8006720 <_swilseek+0x16>
 800675c:	606c      	str	r4, [r5, #4]
 800675e:	e7e1      	b.n	8006724 <_swilseek+0x1a>
 8006760:	2e02      	cmp	r6, #2
 8006762:	6803      	ldr	r3, [r0, #0]
 8006764:	d1ec      	bne.n	8006740 <_swilseek+0x36>
 8006766:	9300      	str	r3, [sp, #0]
 8006768:	260c      	movs	r6, #12
 800676a:	466f      	mov	r7, sp
 800676c:	4630      	mov	r0, r6
 800676e:	4639      	mov	r1, r7
 8006770:	beab      	bkpt	0x00ab
 8006772:	4606      	mov	r6, r0
 8006774:	4630      	mov	r0, r6
 8006776:	f7ff ff99 	bl	80066ac <checkerror>
 800677a:	1c43      	adds	r3, r0, #1
 800677c:	d0d0      	beq.n	8006720 <_swilseek+0x16>
 800677e:	4404      	add	r4, r0
 8006780:	e7de      	b.n	8006740 <_swilseek+0x36>

08006782 <_lseek>:
 8006782:	f7ff bfc2 	b.w	800670a <_swilseek>

08006786 <_swiwrite>:
 8006786:	b530      	push	{r4, r5, lr}
 8006788:	b085      	sub	sp, #20
 800678a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800678e:	9203      	str	r2, [sp, #12]
 8006790:	2405      	movs	r4, #5
 8006792:	ad01      	add	r5, sp, #4
 8006794:	4620      	mov	r0, r4
 8006796:	4629      	mov	r1, r5
 8006798:	beab      	bkpt	0x00ab
 800679a:	4604      	mov	r4, r0
 800679c:	4620      	mov	r0, r4
 800679e:	f7ff ff85 	bl	80066ac <checkerror>
 80067a2:	b005      	add	sp, #20
 80067a4:	bd30      	pop	{r4, r5, pc}

080067a6 <_write>:
 80067a6:	b570      	push	{r4, r5, r6, lr}
 80067a8:	460e      	mov	r6, r1
 80067aa:	4615      	mov	r5, r2
 80067ac:	f7ff ff56 	bl	800665c <findslot>
 80067b0:	4604      	mov	r4, r0
 80067b2:	b930      	cbnz	r0, 80067c2 <_write+0x1c>
 80067b4:	f000 fc42 	bl	800703c <__errno>
 80067b8:	2309      	movs	r3, #9
 80067ba:	6003      	str	r3, [r0, #0]
 80067bc:	f04f 30ff 	mov.w	r0, #4294967295
 80067c0:	bd70      	pop	{r4, r5, r6, pc}
 80067c2:	6800      	ldr	r0, [r0, #0]
 80067c4:	462a      	mov	r2, r5
 80067c6:	4631      	mov	r1, r6
 80067c8:	f7ff ffdd 	bl	8006786 <_swiwrite>
 80067cc:	1e03      	subs	r3, r0, #0
 80067ce:	dbf5      	blt.n	80067bc <_write+0x16>
 80067d0:	6862      	ldr	r2, [r4, #4]
 80067d2:	1ae8      	subs	r0, r5, r3
 80067d4:	4402      	add	r2, r0
 80067d6:	42ab      	cmp	r3, r5
 80067d8:	6062      	str	r2, [r4, #4]
 80067da:	d1f1      	bne.n	80067c0 <_write+0x1a>
 80067dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80067e0:	2000      	movs	r0, #0
 80067e2:	f7ff bf55 	b.w	8006690 <error>

080067e6 <_swiclose>:
 80067e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067e8:	2402      	movs	r4, #2
 80067ea:	9001      	str	r0, [sp, #4]
 80067ec:	ad01      	add	r5, sp, #4
 80067ee:	4620      	mov	r0, r4
 80067f0:	4629      	mov	r1, r5
 80067f2:	beab      	bkpt	0x00ab
 80067f4:	4604      	mov	r4, r0
 80067f6:	4620      	mov	r0, r4
 80067f8:	f7ff ff58 	bl	80066ac <checkerror>
 80067fc:	b003      	add	sp, #12
 80067fe:	bd30      	pop	{r4, r5, pc}

08006800 <_close>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4605      	mov	r5, r0
 8006804:	f7ff ff2a 	bl	800665c <findslot>
 8006808:	4604      	mov	r4, r0
 800680a:	b930      	cbnz	r0, 800681a <_close+0x1a>
 800680c:	f000 fc16 	bl	800703c <__errno>
 8006810:	2309      	movs	r3, #9
 8006812:	6003      	str	r3, [r0, #0]
 8006814:	f04f 30ff 	mov.w	r0, #4294967295
 8006818:	bd38      	pop	{r3, r4, r5, pc}
 800681a:	3d01      	subs	r5, #1
 800681c:	2d01      	cmp	r5, #1
 800681e:	d809      	bhi.n	8006834 <_close+0x34>
 8006820:	4b07      	ldr	r3, [pc, #28]	@ (8006840 <_close+0x40>)
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	429a      	cmp	r2, r3
 8006828:	d104      	bne.n	8006834 <_close+0x34>
 800682a:	f04f 33ff 	mov.w	r3, #4294967295
 800682e:	6023      	str	r3, [r4, #0]
 8006830:	2000      	movs	r0, #0
 8006832:	e7f1      	b.n	8006818 <_close+0x18>
 8006834:	6820      	ldr	r0, [r4, #0]
 8006836:	f7ff ffd6 	bl	80067e6 <_swiclose>
 800683a:	2800      	cmp	r0, #0
 800683c:	d0f5      	beq.n	800682a <_close+0x2a>
 800683e:	e7eb      	b.n	8006818 <_close+0x18>
 8006840:	200048a4 	.word	0x200048a4

08006844 <_swistat>:
 8006844:	b570      	push	{r4, r5, r6, lr}
 8006846:	460c      	mov	r4, r1
 8006848:	f7ff ff08 	bl	800665c <findslot>
 800684c:	4605      	mov	r5, r0
 800684e:	b930      	cbnz	r0, 800685e <_swistat+0x1a>
 8006850:	f000 fbf4 	bl	800703c <__errno>
 8006854:	2309      	movs	r3, #9
 8006856:	6003      	str	r3, [r0, #0]
 8006858:	f04f 30ff 	mov.w	r0, #4294967295
 800685c:	bd70      	pop	{r4, r5, r6, pc}
 800685e:	6863      	ldr	r3, [r4, #4]
 8006860:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006864:	6063      	str	r3, [r4, #4]
 8006866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800686a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800686c:	260c      	movs	r6, #12
 800686e:	4630      	mov	r0, r6
 8006870:	4629      	mov	r1, r5
 8006872:	beab      	bkpt	0x00ab
 8006874:	4605      	mov	r5, r0
 8006876:	4628      	mov	r0, r5
 8006878:	f7ff ff18 	bl	80066ac <checkerror>
 800687c:	1c43      	adds	r3, r0, #1
 800687e:	d0eb      	beq.n	8006858 <_swistat+0x14>
 8006880:	6120      	str	r0, [r4, #16]
 8006882:	2000      	movs	r0, #0
 8006884:	e7ea      	b.n	800685c <_swistat+0x18>

08006886 <_fstat>:
 8006886:	460b      	mov	r3, r1
 8006888:	b510      	push	{r4, lr}
 800688a:	2100      	movs	r1, #0
 800688c:	4604      	mov	r4, r0
 800688e:	2258      	movs	r2, #88	@ 0x58
 8006890:	4618      	mov	r0, r3
 8006892:	f000 fb84 	bl	8006f9e <memset>
 8006896:	4601      	mov	r1, r0
 8006898:	4620      	mov	r0, r4
 800689a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800689e:	f7ff bfd1 	b.w	8006844 <_swistat>

080068a2 <_stat>:
 80068a2:	b538      	push	{r3, r4, r5, lr}
 80068a4:	460d      	mov	r5, r1
 80068a6:	4604      	mov	r4, r0
 80068a8:	2258      	movs	r2, #88	@ 0x58
 80068aa:	2100      	movs	r1, #0
 80068ac:	4628      	mov	r0, r5
 80068ae:	f000 fb76 	bl	8006f9e <memset>
 80068b2:	4620      	mov	r0, r4
 80068b4:	2100      	movs	r1, #0
 80068b6:	f000 f811 	bl	80068dc <_swiopen>
 80068ba:	1c43      	adds	r3, r0, #1
 80068bc:	4604      	mov	r4, r0
 80068be:	d00b      	beq.n	80068d8 <_stat+0x36>
 80068c0:	686b      	ldr	r3, [r5, #4]
 80068c2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80068c6:	606b      	str	r3, [r5, #4]
 80068c8:	4629      	mov	r1, r5
 80068ca:	f7ff ffbb 	bl	8006844 <_swistat>
 80068ce:	4605      	mov	r5, r0
 80068d0:	4620      	mov	r0, r4
 80068d2:	f7ff ff95 	bl	8006800 <_close>
 80068d6:	462c      	mov	r4, r5
 80068d8:	4620      	mov	r0, r4
 80068da:	bd38      	pop	{r3, r4, r5, pc}

080068dc <_swiopen>:
 80068dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068e0:	4f29      	ldr	r7, [pc, #164]	@ (8006988 <_swiopen+0xac>)
 80068e2:	b096      	sub	sp, #88	@ 0x58
 80068e4:	4682      	mov	sl, r0
 80068e6:	460e      	mov	r6, r1
 80068e8:	2400      	movs	r4, #0
 80068ea:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 80068ee:	3301      	adds	r3, #1
 80068f0:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80068f4:	d00c      	beq.n	8006910 <_swiopen+0x34>
 80068f6:	3401      	adds	r4, #1
 80068f8:	2c14      	cmp	r4, #20
 80068fa:	d1f6      	bne.n	80068ea <_swiopen+0xe>
 80068fc:	f000 fb9e 	bl	800703c <__errno>
 8006900:	2318      	movs	r3, #24
 8006902:	6003      	str	r3, [r0, #0]
 8006904:	f04f 34ff 	mov.w	r4, #4294967295
 8006908:	4620      	mov	r0, r4
 800690a:	b016      	add	sp, #88	@ 0x58
 800690c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006910:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8006914:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006918:	46e9      	mov	r9, sp
 800691a:	d109      	bne.n	8006930 <_swiopen+0x54>
 800691c:	4649      	mov	r1, r9
 800691e:	4650      	mov	r0, sl
 8006920:	f7ff ffbf 	bl	80068a2 <_stat>
 8006924:	3001      	adds	r0, #1
 8006926:	d003      	beq.n	8006930 <_swiopen+0x54>
 8006928:	f000 fb88 	bl	800703c <__errno>
 800692c:	2311      	movs	r3, #17
 800692e:	e7e8      	b.n	8006902 <_swiopen+0x26>
 8006930:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8006934:	f240 6301 	movw	r3, #1537	@ 0x601
 8006938:	07b2      	lsls	r2, r6, #30
 800693a:	bf48      	it	mi
 800693c:	f045 0502 	orrmi.w	r5, r5, #2
 8006940:	421e      	tst	r6, r3
 8006942:	bf18      	it	ne
 8006944:	f045 0504 	orrne.w	r5, r5, #4
 8006948:	0733      	lsls	r3, r6, #28
 800694a:	bf48      	it	mi
 800694c:	f025 0504 	bicmi.w	r5, r5, #4
 8006950:	4650      	mov	r0, sl
 8006952:	bf48      	it	mi
 8006954:	f045 0508 	orrmi.w	r5, r5, #8
 8006958:	f8cd a000 	str.w	sl, [sp]
 800695c:	f7f9 fc48 	bl	80001f0 <strlen>
 8006960:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8006964:	2501      	movs	r5, #1
 8006966:	4628      	mov	r0, r5
 8006968:	4649      	mov	r1, r9
 800696a:	beab      	bkpt	0x00ab
 800696c:	4605      	mov	r5, r0
 800696e:	2d00      	cmp	r5, #0
 8006970:	db05      	blt.n	800697e <_swiopen+0xa2>
 8006972:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8006976:	4447      	add	r7, r8
 8006978:	2300      	movs	r3, #0
 800697a:	607b      	str	r3, [r7, #4]
 800697c:	e7c4      	b.n	8006908 <_swiopen+0x2c>
 800697e:	4628      	mov	r0, r5
 8006980:	f7ff fe86 	bl	8006690 <error>
 8006984:	4604      	mov	r4, r0
 8006986:	e7bf      	b.n	8006908 <_swiopen+0x2c>
 8006988:	200048a4 	.word	0x200048a4

0800698c <_get_semihosting_exts>:
 800698c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006990:	4606      	mov	r6, r0
 8006992:	460f      	mov	r7, r1
 8006994:	4829      	ldr	r0, [pc, #164]	@ (8006a3c <_get_semihosting_exts+0xb0>)
 8006996:	2100      	movs	r1, #0
 8006998:	4615      	mov	r5, r2
 800699a:	f7ff ff9f 	bl	80068dc <_swiopen>
 800699e:	462a      	mov	r2, r5
 80069a0:	4604      	mov	r4, r0
 80069a2:	2100      	movs	r1, #0
 80069a4:	4630      	mov	r0, r6
 80069a6:	f000 fafa 	bl	8006f9e <memset>
 80069aa:	1c63      	adds	r3, r4, #1
 80069ac:	d014      	beq.n	80069d8 <_get_semihosting_exts+0x4c>
 80069ae:	4620      	mov	r0, r4
 80069b0:	f7ff fe54 	bl	800665c <findslot>
 80069b4:	f04f 080c 	mov.w	r8, #12
 80069b8:	4681      	mov	r9, r0
 80069ba:	4640      	mov	r0, r8
 80069bc:	4649      	mov	r1, r9
 80069be:	beab      	bkpt	0x00ab
 80069c0:	4680      	mov	r8, r0
 80069c2:	4640      	mov	r0, r8
 80069c4:	f7ff fe72 	bl	80066ac <checkerror>
 80069c8:	2803      	cmp	r0, #3
 80069ca:	dd02      	ble.n	80069d2 <_get_semihosting_exts+0x46>
 80069cc:	1ec3      	subs	r3, r0, #3
 80069ce:	42ab      	cmp	r3, r5
 80069d0:	dc07      	bgt.n	80069e2 <_get_semihosting_exts+0x56>
 80069d2:	4620      	mov	r0, r4
 80069d4:	f7ff ff14 	bl	8006800 <_close>
 80069d8:	f04f 30ff 	mov.w	r0, #4294967295
 80069dc:	b003      	add	sp, #12
 80069de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069e2:	2204      	movs	r2, #4
 80069e4:	eb0d 0102 	add.w	r1, sp, r2
 80069e8:	4620      	mov	r0, r4
 80069ea:	f7ff fe74 	bl	80066d6 <_read>
 80069ee:	2803      	cmp	r0, #3
 80069f0:	ddef      	ble.n	80069d2 <_get_semihosting_exts+0x46>
 80069f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80069f6:	2b53      	cmp	r3, #83	@ 0x53
 80069f8:	d1eb      	bne.n	80069d2 <_get_semihosting_exts+0x46>
 80069fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80069fe:	2b48      	cmp	r3, #72	@ 0x48
 8006a00:	d1e7      	bne.n	80069d2 <_get_semihosting_exts+0x46>
 8006a02:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006a06:	2b46      	cmp	r3, #70	@ 0x46
 8006a08:	d1e3      	bne.n	80069d2 <_get_semihosting_exts+0x46>
 8006a0a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006a0e:	2b42      	cmp	r3, #66	@ 0x42
 8006a10:	d1df      	bne.n	80069d2 <_get_semihosting_exts+0x46>
 8006a12:	2201      	movs	r2, #1
 8006a14:	4639      	mov	r1, r7
 8006a16:	4620      	mov	r0, r4
 8006a18:	f7ff fe77 	bl	800670a <_swilseek>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	dbd8      	blt.n	80069d2 <_get_semihosting_exts+0x46>
 8006a20:	462a      	mov	r2, r5
 8006a22:	4631      	mov	r1, r6
 8006a24:	4620      	mov	r0, r4
 8006a26:	f7ff fe56 	bl	80066d6 <_read>
 8006a2a:	4605      	mov	r5, r0
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f7ff fee7 	bl	8006800 <_close>
 8006a32:	4628      	mov	r0, r5
 8006a34:	f7ff fe3a 	bl	80066ac <checkerror>
 8006a38:	e7d0      	b.n	80069dc <_get_semihosting_exts+0x50>
 8006a3a:	bf00      	nop
 8006a3c:	08007f1c 	.word	0x08007f1c

08006a40 <initialise_semihosting_exts>:
 8006a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a42:	4d0a      	ldr	r5, [pc, #40]	@ (8006a6c <initialise_semihosting_exts+0x2c>)
 8006a44:	4c0a      	ldr	r4, [pc, #40]	@ (8006a70 <initialise_semihosting_exts+0x30>)
 8006a46:	2100      	movs	r1, #0
 8006a48:	2201      	movs	r2, #1
 8006a4a:	a801      	add	r0, sp, #4
 8006a4c:	6029      	str	r1, [r5, #0]
 8006a4e:	6022      	str	r2, [r4, #0]
 8006a50:	f7ff ff9c 	bl	800698c <_get_semihosting_exts>
 8006a54:	2800      	cmp	r0, #0
 8006a56:	dd07      	ble.n	8006a68 <initialise_semihosting_exts+0x28>
 8006a58:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006a5c:	f003 0201 	and.w	r2, r3, #1
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	602a      	str	r2, [r5, #0]
 8006a66:	6023      	str	r3, [r4, #0]
 8006a68:	b003      	add	sp, #12
 8006a6a:	bd30      	pop	{r4, r5, pc}
 8006a6c:	20000014 	.word	0x20000014
 8006a70:	20000010 	.word	0x20000010

08006a74 <_has_ext_stdout_stderr>:
 8006a74:	b510      	push	{r4, lr}
 8006a76:	4c04      	ldr	r4, [pc, #16]	@ (8006a88 <_has_ext_stdout_stderr+0x14>)
 8006a78:	6823      	ldr	r3, [r4, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	da01      	bge.n	8006a82 <_has_ext_stdout_stderr+0xe>
 8006a7e:	f7ff ffdf 	bl	8006a40 <initialise_semihosting_exts>
 8006a82:	6820      	ldr	r0, [r4, #0]
 8006a84:	bd10      	pop	{r4, pc}
 8006a86:	bf00      	nop
 8006a88:	20000010 	.word	0x20000010

08006a8c <initialise_monitor_handles>:
 8006a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a90:	b085      	sub	sp, #20
 8006a92:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8006b44 <initialise_monitor_handles+0xb8>
 8006a96:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	2400      	movs	r4, #0
 8006a9e:	9303      	str	r3, [sp, #12]
 8006aa0:	af01      	add	r7, sp, #4
 8006aa2:	9402      	str	r4, [sp, #8]
 8006aa4:	2501      	movs	r5, #1
 8006aa6:	4628      	mov	r0, r5
 8006aa8:	4639      	mov	r1, r7
 8006aaa:	beab      	bkpt	0x00ab
 8006aac:	4605      	mov	r5, r0
 8006aae:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8006b48 <initialise_monitor_handles+0xbc>
 8006ab2:	4623      	mov	r3, r4
 8006ab4:	4c20      	ldr	r4, [pc, #128]	@ (8006b38 <initialise_monitor_handles+0xac>)
 8006ab6:	f8c8 5000 	str.w	r5, [r8]
 8006aba:	f04f 32ff 	mov.w	r2, #4294967295
 8006abe:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	2b14      	cmp	r3, #20
 8006ac6:	d1fa      	bne.n	8006abe <initialise_monitor_handles+0x32>
 8006ac8:	f7ff ffd4 	bl	8006a74 <_has_ext_stdout_stderr>
 8006acc:	4d1b      	ldr	r5, [pc, #108]	@ (8006b3c <initialise_monitor_handles+0xb0>)
 8006ace:	b1d0      	cbz	r0, 8006b06 <initialise_monitor_handles+0x7a>
 8006ad0:	f04f 0a03 	mov.w	sl, #3
 8006ad4:	2304      	movs	r3, #4
 8006ad6:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ada:	2601      	movs	r6, #1
 8006adc:	f8cd a00c 	str.w	sl, [sp, #12]
 8006ae0:	9302      	str	r3, [sp, #8]
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	4639      	mov	r1, r7
 8006ae6:	beab      	bkpt	0x00ab
 8006ae8:	4683      	mov	fp, r0
 8006aea:	4b15      	ldr	r3, [pc, #84]	@ (8006b40 <initialise_monitor_handles+0xb4>)
 8006aec:	f8cd 9004 	str.w	r9, [sp, #4]
 8006af0:	f8c3 b000 	str.w	fp, [r3]
 8006af4:	2308      	movs	r3, #8
 8006af6:	f8cd a00c 	str.w	sl, [sp, #12]
 8006afa:	9302      	str	r3, [sp, #8]
 8006afc:	4630      	mov	r0, r6
 8006afe:	4639      	mov	r1, r7
 8006b00:	beab      	bkpt	0x00ab
 8006b02:	4606      	mov	r6, r0
 8006b04:	602e      	str	r6, [r5, #0]
 8006b06:	682b      	ldr	r3, [r5, #0]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	bf02      	ittt	eq
 8006b0c:	4b0c      	ldreq	r3, [pc, #48]	@ (8006b40 <initialise_monitor_handles+0xb4>)
 8006b0e:	681b      	ldreq	r3, [r3, #0]
 8006b10:	602b      	streq	r3, [r5, #0]
 8006b12:	2600      	movs	r6, #0
 8006b14:	f8d8 3000 	ldr.w	r3, [r8]
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	6066      	str	r6, [r4, #4]
 8006b1c:	f7ff ffaa 	bl	8006a74 <_has_ext_stdout_stderr>
 8006b20:	b130      	cbz	r0, 8006b30 <initialise_monitor_handles+0xa4>
 8006b22:	4b07      	ldr	r3, [pc, #28]	@ (8006b40 <initialise_monitor_handles+0xb4>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8006b2a:	682b      	ldr	r3, [r5, #0]
 8006b2c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8006b30:	b005      	add	sp, #20
 8006b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b36:	bf00      	nop
 8006b38:	200048a4 	.word	0x200048a4
 8006b3c:	20004898 	.word	0x20004898
 8006b40:	2000489c 	.word	0x2000489c
 8006b44:	08007f32 	.word	0x08007f32
 8006b48:	200048a0 	.word	0x200048a0

08006b4c <_isatty>:
 8006b4c:	b570      	push	{r4, r5, r6, lr}
 8006b4e:	f7ff fd85 	bl	800665c <findslot>
 8006b52:	2409      	movs	r4, #9
 8006b54:	4605      	mov	r5, r0
 8006b56:	b920      	cbnz	r0, 8006b62 <_isatty+0x16>
 8006b58:	f000 fa70 	bl	800703c <__errno>
 8006b5c:	6004      	str	r4, [r0, #0]
 8006b5e:	2000      	movs	r0, #0
 8006b60:	bd70      	pop	{r4, r5, r6, pc}
 8006b62:	4620      	mov	r0, r4
 8006b64:	4629      	mov	r1, r5
 8006b66:	beab      	bkpt	0x00ab
 8006b68:	4604      	mov	r4, r0
 8006b6a:	2c01      	cmp	r4, #1
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	d0f7      	beq.n	8006b60 <_isatty+0x14>
 8006b70:	f000 fa64 	bl	800703c <__errno>
 8006b74:	2513      	movs	r5, #19
 8006b76:	4604      	mov	r4, r0
 8006b78:	2600      	movs	r6, #0
 8006b7a:	4628      	mov	r0, r5
 8006b7c:	4631      	mov	r1, r6
 8006b7e:	beab      	bkpt	0x00ab
 8006b80:	4605      	mov	r5, r0
 8006b82:	6025      	str	r5, [r4, #0]
 8006b84:	e7eb      	b.n	8006b5e <_isatty+0x12>
	...

08006b88 <__sflush_r>:
 8006b88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b90:	0716      	lsls	r6, r2, #28
 8006b92:	4605      	mov	r5, r0
 8006b94:	460c      	mov	r4, r1
 8006b96:	d454      	bmi.n	8006c42 <__sflush_r+0xba>
 8006b98:	684b      	ldr	r3, [r1, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	dc02      	bgt.n	8006ba4 <__sflush_r+0x1c>
 8006b9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	dd48      	ble.n	8006c36 <__sflush_r+0xae>
 8006ba4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ba6:	2e00      	cmp	r6, #0
 8006ba8:	d045      	beq.n	8006c36 <__sflush_r+0xae>
 8006baa:	2300      	movs	r3, #0
 8006bac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006bb0:	682f      	ldr	r7, [r5, #0]
 8006bb2:	6a21      	ldr	r1, [r4, #32]
 8006bb4:	602b      	str	r3, [r5, #0]
 8006bb6:	d030      	beq.n	8006c1a <__sflush_r+0x92>
 8006bb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	0759      	lsls	r1, r3, #29
 8006bbe:	d505      	bpl.n	8006bcc <__sflush_r+0x44>
 8006bc0:	6863      	ldr	r3, [r4, #4]
 8006bc2:	1ad2      	subs	r2, r2, r3
 8006bc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006bc6:	b10b      	cbz	r3, 8006bcc <__sflush_r+0x44>
 8006bc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006bca:	1ad2      	subs	r2, r2, r3
 8006bcc:	2300      	movs	r3, #0
 8006bce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006bd0:	6a21      	ldr	r1, [r4, #32]
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	47b0      	blx	r6
 8006bd6:	1c43      	adds	r3, r0, #1
 8006bd8:	89a3      	ldrh	r3, [r4, #12]
 8006bda:	d106      	bne.n	8006bea <__sflush_r+0x62>
 8006bdc:	6829      	ldr	r1, [r5, #0]
 8006bde:	291d      	cmp	r1, #29
 8006be0:	d82b      	bhi.n	8006c3a <__sflush_r+0xb2>
 8006be2:	4a2a      	ldr	r2, [pc, #168]	@ (8006c8c <__sflush_r+0x104>)
 8006be4:	410a      	asrs	r2, r1
 8006be6:	07d6      	lsls	r6, r2, #31
 8006be8:	d427      	bmi.n	8006c3a <__sflush_r+0xb2>
 8006bea:	2200      	movs	r2, #0
 8006bec:	6062      	str	r2, [r4, #4]
 8006bee:	04d9      	lsls	r1, r3, #19
 8006bf0:	6922      	ldr	r2, [r4, #16]
 8006bf2:	6022      	str	r2, [r4, #0]
 8006bf4:	d504      	bpl.n	8006c00 <__sflush_r+0x78>
 8006bf6:	1c42      	adds	r2, r0, #1
 8006bf8:	d101      	bne.n	8006bfe <__sflush_r+0x76>
 8006bfa:	682b      	ldr	r3, [r5, #0]
 8006bfc:	b903      	cbnz	r3, 8006c00 <__sflush_r+0x78>
 8006bfe:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c02:	602f      	str	r7, [r5, #0]
 8006c04:	b1b9      	cbz	r1, 8006c36 <__sflush_r+0xae>
 8006c06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c0a:	4299      	cmp	r1, r3
 8006c0c:	d002      	beq.n	8006c14 <__sflush_r+0x8c>
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f000 fa50 	bl	80070b4 <_free_r>
 8006c14:	2300      	movs	r3, #0
 8006c16:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c18:	e00d      	b.n	8006c36 <__sflush_r+0xae>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	47b0      	blx	r6
 8006c20:	4602      	mov	r2, r0
 8006c22:	1c50      	adds	r0, r2, #1
 8006c24:	d1c9      	bne.n	8006bba <__sflush_r+0x32>
 8006c26:	682b      	ldr	r3, [r5, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d0c6      	beq.n	8006bba <__sflush_r+0x32>
 8006c2c:	2b1d      	cmp	r3, #29
 8006c2e:	d001      	beq.n	8006c34 <__sflush_r+0xac>
 8006c30:	2b16      	cmp	r3, #22
 8006c32:	d11e      	bne.n	8006c72 <__sflush_r+0xea>
 8006c34:	602f      	str	r7, [r5, #0]
 8006c36:	2000      	movs	r0, #0
 8006c38:	e022      	b.n	8006c80 <__sflush_r+0xf8>
 8006c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c3e:	b21b      	sxth	r3, r3
 8006c40:	e01b      	b.n	8006c7a <__sflush_r+0xf2>
 8006c42:	690f      	ldr	r7, [r1, #16]
 8006c44:	2f00      	cmp	r7, #0
 8006c46:	d0f6      	beq.n	8006c36 <__sflush_r+0xae>
 8006c48:	0793      	lsls	r3, r2, #30
 8006c4a:	680e      	ldr	r6, [r1, #0]
 8006c4c:	bf08      	it	eq
 8006c4e:	694b      	ldreq	r3, [r1, #20]
 8006c50:	600f      	str	r7, [r1, #0]
 8006c52:	bf18      	it	ne
 8006c54:	2300      	movne	r3, #0
 8006c56:	eba6 0807 	sub.w	r8, r6, r7
 8006c5a:	608b      	str	r3, [r1, #8]
 8006c5c:	f1b8 0f00 	cmp.w	r8, #0
 8006c60:	dde9      	ble.n	8006c36 <__sflush_r+0xae>
 8006c62:	6a21      	ldr	r1, [r4, #32]
 8006c64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006c66:	4643      	mov	r3, r8
 8006c68:	463a      	mov	r2, r7
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	47b0      	blx	r6
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	dc08      	bgt.n	8006c84 <__sflush_r+0xfc>
 8006c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c7a:	81a3      	strh	r3, [r4, #12]
 8006c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c84:	4407      	add	r7, r0
 8006c86:	eba8 0800 	sub.w	r8, r8, r0
 8006c8a:	e7e7      	b.n	8006c5c <__sflush_r+0xd4>
 8006c8c:	dfbffffe 	.word	0xdfbffffe

08006c90 <_fflush_r>:
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	690b      	ldr	r3, [r1, #16]
 8006c94:	4605      	mov	r5, r0
 8006c96:	460c      	mov	r4, r1
 8006c98:	b913      	cbnz	r3, 8006ca0 <_fflush_r+0x10>
 8006c9a:	2500      	movs	r5, #0
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ca0:	b118      	cbz	r0, 8006caa <_fflush_r+0x1a>
 8006ca2:	6a03      	ldr	r3, [r0, #32]
 8006ca4:	b90b      	cbnz	r3, 8006caa <_fflush_r+0x1a>
 8006ca6:	f000 f8bb 	bl	8006e20 <__sinit>
 8006caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d0f3      	beq.n	8006c9a <_fflush_r+0xa>
 8006cb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006cb4:	07d0      	lsls	r0, r2, #31
 8006cb6:	d404      	bmi.n	8006cc2 <_fflush_r+0x32>
 8006cb8:	0599      	lsls	r1, r3, #22
 8006cba:	d402      	bmi.n	8006cc2 <_fflush_r+0x32>
 8006cbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cbe:	f000 f9e8 	bl	8007092 <__retarget_lock_acquire_recursive>
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	f7ff ff5f 	bl	8006b88 <__sflush_r>
 8006cca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ccc:	07da      	lsls	r2, r3, #31
 8006cce:	4605      	mov	r5, r0
 8006cd0:	d4e4      	bmi.n	8006c9c <_fflush_r+0xc>
 8006cd2:	89a3      	ldrh	r3, [r4, #12]
 8006cd4:	059b      	lsls	r3, r3, #22
 8006cd6:	d4e1      	bmi.n	8006c9c <_fflush_r+0xc>
 8006cd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cda:	f000 f9db 	bl	8007094 <__retarget_lock_release_recursive>
 8006cde:	e7dd      	b.n	8006c9c <_fflush_r+0xc>

08006ce0 <fflush>:
 8006ce0:	4601      	mov	r1, r0
 8006ce2:	b920      	cbnz	r0, 8006cee <fflush+0xe>
 8006ce4:	4a04      	ldr	r2, [pc, #16]	@ (8006cf8 <fflush+0x18>)
 8006ce6:	4905      	ldr	r1, [pc, #20]	@ (8006cfc <fflush+0x1c>)
 8006ce8:	4805      	ldr	r0, [pc, #20]	@ (8006d00 <fflush+0x20>)
 8006cea:	f000 b8b1 	b.w	8006e50 <_fwalk_sglue>
 8006cee:	4b05      	ldr	r3, [pc, #20]	@ (8006d04 <fflush+0x24>)
 8006cf0:	6818      	ldr	r0, [r3, #0]
 8006cf2:	f7ff bfcd 	b.w	8006c90 <_fflush_r>
 8006cf6:	bf00      	nop
 8006cf8:	20000018 	.word	0x20000018
 8006cfc:	08006c91 	.word	0x08006c91
 8006d00:	20000028 	.word	0x20000028
 8006d04:	20000024 	.word	0x20000024

08006d08 <std>:
 8006d08:	2300      	movs	r3, #0
 8006d0a:	b510      	push	{r4, lr}
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d16:	6083      	str	r3, [r0, #8]
 8006d18:	8181      	strh	r1, [r0, #12]
 8006d1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d1c:	81c2      	strh	r2, [r0, #14]
 8006d1e:	6183      	str	r3, [r0, #24]
 8006d20:	4619      	mov	r1, r3
 8006d22:	2208      	movs	r2, #8
 8006d24:	305c      	adds	r0, #92	@ 0x5c
 8006d26:	f000 f93a 	bl	8006f9e <memset>
 8006d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d60 <std+0x58>)
 8006d2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d64 <std+0x5c>)
 8006d30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d32:	4b0d      	ldr	r3, [pc, #52]	@ (8006d68 <std+0x60>)
 8006d34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d36:	4b0d      	ldr	r3, [pc, #52]	@ (8006d6c <std+0x64>)
 8006d38:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d70 <std+0x68>)
 8006d3c:	6224      	str	r4, [r4, #32]
 8006d3e:	429c      	cmp	r4, r3
 8006d40:	d006      	beq.n	8006d50 <std+0x48>
 8006d42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d46:	4294      	cmp	r4, r2
 8006d48:	d002      	beq.n	8006d50 <std+0x48>
 8006d4a:	33d0      	adds	r3, #208	@ 0xd0
 8006d4c:	429c      	cmp	r4, r3
 8006d4e:	d105      	bne.n	8006d5c <std+0x54>
 8006d50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d58:	f000 b99a 	b.w	8007090 <__retarget_lock_init_recursive>
 8006d5c:	bd10      	pop	{r4, pc}
 8006d5e:	bf00      	nop
 8006d60:	08006f19 	.word	0x08006f19
 8006d64:	08006f3b 	.word	0x08006f3b
 8006d68:	08006f73 	.word	0x08006f73
 8006d6c:	08006f97 	.word	0x08006f97
 8006d70:	20004944 	.word	0x20004944

08006d74 <stdio_exit_handler>:
 8006d74:	4a02      	ldr	r2, [pc, #8]	@ (8006d80 <stdio_exit_handler+0xc>)
 8006d76:	4903      	ldr	r1, [pc, #12]	@ (8006d84 <stdio_exit_handler+0x10>)
 8006d78:	4803      	ldr	r0, [pc, #12]	@ (8006d88 <stdio_exit_handler+0x14>)
 8006d7a:	f000 b869 	b.w	8006e50 <_fwalk_sglue>
 8006d7e:	bf00      	nop
 8006d80:	20000018 	.word	0x20000018
 8006d84:	08006c91 	.word	0x08006c91
 8006d88:	20000028 	.word	0x20000028

08006d8c <cleanup_stdio>:
 8006d8c:	6841      	ldr	r1, [r0, #4]
 8006d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc0 <cleanup_stdio+0x34>)
 8006d90:	4299      	cmp	r1, r3
 8006d92:	b510      	push	{r4, lr}
 8006d94:	4604      	mov	r4, r0
 8006d96:	d001      	beq.n	8006d9c <cleanup_stdio+0x10>
 8006d98:	f7ff ff7a 	bl	8006c90 <_fflush_r>
 8006d9c:	68a1      	ldr	r1, [r4, #8]
 8006d9e:	4b09      	ldr	r3, [pc, #36]	@ (8006dc4 <cleanup_stdio+0x38>)
 8006da0:	4299      	cmp	r1, r3
 8006da2:	d002      	beq.n	8006daa <cleanup_stdio+0x1e>
 8006da4:	4620      	mov	r0, r4
 8006da6:	f7ff ff73 	bl	8006c90 <_fflush_r>
 8006daa:	68e1      	ldr	r1, [r4, #12]
 8006dac:	4b06      	ldr	r3, [pc, #24]	@ (8006dc8 <cleanup_stdio+0x3c>)
 8006dae:	4299      	cmp	r1, r3
 8006db0:	d004      	beq.n	8006dbc <cleanup_stdio+0x30>
 8006db2:	4620      	mov	r0, r4
 8006db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006db8:	f7ff bf6a 	b.w	8006c90 <_fflush_r>
 8006dbc:	bd10      	pop	{r4, pc}
 8006dbe:	bf00      	nop
 8006dc0:	20004944 	.word	0x20004944
 8006dc4:	200049ac 	.word	0x200049ac
 8006dc8:	20004a14 	.word	0x20004a14

08006dcc <global_stdio_init.part.0>:
 8006dcc:	b510      	push	{r4, lr}
 8006dce:	4b0b      	ldr	r3, [pc, #44]	@ (8006dfc <global_stdio_init.part.0+0x30>)
 8006dd0:	4c0b      	ldr	r4, [pc, #44]	@ (8006e00 <global_stdio_init.part.0+0x34>)
 8006dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8006e04 <global_stdio_init.part.0+0x38>)
 8006dd4:	601a      	str	r2, [r3, #0]
 8006dd6:	4620      	mov	r0, r4
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2104      	movs	r1, #4
 8006ddc:	f7ff ff94 	bl	8006d08 <std>
 8006de0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006de4:	2201      	movs	r2, #1
 8006de6:	2109      	movs	r1, #9
 8006de8:	f7ff ff8e 	bl	8006d08 <std>
 8006dec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006df0:	2202      	movs	r2, #2
 8006df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006df6:	2112      	movs	r1, #18
 8006df8:	f7ff bf86 	b.w	8006d08 <std>
 8006dfc:	20004a7c 	.word	0x20004a7c
 8006e00:	20004944 	.word	0x20004944
 8006e04:	08006d75 	.word	0x08006d75

08006e08 <__sfp_lock_acquire>:
 8006e08:	4801      	ldr	r0, [pc, #4]	@ (8006e10 <__sfp_lock_acquire+0x8>)
 8006e0a:	f000 b942 	b.w	8007092 <__retarget_lock_acquire_recursive>
 8006e0e:	bf00      	nop
 8006e10:	20004a85 	.word	0x20004a85

08006e14 <__sfp_lock_release>:
 8006e14:	4801      	ldr	r0, [pc, #4]	@ (8006e1c <__sfp_lock_release+0x8>)
 8006e16:	f000 b93d 	b.w	8007094 <__retarget_lock_release_recursive>
 8006e1a:	bf00      	nop
 8006e1c:	20004a85 	.word	0x20004a85

08006e20 <__sinit>:
 8006e20:	b510      	push	{r4, lr}
 8006e22:	4604      	mov	r4, r0
 8006e24:	f7ff fff0 	bl	8006e08 <__sfp_lock_acquire>
 8006e28:	6a23      	ldr	r3, [r4, #32]
 8006e2a:	b11b      	cbz	r3, 8006e34 <__sinit+0x14>
 8006e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e30:	f7ff bff0 	b.w	8006e14 <__sfp_lock_release>
 8006e34:	4b04      	ldr	r3, [pc, #16]	@ (8006e48 <__sinit+0x28>)
 8006e36:	6223      	str	r3, [r4, #32]
 8006e38:	4b04      	ldr	r3, [pc, #16]	@ (8006e4c <__sinit+0x2c>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1f5      	bne.n	8006e2c <__sinit+0xc>
 8006e40:	f7ff ffc4 	bl	8006dcc <global_stdio_init.part.0>
 8006e44:	e7f2      	b.n	8006e2c <__sinit+0xc>
 8006e46:	bf00      	nop
 8006e48:	08006d8d 	.word	0x08006d8d
 8006e4c:	20004a7c 	.word	0x20004a7c

08006e50 <_fwalk_sglue>:
 8006e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e54:	4607      	mov	r7, r0
 8006e56:	4688      	mov	r8, r1
 8006e58:	4614      	mov	r4, r2
 8006e5a:	2600      	movs	r6, #0
 8006e5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e60:	f1b9 0901 	subs.w	r9, r9, #1
 8006e64:	d505      	bpl.n	8006e72 <_fwalk_sglue+0x22>
 8006e66:	6824      	ldr	r4, [r4, #0]
 8006e68:	2c00      	cmp	r4, #0
 8006e6a:	d1f7      	bne.n	8006e5c <_fwalk_sglue+0xc>
 8006e6c:	4630      	mov	r0, r6
 8006e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e72:	89ab      	ldrh	r3, [r5, #12]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d907      	bls.n	8006e88 <_fwalk_sglue+0x38>
 8006e78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	d003      	beq.n	8006e88 <_fwalk_sglue+0x38>
 8006e80:	4629      	mov	r1, r5
 8006e82:	4638      	mov	r0, r7
 8006e84:	47c0      	blx	r8
 8006e86:	4306      	orrs	r6, r0
 8006e88:	3568      	adds	r5, #104	@ 0x68
 8006e8a:	e7e9      	b.n	8006e60 <_fwalk_sglue+0x10>

08006e8c <iprintf>:
 8006e8c:	b40f      	push	{r0, r1, r2, r3}
 8006e8e:	b507      	push	{r0, r1, r2, lr}
 8006e90:	4906      	ldr	r1, [pc, #24]	@ (8006eac <iprintf+0x20>)
 8006e92:	ab04      	add	r3, sp, #16
 8006e94:	6808      	ldr	r0, [r1, #0]
 8006e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e9a:	6881      	ldr	r1, [r0, #8]
 8006e9c:	9301      	str	r3, [sp, #4]
 8006e9e:	f000 fb83 	bl	80075a8 <_vfiprintf_r>
 8006ea2:	b003      	add	sp, #12
 8006ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ea8:	b004      	add	sp, #16
 8006eaa:	4770      	bx	lr
 8006eac:	20000024 	.word	0x20000024

08006eb0 <sniprintf>:
 8006eb0:	b40c      	push	{r2, r3}
 8006eb2:	b530      	push	{r4, r5, lr}
 8006eb4:	4b17      	ldr	r3, [pc, #92]	@ (8006f14 <sniprintf+0x64>)
 8006eb6:	1e0c      	subs	r4, r1, #0
 8006eb8:	681d      	ldr	r5, [r3, #0]
 8006eba:	b09d      	sub	sp, #116	@ 0x74
 8006ebc:	da08      	bge.n	8006ed0 <sniprintf+0x20>
 8006ebe:	238b      	movs	r3, #139	@ 0x8b
 8006ec0:	602b      	str	r3, [r5, #0]
 8006ec2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec6:	b01d      	add	sp, #116	@ 0x74
 8006ec8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ecc:	b002      	add	sp, #8
 8006ece:	4770      	bx	lr
 8006ed0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006ed4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ed8:	bf14      	ite	ne
 8006eda:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006ede:	4623      	moveq	r3, r4
 8006ee0:	9304      	str	r3, [sp, #16]
 8006ee2:	9307      	str	r3, [sp, #28]
 8006ee4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006ee8:	9002      	str	r0, [sp, #8]
 8006eea:	9006      	str	r0, [sp, #24]
 8006eec:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ef0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006ef2:	ab21      	add	r3, sp, #132	@ 0x84
 8006ef4:	a902      	add	r1, sp, #8
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	9301      	str	r3, [sp, #4]
 8006efa:	f000 fa2f 	bl	800735c <_svfiprintf_r>
 8006efe:	1c43      	adds	r3, r0, #1
 8006f00:	bfbc      	itt	lt
 8006f02:	238b      	movlt	r3, #139	@ 0x8b
 8006f04:	602b      	strlt	r3, [r5, #0]
 8006f06:	2c00      	cmp	r4, #0
 8006f08:	d0dd      	beq.n	8006ec6 <sniprintf+0x16>
 8006f0a:	9b02      	ldr	r3, [sp, #8]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	701a      	strb	r2, [r3, #0]
 8006f10:	e7d9      	b.n	8006ec6 <sniprintf+0x16>
 8006f12:	bf00      	nop
 8006f14:	20000024 	.word	0x20000024

08006f18 <__sread>:
 8006f18:	b510      	push	{r4, lr}
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f20:	f000 f868 	bl	8006ff4 <_read_r>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	bfab      	itete	ge
 8006f28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f2a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f2c:	181b      	addge	r3, r3, r0
 8006f2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006f32:	bfac      	ite	ge
 8006f34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f36:	81a3      	strhlt	r3, [r4, #12]
 8006f38:	bd10      	pop	{r4, pc}

08006f3a <__swrite>:
 8006f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f3e:	461f      	mov	r7, r3
 8006f40:	898b      	ldrh	r3, [r1, #12]
 8006f42:	05db      	lsls	r3, r3, #23
 8006f44:	4605      	mov	r5, r0
 8006f46:	460c      	mov	r4, r1
 8006f48:	4616      	mov	r6, r2
 8006f4a:	d505      	bpl.n	8006f58 <__swrite+0x1e>
 8006f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f50:	2302      	movs	r3, #2
 8006f52:	2200      	movs	r2, #0
 8006f54:	f000 f83c 	bl	8006fd0 <_lseek_r>
 8006f58:	89a3      	ldrh	r3, [r4, #12]
 8006f5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f62:	81a3      	strh	r3, [r4, #12]
 8006f64:	4632      	mov	r2, r6
 8006f66:	463b      	mov	r3, r7
 8006f68:	4628      	mov	r0, r5
 8006f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f6e:	f000 b853 	b.w	8007018 <_write_r>

08006f72 <__sseek>:
 8006f72:	b510      	push	{r4, lr}
 8006f74:	460c      	mov	r4, r1
 8006f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f7a:	f000 f829 	bl	8006fd0 <_lseek_r>
 8006f7e:	1c43      	adds	r3, r0, #1
 8006f80:	89a3      	ldrh	r3, [r4, #12]
 8006f82:	bf15      	itete	ne
 8006f84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f8e:	81a3      	strheq	r3, [r4, #12]
 8006f90:	bf18      	it	ne
 8006f92:	81a3      	strhne	r3, [r4, #12]
 8006f94:	bd10      	pop	{r4, pc}

08006f96 <__sclose>:
 8006f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f9a:	f000 b809 	b.w	8006fb0 <_close_r>

08006f9e <memset>:
 8006f9e:	4402      	add	r2, r0
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d100      	bne.n	8006fa8 <memset+0xa>
 8006fa6:	4770      	bx	lr
 8006fa8:	f803 1b01 	strb.w	r1, [r3], #1
 8006fac:	e7f9      	b.n	8006fa2 <memset+0x4>
	...

08006fb0 <_close_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	4d06      	ldr	r5, [pc, #24]	@ (8006fcc <_close_r+0x1c>)
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	4608      	mov	r0, r1
 8006fba:	602b      	str	r3, [r5, #0]
 8006fbc:	f7ff fc20 	bl	8006800 <_close>
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	d102      	bne.n	8006fca <_close_r+0x1a>
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	b103      	cbz	r3, 8006fca <_close_r+0x1a>
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	bd38      	pop	{r3, r4, r5, pc}
 8006fcc:	20004a80 	.word	0x20004a80

08006fd0 <_lseek_r>:
 8006fd0:	b538      	push	{r3, r4, r5, lr}
 8006fd2:	4d07      	ldr	r5, [pc, #28]	@ (8006ff0 <_lseek_r+0x20>)
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	4608      	mov	r0, r1
 8006fd8:	4611      	mov	r1, r2
 8006fda:	2200      	movs	r2, #0
 8006fdc:	602a      	str	r2, [r5, #0]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f7ff fbcf 	bl	8006782 <_lseek>
 8006fe4:	1c43      	adds	r3, r0, #1
 8006fe6:	d102      	bne.n	8006fee <_lseek_r+0x1e>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	b103      	cbz	r3, 8006fee <_lseek_r+0x1e>
 8006fec:	6023      	str	r3, [r4, #0]
 8006fee:	bd38      	pop	{r3, r4, r5, pc}
 8006ff0:	20004a80 	.word	0x20004a80

08006ff4 <_read_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	4d07      	ldr	r5, [pc, #28]	@ (8007014 <_read_r+0x20>)
 8006ff8:	4604      	mov	r4, r0
 8006ffa:	4608      	mov	r0, r1
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	2200      	movs	r2, #0
 8007000:	602a      	str	r2, [r5, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	f7ff fb67 	bl	80066d6 <_read>
 8007008:	1c43      	adds	r3, r0, #1
 800700a:	d102      	bne.n	8007012 <_read_r+0x1e>
 800700c:	682b      	ldr	r3, [r5, #0]
 800700e:	b103      	cbz	r3, 8007012 <_read_r+0x1e>
 8007010:	6023      	str	r3, [r4, #0]
 8007012:	bd38      	pop	{r3, r4, r5, pc}
 8007014:	20004a80 	.word	0x20004a80

08007018 <_write_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4d07      	ldr	r5, [pc, #28]	@ (8007038 <_write_r+0x20>)
 800701c:	4604      	mov	r4, r0
 800701e:	4608      	mov	r0, r1
 8007020:	4611      	mov	r1, r2
 8007022:	2200      	movs	r2, #0
 8007024:	602a      	str	r2, [r5, #0]
 8007026:	461a      	mov	r2, r3
 8007028:	f7ff fbbd 	bl	80067a6 <_write>
 800702c:	1c43      	adds	r3, r0, #1
 800702e:	d102      	bne.n	8007036 <_write_r+0x1e>
 8007030:	682b      	ldr	r3, [r5, #0]
 8007032:	b103      	cbz	r3, 8007036 <_write_r+0x1e>
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	bd38      	pop	{r3, r4, r5, pc}
 8007038:	20004a80 	.word	0x20004a80

0800703c <__errno>:
 800703c:	4b01      	ldr	r3, [pc, #4]	@ (8007044 <__errno+0x8>)
 800703e:	6818      	ldr	r0, [r3, #0]
 8007040:	4770      	bx	lr
 8007042:	bf00      	nop
 8007044:	20000024 	.word	0x20000024

08007048 <__libc_init_array>:
 8007048:	b570      	push	{r4, r5, r6, lr}
 800704a:	4d0d      	ldr	r5, [pc, #52]	@ (8007080 <__libc_init_array+0x38>)
 800704c:	4c0d      	ldr	r4, [pc, #52]	@ (8007084 <__libc_init_array+0x3c>)
 800704e:	1b64      	subs	r4, r4, r5
 8007050:	10a4      	asrs	r4, r4, #2
 8007052:	2600      	movs	r6, #0
 8007054:	42a6      	cmp	r6, r4
 8007056:	d109      	bne.n	800706c <__libc_init_array+0x24>
 8007058:	4d0b      	ldr	r5, [pc, #44]	@ (8007088 <__libc_init_array+0x40>)
 800705a:	4c0c      	ldr	r4, [pc, #48]	@ (800708c <__libc_init_array+0x44>)
 800705c:	f000 fec2 	bl	8007de4 <_init>
 8007060:	1b64      	subs	r4, r4, r5
 8007062:	10a4      	asrs	r4, r4, #2
 8007064:	2600      	movs	r6, #0
 8007066:	42a6      	cmp	r6, r4
 8007068:	d105      	bne.n	8007076 <__libc_init_array+0x2e>
 800706a:	bd70      	pop	{r4, r5, r6, pc}
 800706c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007070:	4798      	blx	r3
 8007072:	3601      	adds	r6, #1
 8007074:	e7ee      	b.n	8007054 <__libc_init_array+0xc>
 8007076:	f855 3b04 	ldr.w	r3, [r5], #4
 800707a:	4798      	blx	r3
 800707c:	3601      	adds	r6, #1
 800707e:	e7f2      	b.n	8007066 <__libc_init_array+0x1e>
 8007080:	08007f74 	.word	0x08007f74
 8007084:	08007f74 	.word	0x08007f74
 8007088:	08007f74 	.word	0x08007f74
 800708c:	08007f78 	.word	0x08007f78

08007090 <__retarget_lock_init_recursive>:
 8007090:	4770      	bx	lr

08007092 <__retarget_lock_acquire_recursive>:
 8007092:	4770      	bx	lr

08007094 <__retarget_lock_release_recursive>:
 8007094:	4770      	bx	lr

08007096 <memcpy>:
 8007096:	440a      	add	r2, r1
 8007098:	4291      	cmp	r1, r2
 800709a:	f100 33ff 	add.w	r3, r0, #4294967295
 800709e:	d100      	bne.n	80070a2 <memcpy+0xc>
 80070a0:	4770      	bx	lr
 80070a2:	b510      	push	{r4, lr}
 80070a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ac:	4291      	cmp	r1, r2
 80070ae:	d1f9      	bne.n	80070a4 <memcpy+0xe>
 80070b0:	bd10      	pop	{r4, pc}
	...

080070b4 <_free_r>:
 80070b4:	b538      	push	{r3, r4, r5, lr}
 80070b6:	4605      	mov	r5, r0
 80070b8:	2900      	cmp	r1, #0
 80070ba:	d041      	beq.n	8007140 <_free_r+0x8c>
 80070bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070c0:	1f0c      	subs	r4, r1, #4
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	bfb8      	it	lt
 80070c6:	18e4      	addlt	r4, r4, r3
 80070c8:	f000 f8e0 	bl	800728c <__malloc_lock>
 80070cc:	4a1d      	ldr	r2, [pc, #116]	@ (8007144 <_free_r+0x90>)
 80070ce:	6813      	ldr	r3, [r2, #0]
 80070d0:	b933      	cbnz	r3, 80070e0 <_free_r+0x2c>
 80070d2:	6063      	str	r3, [r4, #4]
 80070d4:	6014      	str	r4, [r2, #0]
 80070d6:	4628      	mov	r0, r5
 80070d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070dc:	f000 b8dc 	b.w	8007298 <__malloc_unlock>
 80070e0:	42a3      	cmp	r3, r4
 80070e2:	d908      	bls.n	80070f6 <_free_r+0x42>
 80070e4:	6820      	ldr	r0, [r4, #0]
 80070e6:	1821      	adds	r1, r4, r0
 80070e8:	428b      	cmp	r3, r1
 80070ea:	bf01      	itttt	eq
 80070ec:	6819      	ldreq	r1, [r3, #0]
 80070ee:	685b      	ldreq	r3, [r3, #4]
 80070f0:	1809      	addeq	r1, r1, r0
 80070f2:	6021      	streq	r1, [r4, #0]
 80070f4:	e7ed      	b.n	80070d2 <_free_r+0x1e>
 80070f6:	461a      	mov	r2, r3
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	b10b      	cbz	r3, 8007100 <_free_r+0x4c>
 80070fc:	42a3      	cmp	r3, r4
 80070fe:	d9fa      	bls.n	80070f6 <_free_r+0x42>
 8007100:	6811      	ldr	r1, [r2, #0]
 8007102:	1850      	adds	r0, r2, r1
 8007104:	42a0      	cmp	r0, r4
 8007106:	d10b      	bne.n	8007120 <_free_r+0x6c>
 8007108:	6820      	ldr	r0, [r4, #0]
 800710a:	4401      	add	r1, r0
 800710c:	1850      	adds	r0, r2, r1
 800710e:	4283      	cmp	r3, r0
 8007110:	6011      	str	r1, [r2, #0]
 8007112:	d1e0      	bne.n	80070d6 <_free_r+0x22>
 8007114:	6818      	ldr	r0, [r3, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	6053      	str	r3, [r2, #4]
 800711a:	4408      	add	r0, r1
 800711c:	6010      	str	r0, [r2, #0]
 800711e:	e7da      	b.n	80070d6 <_free_r+0x22>
 8007120:	d902      	bls.n	8007128 <_free_r+0x74>
 8007122:	230c      	movs	r3, #12
 8007124:	602b      	str	r3, [r5, #0]
 8007126:	e7d6      	b.n	80070d6 <_free_r+0x22>
 8007128:	6820      	ldr	r0, [r4, #0]
 800712a:	1821      	adds	r1, r4, r0
 800712c:	428b      	cmp	r3, r1
 800712e:	bf04      	itt	eq
 8007130:	6819      	ldreq	r1, [r3, #0]
 8007132:	685b      	ldreq	r3, [r3, #4]
 8007134:	6063      	str	r3, [r4, #4]
 8007136:	bf04      	itt	eq
 8007138:	1809      	addeq	r1, r1, r0
 800713a:	6021      	streq	r1, [r4, #0]
 800713c:	6054      	str	r4, [r2, #4]
 800713e:	e7ca      	b.n	80070d6 <_free_r+0x22>
 8007140:	bd38      	pop	{r3, r4, r5, pc}
 8007142:	bf00      	nop
 8007144:	20004a8c 	.word	0x20004a8c

08007148 <sbrk_aligned>:
 8007148:	b570      	push	{r4, r5, r6, lr}
 800714a:	4e0f      	ldr	r6, [pc, #60]	@ (8007188 <sbrk_aligned+0x40>)
 800714c:	460c      	mov	r4, r1
 800714e:	6831      	ldr	r1, [r6, #0]
 8007150:	4605      	mov	r5, r0
 8007152:	b911      	cbnz	r1, 800715a <sbrk_aligned+0x12>
 8007154:	f000 fd7c 	bl	8007c50 <_sbrk_r>
 8007158:	6030      	str	r0, [r6, #0]
 800715a:	4621      	mov	r1, r4
 800715c:	4628      	mov	r0, r5
 800715e:	f000 fd77 	bl	8007c50 <_sbrk_r>
 8007162:	1c43      	adds	r3, r0, #1
 8007164:	d103      	bne.n	800716e <sbrk_aligned+0x26>
 8007166:	f04f 34ff 	mov.w	r4, #4294967295
 800716a:	4620      	mov	r0, r4
 800716c:	bd70      	pop	{r4, r5, r6, pc}
 800716e:	1cc4      	adds	r4, r0, #3
 8007170:	f024 0403 	bic.w	r4, r4, #3
 8007174:	42a0      	cmp	r0, r4
 8007176:	d0f8      	beq.n	800716a <sbrk_aligned+0x22>
 8007178:	1a21      	subs	r1, r4, r0
 800717a:	4628      	mov	r0, r5
 800717c:	f000 fd68 	bl	8007c50 <_sbrk_r>
 8007180:	3001      	adds	r0, #1
 8007182:	d1f2      	bne.n	800716a <sbrk_aligned+0x22>
 8007184:	e7ef      	b.n	8007166 <sbrk_aligned+0x1e>
 8007186:	bf00      	nop
 8007188:	20004a88 	.word	0x20004a88

0800718c <_malloc_r>:
 800718c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007190:	1ccd      	adds	r5, r1, #3
 8007192:	f025 0503 	bic.w	r5, r5, #3
 8007196:	3508      	adds	r5, #8
 8007198:	2d0c      	cmp	r5, #12
 800719a:	bf38      	it	cc
 800719c:	250c      	movcc	r5, #12
 800719e:	2d00      	cmp	r5, #0
 80071a0:	4606      	mov	r6, r0
 80071a2:	db01      	blt.n	80071a8 <_malloc_r+0x1c>
 80071a4:	42a9      	cmp	r1, r5
 80071a6:	d904      	bls.n	80071b2 <_malloc_r+0x26>
 80071a8:	230c      	movs	r3, #12
 80071aa:	6033      	str	r3, [r6, #0]
 80071ac:	2000      	movs	r0, #0
 80071ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007288 <_malloc_r+0xfc>
 80071b6:	f000 f869 	bl	800728c <__malloc_lock>
 80071ba:	f8d8 3000 	ldr.w	r3, [r8]
 80071be:	461c      	mov	r4, r3
 80071c0:	bb44      	cbnz	r4, 8007214 <_malloc_r+0x88>
 80071c2:	4629      	mov	r1, r5
 80071c4:	4630      	mov	r0, r6
 80071c6:	f7ff ffbf 	bl	8007148 <sbrk_aligned>
 80071ca:	1c43      	adds	r3, r0, #1
 80071cc:	4604      	mov	r4, r0
 80071ce:	d158      	bne.n	8007282 <_malloc_r+0xf6>
 80071d0:	f8d8 4000 	ldr.w	r4, [r8]
 80071d4:	4627      	mov	r7, r4
 80071d6:	2f00      	cmp	r7, #0
 80071d8:	d143      	bne.n	8007262 <_malloc_r+0xd6>
 80071da:	2c00      	cmp	r4, #0
 80071dc:	d04b      	beq.n	8007276 <_malloc_r+0xea>
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	4639      	mov	r1, r7
 80071e2:	4630      	mov	r0, r6
 80071e4:	eb04 0903 	add.w	r9, r4, r3
 80071e8:	f000 fd32 	bl	8007c50 <_sbrk_r>
 80071ec:	4581      	cmp	r9, r0
 80071ee:	d142      	bne.n	8007276 <_malloc_r+0xea>
 80071f0:	6821      	ldr	r1, [r4, #0]
 80071f2:	1a6d      	subs	r5, r5, r1
 80071f4:	4629      	mov	r1, r5
 80071f6:	4630      	mov	r0, r6
 80071f8:	f7ff ffa6 	bl	8007148 <sbrk_aligned>
 80071fc:	3001      	adds	r0, #1
 80071fe:	d03a      	beq.n	8007276 <_malloc_r+0xea>
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	442b      	add	r3, r5
 8007204:	6023      	str	r3, [r4, #0]
 8007206:	f8d8 3000 	ldr.w	r3, [r8]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	bb62      	cbnz	r2, 8007268 <_malloc_r+0xdc>
 800720e:	f8c8 7000 	str.w	r7, [r8]
 8007212:	e00f      	b.n	8007234 <_malloc_r+0xa8>
 8007214:	6822      	ldr	r2, [r4, #0]
 8007216:	1b52      	subs	r2, r2, r5
 8007218:	d420      	bmi.n	800725c <_malloc_r+0xd0>
 800721a:	2a0b      	cmp	r2, #11
 800721c:	d917      	bls.n	800724e <_malloc_r+0xc2>
 800721e:	1961      	adds	r1, r4, r5
 8007220:	42a3      	cmp	r3, r4
 8007222:	6025      	str	r5, [r4, #0]
 8007224:	bf18      	it	ne
 8007226:	6059      	strne	r1, [r3, #4]
 8007228:	6863      	ldr	r3, [r4, #4]
 800722a:	bf08      	it	eq
 800722c:	f8c8 1000 	streq.w	r1, [r8]
 8007230:	5162      	str	r2, [r4, r5]
 8007232:	604b      	str	r3, [r1, #4]
 8007234:	4630      	mov	r0, r6
 8007236:	f000 f82f 	bl	8007298 <__malloc_unlock>
 800723a:	f104 000b 	add.w	r0, r4, #11
 800723e:	1d23      	adds	r3, r4, #4
 8007240:	f020 0007 	bic.w	r0, r0, #7
 8007244:	1ac2      	subs	r2, r0, r3
 8007246:	bf1c      	itt	ne
 8007248:	1a1b      	subne	r3, r3, r0
 800724a:	50a3      	strne	r3, [r4, r2]
 800724c:	e7af      	b.n	80071ae <_malloc_r+0x22>
 800724e:	6862      	ldr	r2, [r4, #4]
 8007250:	42a3      	cmp	r3, r4
 8007252:	bf0c      	ite	eq
 8007254:	f8c8 2000 	streq.w	r2, [r8]
 8007258:	605a      	strne	r2, [r3, #4]
 800725a:	e7eb      	b.n	8007234 <_malloc_r+0xa8>
 800725c:	4623      	mov	r3, r4
 800725e:	6864      	ldr	r4, [r4, #4]
 8007260:	e7ae      	b.n	80071c0 <_malloc_r+0x34>
 8007262:	463c      	mov	r4, r7
 8007264:	687f      	ldr	r7, [r7, #4]
 8007266:	e7b6      	b.n	80071d6 <_malloc_r+0x4a>
 8007268:	461a      	mov	r2, r3
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	42a3      	cmp	r3, r4
 800726e:	d1fb      	bne.n	8007268 <_malloc_r+0xdc>
 8007270:	2300      	movs	r3, #0
 8007272:	6053      	str	r3, [r2, #4]
 8007274:	e7de      	b.n	8007234 <_malloc_r+0xa8>
 8007276:	230c      	movs	r3, #12
 8007278:	6033      	str	r3, [r6, #0]
 800727a:	4630      	mov	r0, r6
 800727c:	f000 f80c 	bl	8007298 <__malloc_unlock>
 8007280:	e794      	b.n	80071ac <_malloc_r+0x20>
 8007282:	6005      	str	r5, [r0, #0]
 8007284:	e7d6      	b.n	8007234 <_malloc_r+0xa8>
 8007286:	bf00      	nop
 8007288:	20004a8c 	.word	0x20004a8c

0800728c <__malloc_lock>:
 800728c:	4801      	ldr	r0, [pc, #4]	@ (8007294 <__malloc_lock+0x8>)
 800728e:	f7ff bf00 	b.w	8007092 <__retarget_lock_acquire_recursive>
 8007292:	bf00      	nop
 8007294:	20004a84 	.word	0x20004a84

08007298 <__malloc_unlock>:
 8007298:	4801      	ldr	r0, [pc, #4]	@ (80072a0 <__malloc_unlock+0x8>)
 800729a:	f7ff befb 	b.w	8007094 <__retarget_lock_release_recursive>
 800729e:	bf00      	nop
 80072a0:	20004a84 	.word	0x20004a84

080072a4 <__ssputs_r>:
 80072a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072a8:	688e      	ldr	r6, [r1, #8]
 80072aa:	461f      	mov	r7, r3
 80072ac:	42be      	cmp	r6, r7
 80072ae:	680b      	ldr	r3, [r1, #0]
 80072b0:	4682      	mov	sl, r0
 80072b2:	460c      	mov	r4, r1
 80072b4:	4690      	mov	r8, r2
 80072b6:	d82d      	bhi.n	8007314 <__ssputs_r+0x70>
 80072b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80072c0:	d026      	beq.n	8007310 <__ssputs_r+0x6c>
 80072c2:	6965      	ldr	r5, [r4, #20]
 80072c4:	6909      	ldr	r1, [r1, #16]
 80072c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072ca:	eba3 0901 	sub.w	r9, r3, r1
 80072ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072d2:	1c7b      	adds	r3, r7, #1
 80072d4:	444b      	add	r3, r9
 80072d6:	106d      	asrs	r5, r5, #1
 80072d8:	429d      	cmp	r5, r3
 80072da:	bf38      	it	cc
 80072dc:	461d      	movcc	r5, r3
 80072de:	0553      	lsls	r3, r2, #21
 80072e0:	d527      	bpl.n	8007332 <__ssputs_r+0x8e>
 80072e2:	4629      	mov	r1, r5
 80072e4:	f7ff ff52 	bl	800718c <_malloc_r>
 80072e8:	4606      	mov	r6, r0
 80072ea:	b360      	cbz	r0, 8007346 <__ssputs_r+0xa2>
 80072ec:	6921      	ldr	r1, [r4, #16]
 80072ee:	464a      	mov	r2, r9
 80072f0:	f7ff fed1 	bl	8007096 <memcpy>
 80072f4:	89a3      	ldrh	r3, [r4, #12]
 80072f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80072fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072fe:	81a3      	strh	r3, [r4, #12]
 8007300:	6126      	str	r6, [r4, #16]
 8007302:	6165      	str	r5, [r4, #20]
 8007304:	444e      	add	r6, r9
 8007306:	eba5 0509 	sub.w	r5, r5, r9
 800730a:	6026      	str	r6, [r4, #0]
 800730c:	60a5      	str	r5, [r4, #8]
 800730e:	463e      	mov	r6, r7
 8007310:	42be      	cmp	r6, r7
 8007312:	d900      	bls.n	8007316 <__ssputs_r+0x72>
 8007314:	463e      	mov	r6, r7
 8007316:	6820      	ldr	r0, [r4, #0]
 8007318:	4632      	mov	r2, r6
 800731a:	4641      	mov	r1, r8
 800731c:	f000 fc7e 	bl	8007c1c <memmove>
 8007320:	68a3      	ldr	r3, [r4, #8]
 8007322:	1b9b      	subs	r3, r3, r6
 8007324:	60a3      	str	r3, [r4, #8]
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	4433      	add	r3, r6
 800732a:	6023      	str	r3, [r4, #0]
 800732c:	2000      	movs	r0, #0
 800732e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007332:	462a      	mov	r2, r5
 8007334:	f000 fc9c 	bl	8007c70 <_realloc_r>
 8007338:	4606      	mov	r6, r0
 800733a:	2800      	cmp	r0, #0
 800733c:	d1e0      	bne.n	8007300 <__ssputs_r+0x5c>
 800733e:	6921      	ldr	r1, [r4, #16]
 8007340:	4650      	mov	r0, sl
 8007342:	f7ff feb7 	bl	80070b4 <_free_r>
 8007346:	230c      	movs	r3, #12
 8007348:	f8ca 3000 	str.w	r3, [sl]
 800734c:	89a3      	ldrh	r3, [r4, #12]
 800734e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007352:	81a3      	strh	r3, [r4, #12]
 8007354:	f04f 30ff 	mov.w	r0, #4294967295
 8007358:	e7e9      	b.n	800732e <__ssputs_r+0x8a>
	...

0800735c <_svfiprintf_r>:
 800735c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007360:	4698      	mov	r8, r3
 8007362:	898b      	ldrh	r3, [r1, #12]
 8007364:	061b      	lsls	r3, r3, #24
 8007366:	b09d      	sub	sp, #116	@ 0x74
 8007368:	4607      	mov	r7, r0
 800736a:	460d      	mov	r5, r1
 800736c:	4614      	mov	r4, r2
 800736e:	d510      	bpl.n	8007392 <_svfiprintf_r+0x36>
 8007370:	690b      	ldr	r3, [r1, #16]
 8007372:	b973      	cbnz	r3, 8007392 <_svfiprintf_r+0x36>
 8007374:	2140      	movs	r1, #64	@ 0x40
 8007376:	f7ff ff09 	bl	800718c <_malloc_r>
 800737a:	6028      	str	r0, [r5, #0]
 800737c:	6128      	str	r0, [r5, #16]
 800737e:	b930      	cbnz	r0, 800738e <_svfiprintf_r+0x32>
 8007380:	230c      	movs	r3, #12
 8007382:	603b      	str	r3, [r7, #0]
 8007384:	f04f 30ff 	mov.w	r0, #4294967295
 8007388:	b01d      	add	sp, #116	@ 0x74
 800738a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800738e:	2340      	movs	r3, #64	@ 0x40
 8007390:	616b      	str	r3, [r5, #20]
 8007392:	2300      	movs	r3, #0
 8007394:	9309      	str	r3, [sp, #36]	@ 0x24
 8007396:	2320      	movs	r3, #32
 8007398:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800739c:	f8cd 800c 	str.w	r8, [sp, #12]
 80073a0:	2330      	movs	r3, #48	@ 0x30
 80073a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007540 <_svfiprintf_r+0x1e4>
 80073a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80073aa:	f04f 0901 	mov.w	r9, #1
 80073ae:	4623      	mov	r3, r4
 80073b0:	469a      	mov	sl, r3
 80073b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073b6:	b10a      	cbz	r2, 80073bc <_svfiprintf_r+0x60>
 80073b8:	2a25      	cmp	r2, #37	@ 0x25
 80073ba:	d1f9      	bne.n	80073b0 <_svfiprintf_r+0x54>
 80073bc:	ebba 0b04 	subs.w	fp, sl, r4
 80073c0:	d00b      	beq.n	80073da <_svfiprintf_r+0x7e>
 80073c2:	465b      	mov	r3, fp
 80073c4:	4622      	mov	r2, r4
 80073c6:	4629      	mov	r1, r5
 80073c8:	4638      	mov	r0, r7
 80073ca:	f7ff ff6b 	bl	80072a4 <__ssputs_r>
 80073ce:	3001      	adds	r0, #1
 80073d0:	f000 80a7 	beq.w	8007522 <_svfiprintf_r+0x1c6>
 80073d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073d6:	445a      	add	r2, fp
 80073d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80073da:	f89a 3000 	ldrb.w	r3, [sl]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f000 809f 	beq.w	8007522 <_svfiprintf_r+0x1c6>
 80073e4:	2300      	movs	r3, #0
 80073e6:	f04f 32ff 	mov.w	r2, #4294967295
 80073ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073ee:	f10a 0a01 	add.w	sl, sl, #1
 80073f2:	9304      	str	r3, [sp, #16]
 80073f4:	9307      	str	r3, [sp, #28]
 80073f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80073fc:	4654      	mov	r4, sl
 80073fe:	2205      	movs	r2, #5
 8007400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007404:	484e      	ldr	r0, [pc, #312]	@ (8007540 <_svfiprintf_r+0x1e4>)
 8007406:	f7f8 fefb 	bl	8000200 <memchr>
 800740a:	9a04      	ldr	r2, [sp, #16]
 800740c:	b9d8      	cbnz	r0, 8007446 <_svfiprintf_r+0xea>
 800740e:	06d0      	lsls	r0, r2, #27
 8007410:	bf44      	itt	mi
 8007412:	2320      	movmi	r3, #32
 8007414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007418:	0711      	lsls	r1, r2, #28
 800741a:	bf44      	itt	mi
 800741c:	232b      	movmi	r3, #43	@ 0x2b
 800741e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007422:	f89a 3000 	ldrb.w	r3, [sl]
 8007426:	2b2a      	cmp	r3, #42	@ 0x2a
 8007428:	d015      	beq.n	8007456 <_svfiprintf_r+0xfa>
 800742a:	9a07      	ldr	r2, [sp, #28]
 800742c:	4654      	mov	r4, sl
 800742e:	2000      	movs	r0, #0
 8007430:	f04f 0c0a 	mov.w	ip, #10
 8007434:	4621      	mov	r1, r4
 8007436:	f811 3b01 	ldrb.w	r3, [r1], #1
 800743a:	3b30      	subs	r3, #48	@ 0x30
 800743c:	2b09      	cmp	r3, #9
 800743e:	d94b      	bls.n	80074d8 <_svfiprintf_r+0x17c>
 8007440:	b1b0      	cbz	r0, 8007470 <_svfiprintf_r+0x114>
 8007442:	9207      	str	r2, [sp, #28]
 8007444:	e014      	b.n	8007470 <_svfiprintf_r+0x114>
 8007446:	eba0 0308 	sub.w	r3, r0, r8
 800744a:	fa09 f303 	lsl.w	r3, r9, r3
 800744e:	4313      	orrs	r3, r2
 8007450:	9304      	str	r3, [sp, #16]
 8007452:	46a2      	mov	sl, r4
 8007454:	e7d2      	b.n	80073fc <_svfiprintf_r+0xa0>
 8007456:	9b03      	ldr	r3, [sp, #12]
 8007458:	1d19      	adds	r1, r3, #4
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	9103      	str	r1, [sp, #12]
 800745e:	2b00      	cmp	r3, #0
 8007460:	bfbb      	ittet	lt
 8007462:	425b      	neglt	r3, r3
 8007464:	f042 0202 	orrlt.w	r2, r2, #2
 8007468:	9307      	strge	r3, [sp, #28]
 800746a:	9307      	strlt	r3, [sp, #28]
 800746c:	bfb8      	it	lt
 800746e:	9204      	strlt	r2, [sp, #16]
 8007470:	7823      	ldrb	r3, [r4, #0]
 8007472:	2b2e      	cmp	r3, #46	@ 0x2e
 8007474:	d10a      	bne.n	800748c <_svfiprintf_r+0x130>
 8007476:	7863      	ldrb	r3, [r4, #1]
 8007478:	2b2a      	cmp	r3, #42	@ 0x2a
 800747a:	d132      	bne.n	80074e2 <_svfiprintf_r+0x186>
 800747c:	9b03      	ldr	r3, [sp, #12]
 800747e:	1d1a      	adds	r2, r3, #4
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	9203      	str	r2, [sp, #12]
 8007484:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007488:	3402      	adds	r4, #2
 800748a:	9305      	str	r3, [sp, #20]
 800748c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007550 <_svfiprintf_r+0x1f4>
 8007490:	7821      	ldrb	r1, [r4, #0]
 8007492:	2203      	movs	r2, #3
 8007494:	4650      	mov	r0, sl
 8007496:	f7f8 feb3 	bl	8000200 <memchr>
 800749a:	b138      	cbz	r0, 80074ac <_svfiprintf_r+0x150>
 800749c:	9b04      	ldr	r3, [sp, #16]
 800749e:	eba0 000a 	sub.w	r0, r0, sl
 80074a2:	2240      	movs	r2, #64	@ 0x40
 80074a4:	4082      	lsls	r2, r0
 80074a6:	4313      	orrs	r3, r2
 80074a8:	3401      	adds	r4, #1
 80074aa:	9304      	str	r3, [sp, #16]
 80074ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b0:	4824      	ldr	r0, [pc, #144]	@ (8007544 <_svfiprintf_r+0x1e8>)
 80074b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80074b6:	2206      	movs	r2, #6
 80074b8:	f7f8 fea2 	bl	8000200 <memchr>
 80074bc:	2800      	cmp	r0, #0
 80074be:	d036      	beq.n	800752e <_svfiprintf_r+0x1d2>
 80074c0:	4b21      	ldr	r3, [pc, #132]	@ (8007548 <_svfiprintf_r+0x1ec>)
 80074c2:	bb1b      	cbnz	r3, 800750c <_svfiprintf_r+0x1b0>
 80074c4:	9b03      	ldr	r3, [sp, #12]
 80074c6:	3307      	adds	r3, #7
 80074c8:	f023 0307 	bic.w	r3, r3, #7
 80074cc:	3308      	adds	r3, #8
 80074ce:	9303      	str	r3, [sp, #12]
 80074d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074d2:	4433      	add	r3, r6
 80074d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80074d6:	e76a      	b.n	80073ae <_svfiprintf_r+0x52>
 80074d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80074dc:	460c      	mov	r4, r1
 80074de:	2001      	movs	r0, #1
 80074e0:	e7a8      	b.n	8007434 <_svfiprintf_r+0xd8>
 80074e2:	2300      	movs	r3, #0
 80074e4:	3401      	adds	r4, #1
 80074e6:	9305      	str	r3, [sp, #20]
 80074e8:	4619      	mov	r1, r3
 80074ea:	f04f 0c0a 	mov.w	ip, #10
 80074ee:	4620      	mov	r0, r4
 80074f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074f4:	3a30      	subs	r2, #48	@ 0x30
 80074f6:	2a09      	cmp	r2, #9
 80074f8:	d903      	bls.n	8007502 <_svfiprintf_r+0x1a6>
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0c6      	beq.n	800748c <_svfiprintf_r+0x130>
 80074fe:	9105      	str	r1, [sp, #20]
 8007500:	e7c4      	b.n	800748c <_svfiprintf_r+0x130>
 8007502:	fb0c 2101 	mla	r1, ip, r1, r2
 8007506:	4604      	mov	r4, r0
 8007508:	2301      	movs	r3, #1
 800750a:	e7f0      	b.n	80074ee <_svfiprintf_r+0x192>
 800750c:	ab03      	add	r3, sp, #12
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	462a      	mov	r2, r5
 8007512:	4b0e      	ldr	r3, [pc, #56]	@ (800754c <_svfiprintf_r+0x1f0>)
 8007514:	a904      	add	r1, sp, #16
 8007516:	4638      	mov	r0, r7
 8007518:	f3af 8000 	nop.w
 800751c:	1c42      	adds	r2, r0, #1
 800751e:	4606      	mov	r6, r0
 8007520:	d1d6      	bne.n	80074d0 <_svfiprintf_r+0x174>
 8007522:	89ab      	ldrh	r3, [r5, #12]
 8007524:	065b      	lsls	r3, r3, #25
 8007526:	f53f af2d 	bmi.w	8007384 <_svfiprintf_r+0x28>
 800752a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800752c:	e72c      	b.n	8007388 <_svfiprintf_r+0x2c>
 800752e:	ab03      	add	r3, sp, #12
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	462a      	mov	r2, r5
 8007534:	4b05      	ldr	r3, [pc, #20]	@ (800754c <_svfiprintf_r+0x1f0>)
 8007536:	a904      	add	r1, sp, #16
 8007538:	4638      	mov	r0, r7
 800753a:	f000 f9bb 	bl	80078b4 <_printf_i>
 800753e:	e7ed      	b.n	800751c <_svfiprintf_r+0x1c0>
 8007540:	08007f36 	.word	0x08007f36
 8007544:	08007f40 	.word	0x08007f40
 8007548:	00000000 	.word	0x00000000
 800754c:	080072a5 	.word	0x080072a5
 8007550:	08007f3c 	.word	0x08007f3c

08007554 <__sfputc_r>:
 8007554:	6893      	ldr	r3, [r2, #8]
 8007556:	3b01      	subs	r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	b410      	push	{r4}
 800755c:	6093      	str	r3, [r2, #8]
 800755e:	da08      	bge.n	8007572 <__sfputc_r+0x1e>
 8007560:	6994      	ldr	r4, [r2, #24]
 8007562:	42a3      	cmp	r3, r4
 8007564:	db01      	blt.n	800756a <__sfputc_r+0x16>
 8007566:	290a      	cmp	r1, #10
 8007568:	d103      	bne.n	8007572 <__sfputc_r+0x1e>
 800756a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800756e:	f000 bac1 	b.w	8007af4 <__swbuf_r>
 8007572:	6813      	ldr	r3, [r2, #0]
 8007574:	1c58      	adds	r0, r3, #1
 8007576:	6010      	str	r0, [r2, #0]
 8007578:	7019      	strb	r1, [r3, #0]
 800757a:	4608      	mov	r0, r1
 800757c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007580:	4770      	bx	lr

08007582 <__sfputs_r>:
 8007582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007584:	4606      	mov	r6, r0
 8007586:	460f      	mov	r7, r1
 8007588:	4614      	mov	r4, r2
 800758a:	18d5      	adds	r5, r2, r3
 800758c:	42ac      	cmp	r4, r5
 800758e:	d101      	bne.n	8007594 <__sfputs_r+0x12>
 8007590:	2000      	movs	r0, #0
 8007592:	e007      	b.n	80075a4 <__sfputs_r+0x22>
 8007594:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007598:	463a      	mov	r2, r7
 800759a:	4630      	mov	r0, r6
 800759c:	f7ff ffda 	bl	8007554 <__sfputc_r>
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d1f3      	bne.n	800758c <__sfputs_r+0xa>
 80075a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075a8 <_vfiprintf_r>:
 80075a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	460d      	mov	r5, r1
 80075ae:	b09d      	sub	sp, #116	@ 0x74
 80075b0:	4614      	mov	r4, r2
 80075b2:	4698      	mov	r8, r3
 80075b4:	4606      	mov	r6, r0
 80075b6:	b118      	cbz	r0, 80075c0 <_vfiprintf_r+0x18>
 80075b8:	6a03      	ldr	r3, [r0, #32]
 80075ba:	b90b      	cbnz	r3, 80075c0 <_vfiprintf_r+0x18>
 80075bc:	f7ff fc30 	bl	8006e20 <__sinit>
 80075c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075c2:	07d9      	lsls	r1, r3, #31
 80075c4:	d405      	bmi.n	80075d2 <_vfiprintf_r+0x2a>
 80075c6:	89ab      	ldrh	r3, [r5, #12]
 80075c8:	059a      	lsls	r2, r3, #22
 80075ca:	d402      	bmi.n	80075d2 <_vfiprintf_r+0x2a>
 80075cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075ce:	f7ff fd60 	bl	8007092 <__retarget_lock_acquire_recursive>
 80075d2:	89ab      	ldrh	r3, [r5, #12]
 80075d4:	071b      	lsls	r3, r3, #28
 80075d6:	d501      	bpl.n	80075dc <_vfiprintf_r+0x34>
 80075d8:	692b      	ldr	r3, [r5, #16]
 80075da:	b99b      	cbnz	r3, 8007604 <_vfiprintf_r+0x5c>
 80075dc:	4629      	mov	r1, r5
 80075de:	4630      	mov	r0, r6
 80075e0:	f000 fac6 	bl	8007b70 <__swsetup_r>
 80075e4:	b170      	cbz	r0, 8007604 <_vfiprintf_r+0x5c>
 80075e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075e8:	07dc      	lsls	r4, r3, #31
 80075ea:	d504      	bpl.n	80075f6 <_vfiprintf_r+0x4e>
 80075ec:	f04f 30ff 	mov.w	r0, #4294967295
 80075f0:	b01d      	add	sp, #116	@ 0x74
 80075f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f6:	89ab      	ldrh	r3, [r5, #12]
 80075f8:	0598      	lsls	r0, r3, #22
 80075fa:	d4f7      	bmi.n	80075ec <_vfiprintf_r+0x44>
 80075fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075fe:	f7ff fd49 	bl	8007094 <__retarget_lock_release_recursive>
 8007602:	e7f3      	b.n	80075ec <_vfiprintf_r+0x44>
 8007604:	2300      	movs	r3, #0
 8007606:	9309      	str	r3, [sp, #36]	@ 0x24
 8007608:	2320      	movs	r3, #32
 800760a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800760e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007612:	2330      	movs	r3, #48	@ 0x30
 8007614:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80077c4 <_vfiprintf_r+0x21c>
 8007618:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800761c:	f04f 0901 	mov.w	r9, #1
 8007620:	4623      	mov	r3, r4
 8007622:	469a      	mov	sl, r3
 8007624:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007628:	b10a      	cbz	r2, 800762e <_vfiprintf_r+0x86>
 800762a:	2a25      	cmp	r2, #37	@ 0x25
 800762c:	d1f9      	bne.n	8007622 <_vfiprintf_r+0x7a>
 800762e:	ebba 0b04 	subs.w	fp, sl, r4
 8007632:	d00b      	beq.n	800764c <_vfiprintf_r+0xa4>
 8007634:	465b      	mov	r3, fp
 8007636:	4622      	mov	r2, r4
 8007638:	4629      	mov	r1, r5
 800763a:	4630      	mov	r0, r6
 800763c:	f7ff ffa1 	bl	8007582 <__sfputs_r>
 8007640:	3001      	adds	r0, #1
 8007642:	f000 80a7 	beq.w	8007794 <_vfiprintf_r+0x1ec>
 8007646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007648:	445a      	add	r2, fp
 800764a:	9209      	str	r2, [sp, #36]	@ 0x24
 800764c:	f89a 3000 	ldrb.w	r3, [sl]
 8007650:	2b00      	cmp	r3, #0
 8007652:	f000 809f 	beq.w	8007794 <_vfiprintf_r+0x1ec>
 8007656:	2300      	movs	r3, #0
 8007658:	f04f 32ff 	mov.w	r2, #4294967295
 800765c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007660:	f10a 0a01 	add.w	sl, sl, #1
 8007664:	9304      	str	r3, [sp, #16]
 8007666:	9307      	str	r3, [sp, #28]
 8007668:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800766c:	931a      	str	r3, [sp, #104]	@ 0x68
 800766e:	4654      	mov	r4, sl
 8007670:	2205      	movs	r2, #5
 8007672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007676:	4853      	ldr	r0, [pc, #332]	@ (80077c4 <_vfiprintf_r+0x21c>)
 8007678:	f7f8 fdc2 	bl	8000200 <memchr>
 800767c:	9a04      	ldr	r2, [sp, #16]
 800767e:	b9d8      	cbnz	r0, 80076b8 <_vfiprintf_r+0x110>
 8007680:	06d1      	lsls	r1, r2, #27
 8007682:	bf44      	itt	mi
 8007684:	2320      	movmi	r3, #32
 8007686:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800768a:	0713      	lsls	r3, r2, #28
 800768c:	bf44      	itt	mi
 800768e:	232b      	movmi	r3, #43	@ 0x2b
 8007690:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007694:	f89a 3000 	ldrb.w	r3, [sl]
 8007698:	2b2a      	cmp	r3, #42	@ 0x2a
 800769a:	d015      	beq.n	80076c8 <_vfiprintf_r+0x120>
 800769c:	9a07      	ldr	r2, [sp, #28]
 800769e:	4654      	mov	r4, sl
 80076a0:	2000      	movs	r0, #0
 80076a2:	f04f 0c0a 	mov.w	ip, #10
 80076a6:	4621      	mov	r1, r4
 80076a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076ac:	3b30      	subs	r3, #48	@ 0x30
 80076ae:	2b09      	cmp	r3, #9
 80076b0:	d94b      	bls.n	800774a <_vfiprintf_r+0x1a2>
 80076b2:	b1b0      	cbz	r0, 80076e2 <_vfiprintf_r+0x13a>
 80076b4:	9207      	str	r2, [sp, #28]
 80076b6:	e014      	b.n	80076e2 <_vfiprintf_r+0x13a>
 80076b8:	eba0 0308 	sub.w	r3, r0, r8
 80076bc:	fa09 f303 	lsl.w	r3, r9, r3
 80076c0:	4313      	orrs	r3, r2
 80076c2:	9304      	str	r3, [sp, #16]
 80076c4:	46a2      	mov	sl, r4
 80076c6:	e7d2      	b.n	800766e <_vfiprintf_r+0xc6>
 80076c8:	9b03      	ldr	r3, [sp, #12]
 80076ca:	1d19      	adds	r1, r3, #4
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	9103      	str	r1, [sp, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	bfbb      	ittet	lt
 80076d4:	425b      	neglt	r3, r3
 80076d6:	f042 0202 	orrlt.w	r2, r2, #2
 80076da:	9307      	strge	r3, [sp, #28]
 80076dc:	9307      	strlt	r3, [sp, #28]
 80076de:	bfb8      	it	lt
 80076e0:	9204      	strlt	r2, [sp, #16]
 80076e2:	7823      	ldrb	r3, [r4, #0]
 80076e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80076e6:	d10a      	bne.n	80076fe <_vfiprintf_r+0x156>
 80076e8:	7863      	ldrb	r3, [r4, #1]
 80076ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80076ec:	d132      	bne.n	8007754 <_vfiprintf_r+0x1ac>
 80076ee:	9b03      	ldr	r3, [sp, #12]
 80076f0:	1d1a      	adds	r2, r3, #4
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	9203      	str	r2, [sp, #12]
 80076f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076fa:	3402      	adds	r4, #2
 80076fc:	9305      	str	r3, [sp, #20]
 80076fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80077d4 <_vfiprintf_r+0x22c>
 8007702:	7821      	ldrb	r1, [r4, #0]
 8007704:	2203      	movs	r2, #3
 8007706:	4650      	mov	r0, sl
 8007708:	f7f8 fd7a 	bl	8000200 <memchr>
 800770c:	b138      	cbz	r0, 800771e <_vfiprintf_r+0x176>
 800770e:	9b04      	ldr	r3, [sp, #16]
 8007710:	eba0 000a 	sub.w	r0, r0, sl
 8007714:	2240      	movs	r2, #64	@ 0x40
 8007716:	4082      	lsls	r2, r0
 8007718:	4313      	orrs	r3, r2
 800771a:	3401      	adds	r4, #1
 800771c:	9304      	str	r3, [sp, #16]
 800771e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007722:	4829      	ldr	r0, [pc, #164]	@ (80077c8 <_vfiprintf_r+0x220>)
 8007724:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007728:	2206      	movs	r2, #6
 800772a:	f7f8 fd69 	bl	8000200 <memchr>
 800772e:	2800      	cmp	r0, #0
 8007730:	d03f      	beq.n	80077b2 <_vfiprintf_r+0x20a>
 8007732:	4b26      	ldr	r3, [pc, #152]	@ (80077cc <_vfiprintf_r+0x224>)
 8007734:	bb1b      	cbnz	r3, 800777e <_vfiprintf_r+0x1d6>
 8007736:	9b03      	ldr	r3, [sp, #12]
 8007738:	3307      	adds	r3, #7
 800773a:	f023 0307 	bic.w	r3, r3, #7
 800773e:	3308      	adds	r3, #8
 8007740:	9303      	str	r3, [sp, #12]
 8007742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007744:	443b      	add	r3, r7
 8007746:	9309      	str	r3, [sp, #36]	@ 0x24
 8007748:	e76a      	b.n	8007620 <_vfiprintf_r+0x78>
 800774a:	fb0c 3202 	mla	r2, ip, r2, r3
 800774e:	460c      	mov	r4, r1
 8007750:	2001      	movs	r0, #1
 8007752:	e7a8      	b.n	80076a6 <_vfiprintf_r+0xfe>
 8007754:	2300      	movs	r3, #0
 8007756:	3401      	adds	r4, #1
 8007758:	9305      	str	r3, [sp, #20]
 800775a:	4619      	mov	r1, r3
 800775c:	f04f 0c0a 	mov.w	ip, #10
 8007760:	4620      	mov	r0, r4
 8007762:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007766:	3a30      	subs	r2, #48	@ 0x30
 8007768:	2a09      	cmp	r2, #9
 800776a:	d903      	bls.n	8007774 <_vfiprintf_r+0x1cc>
 800776c:	2b00      	cmp	r3, #0
 800776e:	d0c6      	beq.n	80076fe <_vfiprintf_r+0x156>
 8007770:	9105      	str	r1, [sp, #20]
 8007772:	e7c4      	b.n	80076fe <_vfiprintf_r+0x156>
 8007774:	fb0c 2101 	mla	r1, ip, r1, r2
 8007778:	4604      	mov	r4, r0
 800777a:	2301      	movs	r3, #1
 800777c:	e7f0      	b.n	8007760 <_vfiprintf_r+0x1b8>
 800777e:	ab03      	add	r3, sp, #12
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	462a      	mov	r2, r5
 8007784:	4b12      	ldr	r3, [pc, #72]	@ (80077d0 <_vfiprintf_r+0x228>)
 8007786:	a904      	add	r1, sp, #16
 8007788:	4630      	mov	r0, r6
 800778a:	f3af 8000 	nop.w
 800778e:	4607      	mov	r7, r0
 8007790:	1c78      	adds	r0, r7, #1
 8007792:	d1d6      	bne.n	8007742 <_vfiprintf_r+0x19a>
 8007794:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007796:	07d9      	lsls	r1, r3, #31
 8007798:	d405      	bmi.n	80077a6 <_vfiprintf_r+0x1fe>
 800779a:	89ab      	ldrh	r3, [r5, #12]
 800779c:	059a      	lsls	r2, r3, #22
 800779e:	d402      	bmi.n	80077a6 <_vfiprintf_r+0x1fe>
 80077a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077a2:	f7ff fc77 	bl	8007094 <__retarget_lock_release_recursive>
 80077a6:	89ab      	ldrh	r3, [r5, #12]
 80077a8:	065b      	lsls	r3, r3, #25
 80077aa:	f53f af1f 	bmi.w	80075ec <_vfiprintf_r+0x44>
 80077ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077b0:	e71e      	b.n	80075f0 <_vfiprintf_r+0x48>
 80077b2:	ab03      	add	r3, sp, #12
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	462a      	mov	r2, r5
 80077b8:	4b05      	ldr	r3, [pc, #20]	@ (80077d0 <_vfiprintf_r+0x228>)
 80077ba:	a904      	add	r1, sp, #16
 80077bc:	4630      	mov	r0, r6
 80077be:	f000 f879 	bl	80078b4 <_printf_i>
 80077c2:	e7e4      	b.n	800778e <_vfiprintf_r+0x1e6>
 80077c4:	08007f36 	.word	0x08007f36
 80077c8:	08007f40 	.word	0x08007f40
 80077cc:	00000000 	.word	0x00000000
 80077d0:	08007583 	.word	0x08007583
 80077d4:	08007f3c 	.word	0x08007f3c

080077d8 <_printf_common>:
 80077d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077dc:	4616      	mov	r6, r2
 80077de:	4698      	mov	r8, r3
 80077e0:	688a      	ldr	r2, [r1, #8]
 80077e2:	690b      	ldr	r3, [r1, #16]
 80077e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077e8:	4293      	cmp	r3, r2
 80077ea:	bfb8      	it	lt
 80077ec:	4613      	movlt	r3, r2
 80077ee:	6033      	str	r3, [r6, #0]
 80077f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80077f4:	4607      	mov	r7, r0
 80077f6:	460c      	mov	r4, r1
 80077f8:	b10a      	cbz	r2, 80077fe <_printf_common+0x26>
 80077fa:	3301      	adds	r3, #1
 80077fc:	6033      	str	r3, [r6, #0]
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	0699      	lsls	r1, r3, #26
 8007802:	bf42      	ittt	mi
 8007804:	6833      	ldrmi	r3, [r6, #0]
 8007806:	3302      	addmi	r3, #2
 8007808:	6033      	strmi	r3, [r6, #0]
 800780a:	6825      	ldr	r5, [r4, #0]
 800780c:	f015 0506 	ands.w	r5, r5, #6
 8007810:	d106      	bne.n	8007820 <_printf_common+0x48>
 8007812:	f104 0a19 	add.w	sl, r4, #25
 8007816:	68e3      	ldr	r3, [r4, #12]
 8007818:	6832      	ldr	r2, [r6, #0]
 800781a:	1a9b      	subs	r3, r3, r2
 800781c:	42ab      	cmp	r3, r5
 800781e:	dc26      	bgt.n	800786e <_printf_common+0x96>
 8007820:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007824:	6822      	ldr	r2, [r4, #0]
 8007826:	3b00      	subs	r3, #0
 8007828:	bf18      	it	ne
 800782a:	2301      	movne	r3, #1
 800782c:	0692      	lsls	r2, r2, #26
 800782e:	d42b      	bmi.n	8007888 <_printf_common+0xb0>
 8007830:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007834:	4641      	mov	r1, r8
 8007836:	4638      	mov	r0, r7
 8007838:	47c8      	blx	r9
 800783a:	3001      	adds	r0, #1
 800783c:	d01e      	beq.n	800787c <_printf_common+0xa4>
 800783e:	6823      	ldr	r3, [r4, #0]
 8007840:	6922      	ldr	r2, [r4, #16]
 8007842:	f003 0306 	and.w	r3, r3, #6
 8007846:	2b04      	cmp	r3, #4
 8007848:	bf02      	ittt	eq
 800784a:	68e5      	ldreq	r5, [r4, #12]
 800784c:	6833      	ldreq	r3, [r6, #0]
 800784e:	1aed      	subeq	r5, r5, r3
 8007850:	68a3      	ldr	r3, [r4, #8]
 8007852:	bf0c      	ite	eq
 8007854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007858:	2500      	movne	r5, #0
 800785a:	4293      	cmp	r3, r2
 800785c:	bfc4      	itt	gt
 800785e:	1a9b      	subgt	r3, r3, r2
 8007860:	18ed      	addgt	r5, r5, r3
 8007862:	2600      	movs	r6, #0
 8007864:	341a      	adds	r4, #26
 8007866:	42b5      	cmp	r5, r6
 8007868:	d11a      	bne.n	80078a0 <_printf_common+0xc8>
 800786a:	2000      	movs	r0, #0
 800786c:	e008      	b.n	8007880 <_printf_common+0xa8>
 800786e:	2301      	movs	r3, #1
 8007870:	4652      	mov	r2, sl
 8007872:	4641      	mov	r1, r8
 8007874:	4638      	mov	r0, r7
 8007876:	47c8      	blx	r9
 8007878:	3001      	adds	r0, #1
 800787a:	d103      	bne.n	8007884 <_printf_common+0xac>
 800787c:	f04f 30ff 	mov.w	r0, #4294967295
 8007880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007884:	3501      	adds	r5, #1
 8007886:	e7c6      	b.n	8007816 <_printf_common+0x3e>
 8007888:	18e1      	adds	r1, r4, r3
 800788a:	1c5a      	adds	r2, r3, #1
 800788c:	2030      	movs	r0, #48	@ 0x30
 800788e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007892:	4422      	add	r2, r4
 8007894:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007898:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800789c:	3302      	adds	r3, #2
 800789e:	e7c7      	b.n	8007830 <_printf_common+0x58>
 80078a0:	2301      	movs	r3, #1
 80078a2:	4622      	mov	r2, r4
 80078a4:	4641      	mov	r1, r8
 80078a6:	4638      	mov	r0, r7
 80078a8:	47c8      	blx	r9
 80078aa:	3001      	adds	r0, #1
 80078ac:	d0e6      	beq.n	800787c <_printf_common+0xa4>
 80078ae:	3601      	adds	r6, #1
 80078b0:	e7d9      	b.n	8007866 <_printf_common+0x8e>
	...

080078b4 <_printf_i>:
 80078b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078b8:	7e0f      	ldrb	r7, [r1, #24]
 80078ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80078bc:	2f78      	cmp	r7, #120	@ 0x78
 80078be:	4691      	mov	r9, r2
 80078c0:	4680      	mov	r8, r0
 80078c2:	460c      	mov	r4, r1
 80078c4:	469a      	mov	sl, r3
 80078c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80078ca:	d807      	bhi.n	80078dc <_printf_i+0x28>
 80078cc:	2f62      	cmp	r7, #98	@ 0x62
 80078ce:	d80a      	bhi.n	80078e6 <_printf_i+0x32>
 80078d0:	2f00      	cmp	r7, #0
 80078d2:	f000 80d2 	beq.w	8007a7a <_printf_i+0x1c6>
 80078d6:	2f58      	cmp	r7, #88	@ 0x58
 80078d8:	f000 80b9 	beq.w	8007a4e <_printf_i+0x19a>
 80078dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80078e4:	e03a      	b.n	800795c <_printf_i+0xa8>
 80078e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80078ea:	2b15      	cmp	r3, #21
 80078ec:	d8f6      	bhi.n	80078dc <_printf_i+0x28>
 80078ee:	a101      	add	r1, pc, #4	@ (adr r1, 80078f4 <_printf_i+0x40>)
 80078f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078f4:	0800794d 	.word	0x0800794d
 80078f8:	08007961 	.word	0x08007961
 80078fc:	080078dd 	.word	0x080078dd
 8007900:	080078dd 	.word	0x080078dd
 8007904:	080078dd 	.word	0x080078dd
 8007908:	080078dd 	.word	0x080078dd
 800790c:	08007961 	.word	0x08007961
 8007910:	080078dd 	.word	0x080078dd
 8007914:	080078dd 	.word	0x080078dd
 8007918:	080078dd 	.word	0x080078dd
 800791c:	080078dd 	.word	0x080078dd
 8007920:	08007a61 	.word	0x08007a61
 8007924:	0800798b 	.word	0x0800798b
 8007928:	08007a1b 	.word	0x08007a1b
 800792c:	080078dd 	.word	0x080078dd
 8007930:	080078dd 	.word	0x080078dd
 8007934:	08007a83 	.word	0x08007a83
 8007938:	080078dd 	.word	0x080078dd
 800793c:	0800798b 	.word	0x0800798b
 8007940:	080078dd 	.word	0x080078dd
 8007944:	080078dd 	.word	0x080078dd
 8007948:	08007a23 	.word	0x08007a23
 800794c:	6833      	ldr	r3, [r6, #0]
 800794e:	1d1a      	adds	r2, r3, #4
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6032      	str	r2, [r6, #0]
 8007954:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007958:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800795c:	2301      	movs	r3, #1
 800795e:	e09d      	b.n	8007a9c <_printf_i+0x1e8>
 8007960:	6833      	ldr	r3, [r6, #0]
 8007962:	6820      	ldr	r0, [r4, #0]
 8007964:	1d19      	adds	r1, r3, #4
 8007966:	6031      	str	r1, [r6, #0]
 8007968:	0606      	lsls	r6, r0, #24
 800796a:	d501      	bpl.n	8007970 <_printf_i+0xbc>
 800796c:	681d      	ldr	r5, [r3, #0]
 800796e:	e003      	b.n	8007978 <_printf_i+0xc4>
 8007970:	0645      	lsls	r5, r0, #25
 8007972:	d5fb      	bpl.n	800796c <_printf_i+0xb8>
 8007974:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007978:	2d00      	cmp	r5, #0
 800797a:	da03      	bge.n	8007984 <_printf_i+0xd0>
 800797c:	232d      	movs	r3, #45	@ 0x2d
 800797e:	426d      	negs	r5, r5
 8007980:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007984:	4859      	ldr	r0, [pc, #356]	@ (8007aec <_printf_i+0x238>)
 8007986:	230a      	movs	r3, #10
 8007988:	e011      	b.n	80079ae <_printf_i+0xfa>
 800798a:	6821      	ldr	r1, [r4, #0]
 800798c:	6833      	ldr	r3, [r6, #0]
 800798e:	0608      	lsls	r0, r1, #24
 8007990:	f853 5b04 	ldr.w	r5, [r3], #4
 8007994:	d402      	bmi.n	800799c <_printf_i+0xe8>
 8007996:	0649      	lsls	r1, r1, #25
 8007998:	bf48      	it	mi
 800799a:	b2ad      	uxthmi	r5, r5
 800799c:	2f6f      	cmp	r7, #111	@ 0x6f
 800799e:	4853      	ldr	r0, [pc, #332]	@ (8007aec <_printf_i+0x238>)
 80079a0:	6033      	str	r3, [r6, #0]
 80079a2:	bf14      	ite	ne
 80079a4:	230a      	movne	r3, #10
 80079a6:	2308      	moveq	r3, #8
 80079a8:	2100      	movs	r1, #0
 80079aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80079ae:	6866      	ldr	r6, [r4, #4]
 80079b0:	60a6      	str	r6, [r4, #8]
 80079b2:	2e00      	cmp	r6, #0
 80079b4:	bfa2      	ittt	ge
 80079b6:	6821      	ldrge	r1, [r4, #0]
 80079b8:	f021 0104 	bicge.w	r1, r1, #4
 80079bc:	6021      	strge	r1, [r4, #0]
 80079be:	b90d      	cbnz	r5, 80079c4 <_printf_i+0x110>
 80079c0:	2e00      	cmp	r6, #0
 80079c2:	d04b      	beq.n	8007a5c <_printf_i+0x1a8>
 80079c4:	4616      	mov	r6, r2
 80079c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80079ca:	fb03 5711 	mls	r7, r3, r1, r5
 80079ce:	5dc7      	ldrb	r7, [r0, r7]
 80079d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079d4:	462f      	mov	r7, r5
 80079d6:	42bb      	cmp	r3, r7
 80079d8:	460d      	mov	r5, r1
 80079da:	d9f4      	bls.n	80079c6 <_printf_i+0x112>
 80079dc:	2b08      	cmp	r3, #8
 80079de:	d10b      	bne.n	80079f8 <_printf_i+0x144>
 80079e0:	6823      	ldr	r3, [r4, #0]
 80079e2:	07df      	lsls	r7, r3, #31
 80079e4:	d508      	bpl.n	80079f8 <_printf_i+0x144>
 80079e6:	6923      	ldr	r3, [r4, #16]
 80079e8:	6861      	ldr	r1, [r4, #4]
 80079ea:	4299      	cmp	r1, r3
 80079ec:	bfde      	ittt	le
 80079ee:	2330      	movle	r3, #48	@ 0x30
 80079f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80079f8:	1b92      	subs	r2, r2, r6
 80079fa:	6122      	str	r2, [r4, #16]
 80079fc:	f8cd a000 	str.w	sl, [sp]
 8007a00:	464b      	mov	r3, r9
 8007a02:	aa03      	add	r2, sp, #12
 8007a04:	4621      	mov	r1, r4
 8007a06:	4640      	mov	r0, r8
 8007a08:	f7ff fee6 	bl	80077d8 <_printf_common>
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	d14a      	bne.n	8007aa6 <_printf_i+0x1f2>
 8007a10:	f04f 30ff 	mov.w	r0, #4294967295
 8007a14:	b004      	add	sp, #16
 8007a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a1a:	6823      	ldr	r3, [r4, #0]
 8007a1c:	f043 0320 	orr.w	r3, r3, #32
 8007a20:	6023      	str	r3, [r4, #0]
 8007a22:	4833      	ldr	r0, [pc, #204]	@ (8007af0 <_printf_i+0x23c>)
 8007a24:	2778      	movs	r7, #120	@ 0x78
 8007a26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a2a:	6823      	ldr	r3, [r4, #0]
 8007a2c:	6831      	ldr	r1, [r6, #0]
 8007a2e:	061f      	lsls	r7, r3, #24
 8007a30:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a34:	d402      	bmi.n	8007a3c <_printf_i+0x188>
 8007a36:	065f      	lsls	r7, r3, #25
 8007a38:	bf48      	it	mi
 8007a3a:	b2ad      	uxthmi	r5, r5
 8007a3c:	6031      	str	r1, [r6, #0]
 8007a3e:	07d9      	lsls	r1, r3, #31
 8007a40:	bf44      	itt	mi
 8007a42:	f043 0320 	orrmi.w	r3, r3, #32
 8007a46:	6023      	strmi	r3, [r4, #0]
 8007a48:	b11d      	cbz	r5, 8007a52 <_printf_i+0x19e>
 8007a4a:	2310      	movs	r3, #16
 8007a4c:	e7ac      	b.n	80079a8 <_printf_i+0xf4>
 8007a4e:	4827      	ldr	r0, [pc, #156]	@ (8007aec <_printf_i+0x238>)
 8007a50:	e7e9      	b.n	8007a26 <_printf_i+0x172>
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	f023 0320 	bic.w	r3, r3, #32
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	e7f6      	b.n	8007a4a <_printf_i+0x196>
 8007a5c:	4616      	mov	r6, r2
 8007a5e:	e7bd      	b.n	80079dc <_printf_i+0x128>
 8007a60:	6833      	ldr	r3, [r6, #0]
 8007a62:	6825      	ldr	r5, [r4, #0]
 8007a64:	6961      	ldr	r1, [r4, #20]
 8007a66:	1d18      	adds	r0, r3, #4
 8007a68:	6030      	str	r0, [r6, #0]
 8007a6a:	062e      	lsls	r6, r5, #24
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	d501      	bpl.n	8007a74 <_printf_i+0x1c0>
 8007a70:	6019      	str	r1, [r3, #0]
 8007a72:	e002      	b.n	8007a7a <_printf_i+0x1c6>
 8007a74:	0668      	lsls	r0, r5, #25
 8007a76:	d5fb      	bpl.n	8007a70 <_printf_i+0x1bc>
 8007a78:	8019      	strh	r1, [r3, #0]
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	6123      	str	r3, [r4, #16]
 8007a7e:	4616      	mov	r6, r2
 8007a80:	e7bc      	b.n	80079fc <_printf_i+0x148>
 8007a82:	6833      	ldr	r3, [r6, #0]
 8007a84:	1d1a      	adds	r2, r3, #4
 8007a86:	6032      	str	r2, [r6, #0]
 8007a88:	681e      	ldr	r6, [r3, #0]
 8007a8a:	6862      	ldr	r2, [r4, #4]
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	4630      	mov	r0, r6
 8007a90:	f7f8 fbb6 	bl	8000200 <memchr>
 8007a94:	b108      	cbz	r0, 8007a9a <_printf_i+0x1e6>
 8007a96:	1b80      	subs	r0, r0, r6
 8007a98:	6060      	str	r0, [r4, #4]
 8007a9a:	6863      	ldr	r3, [r4, #4]
 8007a9c:	6123      	str	r3, [r4, #16]
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007aa4:	e7aa      	b.n	80079fc <_printf_i+0x148>
 8007aa6:	6923      	ldr	r3, [r4, #16]
 8007aa8:	4632      	mov	r2, r6
 8007aaa:	4649      	mov	r1, r9
 8007aac:	4640      	mov	r0, r8
 8007aae:	47d0      	blx	sl
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	d0ad      	beq.n	8007a10 <_printf_i+0x15c>
 8007ab4:	6823      	ldr	r3, [r4, #0]
 8007ab6:	079b      	lsls	r3, r3, #30
 8007ab8:	d413      	bmi.n	8007ae2 <_printf_i+0x22e>
 8007aba:	68e0      	ldr	r0, [r4, #12]
 8007abc:	9b03      	ldr	r3, [sp, #12]
 8007abe:	4298      	cmp	r0, r3
 8007ac0:	bfb8      	it	lt
 8007ac2:	4618      	movlt	r0, r3
 8007ac4:	e7a6      	b.n	8007a14 <_printf_i+0x160>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	4632      	mov	r2, r6
 8007aca:	4649      	mov	r1, r9
 8007acc:	4640      	mov	r0, r8
 8007ace:	47d0      	blx	sl
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	d09d      	beq.n	8007a10 <_printf_i+0x15c>
 8007ad4:	3501      	adds	r5, #1
 8007ad6:	68e3      	ldr	r3, [r4, #12]
 8007ad8:	9903      	ldr	r1, [sp, #12]
 8007ada:	1a5b      	subs	r3, r3, r1
 8007adc:	42ab      	cmp	r3, r5
 8007ade:	dcf2      	bgt.n	8007ac6 <_printf_i+0x212>
 8007ae0:	e7eb      	b.n	8007aba <_printf_i+0x206>
 8007ae2:	2500      	movs	r5, #0
 8007ae4:	f104 0619 	add.w	r6, r4, #25
 8007ae8:	e7f5      	b.n	8007ad6 <_printf_i+0x222>
 8007aea:	bf00      	nop
 8007aec:	08007f47 	.word	0x08007f47
 8007af0:	08007f58 	.word	0x08007f58

08007af4 <__swbuf_r>:
 8007af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af6:	460e      	mov	r6, r1
 8007af8:	4614      	mov	r4, r2
 8007afa:	4605      	mov	r5, r0
 8007afc:	b118      	cbz	r0, 8007b06 <__swbuf_r+0x12>
 8007afe:	6a03      	ldr	r3, [r0, #32]
 8007b00:	b90b      	cbnz	r3, 8007b06 <__swbuf_r+0x12>
 8007b02:	f7ff f98d 	bl	8006e20 <__sinit>
 8007b06:	69a3      	ldr	r3, [r4, #24]
 8007b08:	60a3      	str	r3, [r4, #8]
 8007b0a:	89a3      	ldrh	r3, [r4, #12]
 8007b0c:	071a      	lsls	r2, r3, #28
 8007b0e:	d501      	bpl.n	8007b14 <__swbuf_r+0x20>
 8007b10:	6923      	ldr	r3, [r4, #16]
 8007b12:	b943      	cbnz	r3, 8007b26 <__swbuf_r+0x32>
 8007b14:	4621      	mov	r1, r4
 8007b16:	4628      	mov	r0, r5
 8007b18:	f000 f82a 	bl	8007b70 <__swsetup_r>
 8007b1c:	b118      	cbz	r0, 8007b26 <__swbuf_r+0x32>
 8007b1e:	f04f 37ff 	mov.w	r7, #4294967295
 8007b22:	4638      	mov	r0, r7
 8007b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b26:	6823      	ldr	r3, [r4, #0]
 8007b28:	6922      	ldr	r2, [r4, #16]
 8007b2a:	1a98      	subs	r0, r3, r2
 8007b2c:	6963      	ldr	r3, [r4, #20]
 8007b2e:	b2f6      	uxtb	r6, r6
 8007b30:	4283      	cmp	r3, r0
 8007b32:	4637      	mov	r7, r6
 8007b34:	dc05      	bgt.n	8007b42 <__swbuf_r+0x4e>
 8007b36:	4621      	mov	r1, r4
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f7ff f8a9 	bl	8006c90 <_fflush_r>
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	d1ed      	bne.n	8007b1e <__swbuf_r+0x2a>
 8007b42:	68a3      	ldr	r3, [r4, #8]
 8007b44:	3b01      	subs	r3, #1
 8007b46:	60a3      	str	r3, [r4, #8]
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	1c5a      	adds	r2, r3, #1
 8007b4c:	6022      	str	r2, [r4, #0]
 8007b4e:	701e      	strb	r6, [r3, #0]
 8007b50:	6962      	ldr	r2, [r4, #20]
 8007b52:	1c43      	adds	r3, r0, #1
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d004      	beq.n	8007b62 <__swbuf_r+0x6e>
 8007b58:	89a3      	ldrh	r3, [r4, #12]
 8007b5a:	07db      	lsls	r3, r3, #31
 8007b5c:	d5e1      	bpl.n	8007b22 <__swbuf_r+0x2e>
 8007b5e:	2e0a      	cmp	r6, #10
 8007b60:	d1df      	bne.n	8007b22 <__swbuf_r+0x2e>
 8007b62:	4621      	mov	r1, r4
 8007b64:	4628      	mov	r0, r5
 8007b66:	f7ff f893 	bl	8006c90 <_fflush_r>
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	d0d9      	beq.n	8007b22 <__swbuf_r+0x2e>
 8007b6e:	e7d6      	b.n	8007b1e <__swbuf_r+0x2a>

08007b70 <__swsetup_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4b29      	ldr	r3, [pc, #164]	@ (8007c18 <__swsetup_r+0xa8>)
 8007b74:	4605      	mov	r5, r0
 8007b76:	6818      	ldr	r0, [r3, #0]
 8007b78:	460c      	mov	r4, r1
 8007b7a:	b118      	cbz	r0, 8007b84 <__swsetup_r+0x14>
 8007b7c:	6a03      	ldr	r3, [r0, #32]
 8007b7e:	b90b      	cbnz	r3, 8007b84 <__swsetup_r+0x14>
 8007b80:	f7ff f94e 	bl	8006e20 <__sinit>
 8007b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b88:	0719      	lsls	r1, r3, #28
 8007b8a:	d422      	bmi.n	8007bd2 <__swsetup_r+0x62>
 8007b8c:	06da      	lsls	r2, r3, #27
 8007b8e:	d407      	bmi.n	8007ba0 <__swsetup_r+0x30>
 8007b90:	2209      	movs	r2, #9
 8007b92:	602a      	str	r2, [r5, #0]
 8007b94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b98:	81a3      	strh	r3, [r4, #12]
 8007b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b9e:	e033      	b.n	8007c08 <__swsetup_r+0x98>
 8007ba0:	0758      	lsls	r0, r3, #29
 8007ba2:	d512      	bpl.n	8007bca <__swsetup_r+0x5a>
 8007ba4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ba6:	b141      	cbz	r1, 8007bba <__swsetup_r+0x4a>
 8007ba8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007bac:	4299      	cmp	r1, r3
 8007bae:	d002      	beq.n	8007bb6 <__swsetup_r+0x46>
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	f7ff fa7f 	bl	80070b4 <_free_r>
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bba:	89a3      	ldrh	r3, [r4, #12]
 8007bbc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007bc0:	81a3      	strh	r3, [r4, #12]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	6063      	str	r3, [r4, #4]
 8007bc6:	6923      	ldr	r3, [r4, #16]
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	89a3      	ldrh	r3, [r4, #12]
 8007bcc:	f043 0308 	orr.w	r3, r3, #8
 8007bd0:	81a3      	strh	r3, [r4, #12]
 8007bd2:	6923      	ldr	r3, [r4, #16]
 8007bd4:	b94b      	cbnz	r3, 8007bea <__swsetup_r+0x7a>
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007bdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007be0:	d003      	beq.n	8007bea <__swsetup_r+0x7a>
 8007be2:	4621      	mov	r1, r4
 8007be4:	4628      	mov	r0, r5
 8007be6:	f000 f897 	bl	8007d18 <__smakebuf_r>
 8007bea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bee:	f013 0201 	ands.w	r2, r3, #1
 8007bf2:	d00a      	beq.n	8007c0a <__swsetup_r+0x9a>
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	60a2      	str	r2, [r4, #8]
 8007bf8:	6962      	ldr	r2, [r4, #20]
 8007bfa:	4252      	negs	r2, r2
 8007bfc:	61a2      	str	r2, [r4, #24]
 8007bfe:	6922      	ldr	r2, [r4, #16]
 8007c00:	b942      	cbnz	r2, 8007c14 <__swsetup_r+0xa4>
 8007c02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c06:	d1c5      	bne.n	8007b94 <__swsetup_r+0x24>
 8007c08:	bd38      	pop	{r3, r4, r5, pc}
 8007c0a:	0799      	lsls	r1, r3, #30
 8007c0c:	bf58      	it	pl
 8007c0e:	6962      	ldrpl	r2, [r4, #20]
 8007c10:	60a2      	str	r2, [r4, #8]
 8007c12:	e7f4      	b.n	8007bfe <__swsetup_r+0x8e>
 8007c14:	2000      	movs	r0, #0
 8007c16:	e7f7      	b.n	8007c08 <__swsetup_r+0x98>
 8007c18:	20000024 	.word	0x20000024

08007c1c <memmove>:
 8007c1c:	4288      	cmp	r0, r1
 8007c1e:	b510      	push	{r4, lr}
 8007c20:	eb01 0402 	add.w	r4, r1, r2
 8007c24:	d902      	bls.n	8007c2c <memmove+0x10>
 8007c26:	4284      	cmp	r4, r0
 8007c28:	4623      	mov	r3, r4
 8007c2a:	d807      	bhi.n	8007c3c <memmove+0x20>
 8007c2c:	1e43      	subs	r3, r0, #1
 8007c2e:	42a1      	cmp	r1, r4
 8007c30:	d008      	beq.n	8007c44 <memmove+0x28>
 8007c32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c3a:	e7f8      	b.n	8007c2e <memmove+0x12>
 8007c3c:	4402      	add	r2, r0
 8007c3e:	4601      	mov	r1, r0
 8007c40:	428a      	cmp	r2, r1
 8007c42:	d100      	bne.n	8007c46 <memmove+0x2a>
 8007c44:	bd10      	pop	{r4, pc}
 8007c46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c4e:	e7f7      	b.n	8007c40 <memmove+0x24>

08007c50 <_sbrk_r>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	4d06      	ldr	r5, [pc, #24]	@ (8007c6c <_sbrk_r+0x1c>)
 8007c54:	2300      	movs	r3, #0
 8007c56:	4604      	mov	r4, r0
 8007c58:	4608      	mov	r0, r1
 8007c5a:	602b      	str	r3, [r5, #0]
 8007c5c:	f7f9 f976 	bl	8000f4c <_sbrk>
 8007c60:	1c43      	adds	r3, r0, #1
 8007c62:	d102      	bne.n	8007c6a <_sbrk_r+0x1a>
 8007c64:	682b      	ldr	r3, [r5, #0]
 8007c66:	b103      	cbz	r3, 8007c6a <_sbrk_r+0x1a>
 8007c68:	6023      	str	r3, [r4, #0]
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
 8007c6c:	20004a80 	.word	0x20004a80

08007c70 <_realloc_r>:
 8007c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c74:	4680      	mov	r8, r0
 8007c76:	4615      	mov	r5, r2
 8007c78:	460c      	mov	r4, r1
 8007c7a:	b921      	cbnz	r1, 8007c86 <_realloc_r+0x16>
 8007c7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c80:	4611      	mov	r1, r2
 8007c82:	f7ff ba83 	b.w	800718c <_malloc_r>
 8007c86:	b92a      	cbnz	r2, 8007c94 <_realloc_r+0x24>
 8007c88:	f7ff fa14 	bl	80070b4 <_free_r>
 8007c8c:	2400      	movs	r4, #0
 8007c8e:	4620      	mov	r0, r4
 8007c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c94:	f000 f89e 	bl	8007dd4 <_malloc_usable_size_r>
 8007c98:	4285      	cmp	r5, r0
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	d802      	bhi.n	8007ca4 <_realloc_r+0x34>
 8007c9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007ca2:	d8f4      	bhi.n	8007c8e <_realloc_r+0x1e>
 8007ca4:	4629      	mov	r1, r5
 8007ca6:	4640      	mov	r0, r8
 8007ca8:	f7ff fa70 	bl	800718c <_malloc_r>
 8007cac:	4607      	mov	r7, r0
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d0ec      	beq.n	8007c8c <_realloc_r+0x1c>
 8007cb2:	42b5      	cmp	r5, r6
 8007cb4:	462a      	mov	r2, r5
 8007cb6:	4621      	mov	r1, r4
 8007cb8:	bf28      	it	cs
 8007cba:	4632      	movcs	r2, r6
 8007cbc:	f7ff f9eb 	bl	8007096 <memcpy>
 8007cc0:	4621      	mov	r1, r4
 8007cc2:	4640      	mov	r0, r8
 8007cc4:	f7ff f9f6 	bl	80070b4 <_free_r>
 8007cc8:	463c      	mov	r4, r7
 8007cca:	e7e0      	b.n	8007c8e <_realloc_r+0x1e>

08007ccc <__swhatbuf_r>:
 8007ccc:	b570      	push	{r4, r5, r6, lr}
 8007cce:	460c      	mov	r4, r1
 8007cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd4:	2900      	cmp	r1, #0
 8007cd6:	b096      	sub	sp, #88	@ 0x58
 8007cd8:	4615      	mov	r5, r2
 8007cda:	461e      	mov	r6, r3
 8007cdc:	da0d      	bge.n	8007cfa <__swhatbuf_r+0x2e>
 8007cde:	89a3      	ldrh	r3, [r4, #12]
 8007ce0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ce4:	f04f 0100 	mov.w	r1, #0
 8007ce8:	bf14      	ite	ne
 8007cea:	2340      	movne	r3, #64	@ 0x40
 8007cec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	6031      	str	r1, [r6, #0]
 8007cf4:	602b      	str	r3, [r5, #0]
 8007cf6:	b016      	add	sp, #88	@ 0x58
 8007cf8:	bd70      	pop	{r4, r5, r6, pc}
 8007cfa:	466a      	mov	r2, sp
 8007cfc:	f000 f848 	bl	8007d90 <_fstat_r>
 8007d00:	2800      	cmp	r0, #0
 8007d02:	dbec      	blt.n	8007cde <__swhatbuf_r+0x12>
 8007d04:	9901      	ldr	r1, [sp, #4]
 8007d06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d0e:	4259      	negs	r1, r3
 8007d10:	4159      	adcs	r1, r3
 8007d12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d16:	e7eb      	b.n	8007cf0 <__swhatbuf_r+0x24>

08007d18 <__smakebuf_r>:
 8007d18:	898b      	ldrh	r3, [r1, #12]
 8007d1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d1c:	079d      	lsls	r5, r3, #30
 8007d1e:	4606      	mov	r6, r0
 8007d20:	460c      	mov	r4, r1
 8007d22:	d507      	bpl.n	8007d34 <__smakebuf_r+0x1c>
 8007d24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d28:	6023      	str	r3, [r4, #0]
 8007d2a:	6123      	str	r3, [r4, #16]
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	6163      	str	r3, [r4, #20]
 8007d30:	b003      	add	sp, #12
 8007d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d34:	ab01      	add	r3, sp, #4
 8007d36:	466a      	mov	r2, sp
 8007d38:	f7ff ffc8 	bl	8007ccc <__swhatbuf_r>
 8007d3c:	9f00      	ldr	r7, [sp, #0]
 8007d3e:	4605      	mov	r5, r0
 8007d40:	4639      	mov	r1, r7
 8007d42:	4630      	mov	r0, r6
 8007d44:	f7ff fa22 	bl	800718c <_malloc_r>
 8007d48:	b948      	cbnz	r0, 8007d5e <__smakebuf_r+0x46>
 8007d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d4e:	059a      	lsls	r2, r3, #22
 8007d50:	d4ee      	bmi.n	8007d30 <__smakebuf_r+0x18>
 8007d52:	f023 0303 	bic.w	r3, r3, #3
 8007d56:	f043 0302 	orr.w	r3, r3, #2
 8007d5a:	81a3      	strh	r3, [r4, #12]
 8007d5c:	e7e2      	b.n	8007d24 <__smakebuf_r+0xc>
 8007d5e:	89a3      	ldrh	r3, [r4, #12]
 8007d60:	6020      	str	r0, [r4, #0]
 8007d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d66:	81a3      	strh	r3, [r4, #12]
 8007d68:	9b01      	ldr	r3, [sp, #4]
 8007d6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007d6e:	b15b      	cbz	r3, 8007d88 <__smakebuf_r+0x70>
 8007d70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d74:	4630      	mov	r0, r6
 8007d76:	f000 f81d 	bl	8007db4 <_isatty_r>
 8007d7a:	b128      	cbz	r0, 8007d88 <__smakebuf_r+0x70>
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	f023 0303 	bic.w	r3, r3, #3
 8007d82:	f043 0301 	orr.w	r3, r3, #1
 8007d86:	81a3      	strh	r3, [r4, #12]
 8007d88:	89a3      	ldrh	r3, [r4, #12]
 8007d8a:	431d      	orrs	r5, r3
 8007d8c:	81a5      	strh	r5, [r4, #12]
 8007d8e:	e7cf      	b.n	8007d30 <__smakebuf_r+0x18>

08007d90 <_fstat_r>:
 8007d90:	b538      	push	{r3, r4, r5, lr}
 8007d92:	4d07      	ldr	r5, [pc, #28]	@ (8007db0 <_fstat_r+0x20>)
 8007d94:	2300      	movs	r3, #0
 8007d96:	4604      	mov	r4, r0
 8007d98:	4608      	mov	r0, r1
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	602b      	str	r3, [r5, #0]
 8007d9e:	f7fe fd72 	bl	8006886 <_fstat>
 8007da2:	1c43      	adds	r3, r0, #1
 8007da4:	d102      	bne.n	8007dac <_fstat_r+0x1c>
 8007da6:	682b      	ldr	r3, [r5, #0]
 8007da8:	b103      	cbz	r3, 8007dac <_fstat_r+0x1c>
 8007daa:	6023      	str	r3, [r4, #0]
 8007dac:	bd38      	pop	{r3, r4, r5, pc}
 8007dae:	bf00      	nop
 8007db0:	20004a80 	.word	0x20004a80

08007db4 <_isatty_r>:
 8007db4:	b538      	push	{r3, r4, r5, lr}
 8007db6:	4d06      	ldr	r5, [pc, #24]	@ (8007dd0 <_isatty_r+0x1c>)
 8007db8:	2300      	movs	r3, #0
 8007dba:	4604      	mov	r4, r0
 8007dbc:	4608      	mov	r0, r1
 8007dbe:	602b      	str	r3, [r5, #0]
 8007dc0:	f7fe fec4 	bl	8006b4c <_isatty>
 8007dc4:	1c43      	adds	r3, r0, #1
 8007dc6:	d102      	bne.n	8007dce <_isatty_r+0x1a>
 8007dc8:	682b      	ldr	r3, [r5, #0]
 8007dca:	b103      	cbz	r3, 8007dce <_isatty_r+0x1a>
 8007dcc:	6023      	str	r3, [r4, #0]
 8007dce:	bd38      	pop	{r3, r4, r5, pc}
 8007dd0:	20004a80 	.word	0x20004a80

08007dd4 <_malloc_usable_size_r>:
 8007dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dd8:	1f18      	subs	r0, r3, #4
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	bfbc      	itt	lt
 8007dde:	580b      	ldrlt	r3, [r1, r0]
 8007de0:	18c0      	addlt	r0, r0, r3
 8007de2:	4770      	bx	lr

08007de4 <_init>:
 8007de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de6:	bf00      	nop
 8007de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dea:	bc08      	pop	{r3}
 8007dec:	469e      	mov	lr, r3
 8007dee:	4770      	bx	lr

08007df0 <_fini>:
 8007df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df2:	bf00      	nop
 8007df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007df6:	bc08      	pop	{r3}
 8007df8:	469e      	mov	lr, r3
 8007dfa:	4770      	bx	lr
